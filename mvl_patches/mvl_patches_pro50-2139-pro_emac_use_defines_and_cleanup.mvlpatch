#! /usr/bin/env bash
# Patch: -pro_emac_use_defines_and_cleanup
# Date: Thu Feb 19 15:03:19 2009
# Source: MontaVista Software, Inc.
# MR: 28780
# Type: Enhancement
# Disposition: local
# Signed-off-by: Steve Chen <schen@mvista.com>
# Signed-off-by: Mikhail Cherkashin <mcherkashin@ru.mvista.com>
# Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
# Description:
# Replace magic numbers with new and existing defines.
# Also remove CFG_START_LINK_SPEED which is not used.
# 
#  drivers/net/davinci_emac.c |   68 +++++++++++++++++++++++----------------------
#  1 files changed, 35 insertions(+), 33 deletions(-)
# 

PATCHNUM=2139
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 28780
Type: Enhancement
Disposition: local
Signed-off-by: Steve Chen <schen@mvista.com>
Signed-off-by: Mikhail Cherkashin <mcherkashin@ru.mvista.com>
Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
Description:
Replace magic numbers with new and existing defines.
Also remove CFG_START_LINK_SPEED which is not used.

 drivers/net/davinci_emac.c |   68 +++++++++++++++++++++++----------------------
 mvl_patches/pro50-2139.c   |   16 ++++++++++
 2 files changed, 51 insertions(+), 33 deletions(-)

Index: linux-2.6.18/drivers/net/davinci_emac.c
===================================================================
--- linux-2.6.18.orig/drivers/net/davinci_emac.c
+++ linux-2.6.18/drivers/net/davinci_emac.c
@@ -268,6 +268,13 @@ typedef void *emac_net_data_token;
 /* mac control register bit fields */
 #define EMAC_MACCONTROL_GIG_FORCE_SHIFT        17
 #define EMAC_MACCONTROL_RMIISPEED_SHIFT        15
+#define EMAC_MACCONTROL_RMIISPEED_MASK         (0x1 << 15)
+#define EMAC_MACCONTROL_RXOFFLENBLOCK_SHIFT    14
+#define EMAC_MACCONTROL_RXOFFLENBLOCK_MASK     (0x1 << 14)
+#define EMAC_MACCONTROL_RXOWNERSHIP_SHIFT      13
+#define EMAC_MACCONTROL_RXOWNERSHIP_MASK       (0x1 << 13)
+#define EMAC_MACCONTROL_CMDIDLE_SHIFT          11
+#define EMAC_MACCONTROL_CMDIDLE_MASK           (0x1 << 11)
 #define EMAC_MACCONTROL_TXSHORTGAPEN_SHIFT     10
 #define EMAC_MACCONTROL_TXSHORTGAPEN_MASK      (0x1 << 10)
 #define EMAC_MACCONTROL_TXPTYPE_SHIFT          9
@@ -448,8 +455,6 @@ typedef void *emac_net_data_token;
 
 #define EGRESS_TRAILOR_LEN                  0
 
-#define CFG_START_LINK_SPEED                (SNWAY_AUTOALL)	/* auto nego */
-
 /* defaut configuration values required for passing on to DDC */
 #define EMAC_DEFAULT_MLINK_MASK                        0
 #define EMAC_DEFAULT_PASS_CRC                          FALSE
@@ -598,8 +603,6 @@ char emac_4byte_align[] = { 0x0, 0x03, 0
 #define EMAC_BD_LENGTH_FOR_CACHE               16	/* only CPPI bytes */
 #define EMAC_RX_BD_PKT_LENGTH_MASK             0xFFFF
 
-#define CFG_START_LINK_SPEED                   (SNWAY_AUTOALL)	/* auto nego */
-
 /*
  * MDIO registers
  */
@@ -1800,14 +1803,14 @@ static int __init emac_p_detect_manual_c
 	if ((link_speed == 0) && (!strcmp(link_mode, "auto"))) {
 		/* Auto negotiation */
 		g_link_speed = 0;
-		g_link_mode = 0;
+		g_link_mode = PHY_DUPLEX_AUTO;
 		pr_debug("auto negotiation selected\n");
 	}
 
 	if (!link_speed || (link_speed != 10 && link_speed != 100
 				&& link_speed != 1000)) {
 		g_link_speed = 0;
-		g_link_mode = 0;
+		g_link_mode = PHY_DUPLEX_AUTO;
 		pr_debug("Invalid or No value of link speed specified,"
 		    "defaulting to auto negotiation .\n");
 	}
@@ -1815,38 +1818,37 @@ static int __init emac_p_detect_manual_c
 	if (!link_mode
 	    || (!strcmp(link_mode, "fd") && !strcmp(link_mode, "hd"))) {
 		g_link_speed = 0;
-		g_link_mode = 0;
+		g_link_mode = PHY_DUPLEX_AUTO;
 		pr_debug("Invalid or No value of link mode specified,"
 		    "defaulting to auto mode.\n");
 	}
 
 	if ((link_speed == 10) && (!strcmp(link_mode, "fd"))) {
 		g_link_speed = 10;
-		g_link_mode = 3;
+		g_link_mode = PHY_DUPLEX_FULL;
 	} else if ((link_speed == 10) && (!strcmp(link_mode, "hd"))) {
 		g_link_speed = 10;
-		g_link_mode = 2;
+		g_link_mode = PHY_DUPLEX_HALF;
 	} else if ((link_speed == 100) && (!strcmp(link_mode, "fd"))) {
 		g_link_speed = 100;
-		g_link_mode = 3;
+		g_link_mode = PHY_DUPLEX_FULL;
 	} else if ((link_speed == 100) && (!strcmp(link_mode, "hd"))) {
 		g_link_speed = 100;
-		g_link_mode = 2;
+		g_link_mode = PHY_DUPLEX_HALF;
 	} else if ((link_speed == 1000) && (!strcmp(link_mode, "fd"))) {
 		g_link_speed = 1000;
-		g_link_mode = 3;
+		g_link_mode = PHY_DUPLEX_FULL;
 	} else {
 		g_link_speed = 0;
-		g_link_mode = 0;
+		g_link_mode = PHY_DUPLEX_AUTO;
 	}
 
 	pr_debug("Link is set to the speed of"
 	    "%s speed and %s mode.\n",
-	    ((g_link_speed ==
-		0) ? "auto" : ((g_link_speed == 100) ? "100" :
+	    ((g_link_speed == 0) ? "auto" : ((g_link_speed == 100) ? "100" :
 		((g_link_speed == 1000) ? "1000" : "10"))),
-	    ((g_link_mode ==
-	      0) ? "auto" : ((g_link_mode == 2) ? "half" : "full")));
+	    ((g_link_mode == 0) ? "auto" :
+		((g_link_mode == PHY_DUPLEX_HALF) ? "half" : "full")));
 
 	return (0);
 }
@@ -3425,8 +3427,8 @@ static void emac_update_phy_status(struc
 		dev->status.phy_duplex = PHY_DUPLEX_FULL;
 		dev->status.phy_num = 0xFFFFFFFF;	/* no phy */
 
-		dev->mac_control |= (1 << EMAC_MACCONTROL_FULLDUPLEXEN_SHIFT)
-				| (1 << EMAC_MACCONTROL_RMIISPEED_SHIFT);
+		dev->mac_control |= EMAC_MACCONTROL_FULLDUPLEXEN_MASK |
+					EMAC_MACCONTROL_RMIISPEED_MASK;
 
 		/* write mac control register from stored value */
 		dev->regs->mac_control = dev->mac_control;
@@ -3450,31 +3452,31 @@ static void emac_update_phy_status(struc
 		dev->status.phy_speed = dev->phydev->speed;
 		dev->status.phy_num = dev->phydev->addr;
 
+		if (dev->status.phy_speed == 100)
+			dev->mac_control |= EMAC_MACCONTROL_RMIISPEED_MASK;
+		else
+			dev->mac_control &= ~EMAC_MACCONTROL_RMIISPEED_MASK;
+
 		/* set the duplex bit in maccontrol */
 		if (dev->status.phy_duplex == PHY_DUPLEX_FULL) {
-			dev->mac_control |=
-			    (1 << EMAC_MACCONTROL_FULLDUPLEXEN_SHIFT);
+			dev->mac_control |= EMAC_MACCONTROL_FULLDUPLEXEN_MASK;
 		} else {
-			dev->mac_control &=
-			    ~(1 << EMAC_MACCONTROL_FULLDUPLEXEN_SHIFT);
+			dev->mac_control &= ~EMAC_MACCONTROL_FULLDUPLEXEN_MASK;
 		}
 
-		if (dev->status.phy_speed == 1000) {
-
-		dev->mac_control |=
-			((0x1 << EMAC_MACCONTROL_GIGABITEN_SHIFT) |
-			 (0x1 << EMAC_MACCONTROL_GIG_FORCE_SHIFT));
-		} else {
+		if (dev->status.phy_speed == 1000)
+			dev->mac_control |=
+				((0x1 << EMAC_MACCONTROL_GIGABITEN_SHIFT) |
+				 (0x1 << EMAC_MACCONTROL_GIG_FORCE_SHIFT));
+		else
 			dev->mac_control &=
 			      ~((0x1 << EMAC_MACCONTROL_GIGABITEN_SHIFT) |
 				(0x1 << EMAC_MACCONTROL_GIG_FORCE_SHIFT));
-		}
 	}
-
 	if (dev->status.phy_speed == 1000)
-		dev->mac_control |= (1 << EMAC_MACCONTROL_GIGABITEN_SHIFT);
+		dev->mac_control |= EMAC_MACCONTROL_GIGABITEN_MASK;
 	else
-		dev->mac_control &= ~(1 << EMAC_MACCONTROL_GIGABITEN_SHIFT);
+		dev->mac_control &= ~EMAC_MACCONTROL_GIGABITEN_MASK;
 
 	/* write mac control register from stored value */
 	dev->regs->mac_control = dev->mac_control;
Index: linux-2.6.18/mvl_patches/pro50-2139.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-2139.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2009 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(2139);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

