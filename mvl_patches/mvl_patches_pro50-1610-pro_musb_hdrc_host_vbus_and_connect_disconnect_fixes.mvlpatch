#! /usr/bin/env bash
# Patch: -pro_musb_hdrc_host_vbus_and_connect_disconnect_fixes
# Date: Fri Sep 19 14:03:14 2008
# From c341e680f635853bf64b81b82688ef90e6bf42d8 Mon Sep 17 00:00:00 2001
# From: David Brownell <dbrownell@users.sourceforge.net>
# Date: Thu, 9 Nov 2006 22:19:43 +0200
# Subject: [PATCH] musb_hdrc: host vbus and connect/disconnect fixes
# 
# Teach host side VBUS powerup and connect logic about the problem whereby
# the HDRC core wrongly reports VBUS_ERROR during initial powerup.
# 
# Remove previous non-working workaround for tusb powering VBUS:  don't
# try handling CPEN by hand.
# 
# Rest of the fix for disconnection issues in A_SUSPEND.
# 
# Signed-off-by: David Brownell <dbrownell@users.sourceforge.net>
# (cherry picked from commit 41416eec5b8957a7e4b43790ef76fcef565902a4)

PATCHNUM=1610
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
From c341e680f635853bf64b81b82688ef90e6bf42d8 Mon Sep 17 00:00:00 2001
From: David Brownell <dbrownell@users.sourceforge.net>
Date: Thu, 9 Nov 2006 22:19:43 +0200
Subject: [PATCH] musb_hdrc: host vbus and connect/disconnect fixes

Teach host side VBUS powerup and connect logic about the problem whereby
the HDRC core wrongly reports VBUS_ERROR during initial powerup.

Remove previous non-working workaround for tusb powering VBUS:  don't
try handling CPEN by hand.

Rest of the fix for disconnection issues in A_SUSPEND.

Signed-off-by: David Brownell <dbrownell@users.sourceforge.net>
(cherry picked from commit 41416eec5b8957a7e4b43790ef76fcef565902a4)
Index: linux-2.6.18/drivers/usb/musb/musbdefs.h
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musbdefs.h
+++ linux-2.6.18/drivers/usb/musb/musbdefs.h
@@ -415,6 +415,7 @@ struct musb {
 	struct musb_hw_ep	 aLocalEnd[MUSB_C_NUM_EPS];
 #define control_ep		aLocalEnd
 
+#define VBUSERR_RETRY_COUNT	3
 	u16			vbuserr_retry;
 	u16 wEndMask;
 	u8 bEndCount;
Index: linux-2.6.18/drivers/usb/musb/plat_uds.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/plat_uds.c
+++ linux-2.6.18/drivers/usb/musb/plat_uds.c
@@ -108,9 +108,6 @@
 #endif
 
 #include "musbdefs.h"
-// #ifdef CONFIG_USB_MUSB_HDRC_HCD
-#define VBUSERR_RETRY_COUNT	2		/* is this too few? */
-// #endif
 
 
 #ifdef CONFIG_ARCH_DAVINCI
@@ -411,8 +408,52 @@ static irqreturn_t musb_stage0_irq(struc
 	}
 
 	if (bIntrUSB & MGC_M_INTR_VBUSERROR) {
+		int	ignore = 0;
 
-		DBG(1, "VBUS_ERROR (%02x, %s), retry #%d\n", devctl,
+		/* During connection as an A-Device, we may see a short
+		 * current spikes causing voltage drop, because of cable
+		 * and peripheral capacitance combined with vbus draw.
+		 * (So: less common with truly self-powered devices, where
+		 * vbus doesn't act like a power supply.)
+		 *
+		 * Such spikes are short; usually less than ~500 usec, max
+		 * of ~2 msec.  That is, they're not sustained overcurrent
+		 * errors, though they're reported using VBUSERROR irqs.
+		 *
+		 * Workarounds:  (a) hardware: use self powered devices.
+		 * (b) software:  ignore non-repeated VBUS errors.
+		 *
+		 * REVISIT:  do delays from lots of DEBUG_KERNEL checks
+		 * make trouble here, keeping VBUS < 4.4V ?
+		 */
+		switch (pThis->xceiv.state) {
+		case OTG_STATE_A_HOST:
+			/* recovery is dicey once we've gotten past the
+			 * initial stages of enumeration, but if VBUS
+			 * stayed ok at the other end of the link, and
+			 * another reset is due (at least for high speed,
+			 * to redo the chirp etc), it might work OK...
+			 */
+		case OTG_STATE_A_WAIT_BCON:
+		case OTG_STATE_A_WAIT_VRISE:
+			if (pThis->vbuserr_retry) {
+				pThis->vbuserr_retry--;
+				ignore = 1;
+				devctl |= MGC_M_DEVCTL_SESSION;
+				musb_writeb(pBase, MGC_O_HDRC_DEVCTL, devctl);
+			} else {
+				pThis->port1_status |=
+					  (1 << USB_PORT_FEAT_OVER_CURRENT)
+					| (1 << USB_PORT_FEAT_C_OVER_CURRENT);
+			}
+			break;
+		default:
+			break;
+		}
+
+		DBG(1, "VBUS_ERROR in %s (%02x, %s), retry #%d, port1 %08x\n",
+				otg_state_string(pThis),
+				devctl,
 				({ char *s;
 				switch (devctl & MGC_M_DEVCTL_VBUS) {
 				case 0 << MGC_S_DEVCTL_VBUS:
@@ -425,13 +466,14 @@ static irqreturn_t musb_stage0_irq(struc
 				default:
 					s = "VALID"; break;
 				}; s; }),
-				pThis->vbuserr_retry);
+				VBUSERR_RETRY_COUNT - pThis->vbuserr_retry,
+				pThis->port1_status);
 
 		/* go through A_WAIT_VFALL then start a new session */
-		musb_set_vbus(pThis, 0);
+		if (!ignore)
+			musb_set_vbus(pThis, 0);
 		handled = IRQ_HANDLED;
-	} else
-		pThis->vbuserr_retry = VBUSERR_RETRY_COUNT;
+	}
 
 	if (bIntrUSB & MGC_M_INTR_CONNECT) {
 		handled = IRQ_HANDLED;
@@ -468,10 +510,13 @@ static irqreturn_t musb_stage0_irq(struc
 			pThis->xceiv.state = OTG_STATE_B_HOST;
 			break;
 		default:
-			pThis->xceiv.state = OTG_STATE_A_HOST;
+			if ((devctl & MGC_M_DEVCTL_VBUS)
+					== (3 << MGC_S_DEVCTL_VBUS))
+				pThis->xceiv.state = OTG_STATE_A_HOST;
 			break;
 		}
-		DBG(1, "CONNECT (%s)\n", otg_state_string(pThis));
+		DBG(1, "CONNECT (%s) devctl %02x\n",
+				otg_state_string(pThis), devctl);
 	}
 #endif	/* CONFIG_USB_MUSB_HDRC_HCD */
 
@@ -566,18 +611,35 @@ static irqreturn_t musb_stage2_irq(struc
 #endif
 
 	if ((bIntrUSB & MGC_M_INTR_DISCONNECT) && !pThis->bIgnoreDisconnect) {
-		DBG(1, "DISCONNECT as %s, devctl %02x\n",
+		DBG(1, "DISCONNECT (%s) as %s, devctl %02x\n",
+				otg_state_string(pThis),
 				MUSB_MODE(pThis), devctl);
 		handled = IRQ_HANDLED;
-		pThis->is_active = 0;
 
-		/* need to check it against pThis, because devctl is going
-		 * to report ID low as soon as the device gets disconnected
-		 */
-		if (is_host_active(pThis))
+		switch (pThis->xceiv.state) {
+#ifdef CONFIG_USB_MUSB_HDRC_HCD
+		case OTG_STATE_A_HOST:
+		case OTG_STATE_A_SUSPEND:
 			musb_root_disconnect(pThis);
-		else
+			break;
+#endif	/* HOST */
+#ifdef CONFIG_USB_MUSB_OTG
+		case OTG_STATE_A_PERIPHERAL:
+		case OTG_STATE_B_HOST:
+			musb_root_disconnect(pThis);
+			/* FALLTHROUGH */
+		case OTG_STATE_B_WAIT_ACON:
+#endif	/* OTG */
+#ifdef CONFIG_USB_GADGET_MUSB_HDRC
+		case OTG_STATE_B_PERIPHERAL:
 			musb_g_disconnect(pThis);
+			break;
+#endif	/* GADGET */
+		default:
+			WARN("unhandled DISCONNECT transition (%s)\n",
+				otg_state_string(pThis));
+			break;
+		}
 
 		schedule_work(&pThis->irq_work);
 	}
@@ -1299,8 +1361,6 @@ irqreturn_t musb_interrupt(struct musb *
 	if (musb->int_usb & STAGE0_MASK)
 		retval |= musb_stage0_irq(musb, musb->int_usb,
 				devctl, power);
-	else
-		musb->vbuserr_retry = VBUSERR_RETRY_COUNT;
 
 	/* "stage 1" is handling endpoint irqs */
 
@@ -1450,7 +1510,7 @@ musb_cable_show(struct device *dev, stru
 	int vbus;
 
 	spin_lock_irqsave(&musb->Lock, flags);
-#ifdef CONFIG_USB_TUSB6010
+#if defined(CONFIG_USB_TUSB6010) && !defined(CONFIG_USB_MUSB_OTG)
 	/* REVISIT: connect-A != connect-B ... */
 	vbus = musb_platform_get_vbus_status(musb);
 	if (vbus)
Index: linux-2.6.18/drivers/usb/musb/tusb6010.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/tusb6010.c
+++ linux-2.6.18/drivers/usb/musb/tusb6010.c
@@ -336,7 +336,10 @@ static void tusb_set_vbus(struct musb *m
 	u32		conf, prcm, timer;
 	u8		devctl;
 
-	/* we control CPEN in software not hardware ... */
+	/* HDRC controls CPEN, but beware current surges during device
+	 * connect.  They can trigger transient overcurrent conditions
+	 * that must be ignored.
+	 */
 
 	prcm = musb_readl(base, TUSB_PRCM_MNGMT);
 	conf = musb_readl(base, TUSB_DEV_CONF);
@@ -344,25 +347,28 @@ static void tusb_set_vbus(struct musb *m
 
 	if (is_on) {
 		musb->is_active = 1;
-		prcm |= TUSB_PRCM_MNGMT_5V_CPEN;
 		timer = OTG_TIMER_MS(OTG_TIME_A_WAIT_VRISE);
 
 		musb->xceiv.default_a = 1;
 		musb->xceiv.state = OTG_STATE_A_WAIT_VRISE;
+		devctl |= MGC_M_DEVCTL_SESSION;
 
 		conf |= TUSB_DEV_CONF_USB_HOST_MODE;
-
+		MUSB_HST_MODE(musb);
 	} else {
-		prcm &= ~TUSB_PRCM_MNGMT_5V_CPEN;
+		musb->is_active = 0;
 		timer = 0;
 
-		if (musb->xceiv.default_a) {
-			musb->xceiv.state = OTG_STATE_A_WAIT_VFALL;
-			devctl &= ~MGC_M_DEVCTL_SESSION;
-		} else {
-			musb->xceiv.state = OTG_STATE_B_IDLE;
-			musb->is_active = 0;
-		}
+		/* NOTE:  we're skipping A_WAIT_VFALL -> A_IDLE and
+		 * jumping right to B_IDLE...
+		 */
+
+		musb->xceiv.default_a = 0;
+		musb->xceiv.state = OTG_STATE_B_IDLE;
+		devctl &= ~MGC_M_DEVCTL_SESSION;
+
+		conf &= ~TUSB_DEV_CONF_USB_HOST_MODE;
+		MUSB_DEV_MODE(musb);
 	}
 	prcm &= ~(TUSB_PRCM_MNGMT_15_SW_EN | TUSB_PRCM_MNGMT_33_SW_EN);
 
@@ -402,6 +408,16 @@ tusb_otg_ints(struct musb *musb, u32 int
 		/* B-dev state machine:  no vbus ~= disconnect */
 		if ((is_otg_enabled(musb) && !musb->xceiv.default_a)
 				|| !is_host_enabled(musb)) {
+#ifdef CONFIG_USB_MUSB_HDRC_HCD
+			// ? musb_root_disconnect(musb);
+			musb->port1_status &=
+				~(USB_PORT_STAT_CONNECTION
+				| USB_PORT_STAT_ENABLE
+				| USB_PORT_STAT_LOW_SPEED
+				| USB_PORT_STAT_HIGH_SPEED
+				| USB_PORT_STAT_TEST
+				);
+#endif
 
 			if (otg_stat & TUSB_DEV_OTG_STAT_SESS_END) {
 				if (musb->xceiv.state != OTG_STATE_B_IDLE) {
@@ -426,9 +442,8 @@ tusb_otg_ints(struct musb *musb, u32 int
 				 */
 				break;
 			case OTG_STATE_A_WAIT_VFALL:
-				/* REVISIT this irq triggers at too high a
-				 * voltage ... we probably need to use the
-				 * OTG timer to wait for session end.
+				/* REVISIT this irq triggers during short
+				 * spikes causet by enumeration ...
 				 */
 				if (musb->vbuserr_retry) {
 					musb->vbuserr_retry--;
@@ -449,30 +464,32 @@ tusb_otg_ints(struct musb *musb, u32 int
 
 		switch (musb->xceiv.state) {
 		case OTG_STATE_A_WAIT_VRISE:
-			/* VBUS has probably been valid for a while now */
+			/* VBUS has probably been valid for a while now,
+			 * but may well have bounced out of range a bit
+			 */
 			devctl = musb_readb(musb->pRegs, MGC_O_HDRC_DEVCTL);
 			if (otg_stat & TUSB_DEV_OTG_STAT_VBUS_VALID) {
+				u32	timer;
+
 				if ((devctl & MGC_M_DEVCTL_VBUS)
 						!= MGC_M_DEVCTL_VBUS) {
 					DBG(2, "devctl %02x\n", devctl);
 					break;
 				}
+				musb->xceiv.state = OTG_STATE_A_WAIT_BCON;
 
-				/* request a session, then DEVCTL_HM will
-				 * be set by the controller
+				/* REVISIT: if nothing is connected yet,
+				 * mark controller as inactive so that
+				 * we can suspend the TUSB chip.
 				 */
-				devctl |= MGC_M_DEVCTL_SESSION;
-				musb_writeb(musb->pRegs, MGC_O_HDRC_DEVCTL,
-						devctl);
-				musb->xceiv.state = OTG_STATE_A_WAIT_BCON;
 
 				/* timeout 0 == infinite (like non-OTG hosts) */
-				if (OTG_TIME_A_WAIT_BCON)
+				timer = OTG_TIMER_MS(OTG_TIME_A_WAIT_BCON);
+				if (timer)
 					musb_writel(base, TUSB_DEV_OTG_TIMER,
-						OTG_TIMER_MS(OTG_TIME_A_WAIT_BCON));
-				else
-					musb_writel(base, TUSB_DEV_OTG_TIMER, 0);
+							timer);
 			} else {
+				/* REVISIT report overcurrent to hub? */
 				ERR("vbus too slow, devctl %02x\n", devctl);
 				tusb_set_vbus(musb, 0);
 			}
@@ -488,7 +505,6 @@ tusb_otg_ints(struct musb *musb, u32 int
 		default:
 			break;
 		}
-		musb_writel(base, TUSB_DEV_OTG_TIMER, 0);
 	}
 }
 
@@ -747,8 +763,7 @@ static int __devinit tusb_start(struct m
 	musb_writel(base, TUSB_VLYNQ_CTRL, 8);
 
 	/* Select PHY free running 60MHz as a system clock */
-	musb_writel(base, TUSB_PRCM_CONF, //FIXME: CPEN should not be needed!
-			TUSB_PRCM_CONF_SFW_CPEN | TUSB_PRCM_CONF_SYS_CLKSEL(1));
+	tusb_set_clock_source(musb, 1);
 
 	/* VBus valid timer 1us, disable DFT/Debug and VLYNQ clocks for
 	 * power saving, enable VBus detect and session end comparators,
Index: linux-2.6.18/drivers/usb/musb/virthub.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/virthub.c
+++ linux-2.6.18/drivers/usb/musb/virthub.c
@@ -144,6 +144,7 @@ static void musb_port_reset(struct musb 
 					| (USB_PORT_STAT_C_ENABLE << 16);
 		usb_hcd_poll_rh_status(musb_to_hcd(musb));
 
+		musb->vbuserr_retry = VBUSERR_RETRY_COUNT;
 	}
 }
 
Index: linux-2.6.18/mvl_patches/pro50-1610.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1610.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1610);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

