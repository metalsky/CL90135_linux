#! /usr/bin/env bash
# Patch: -pro_arm_davinci_i2c_client_fix
# Date: Thu Feb 19 14:57:36 2009
# Source: MontaVista Software, Inc.
# MR: 31724
# Type: Defect Fix
# Disposition: local
# Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
# Description:
# DaVinci I2C client mishandles the dynamically allocated 'struct i2_client':
# - detach_client() method doesn't free this structure (and it should);
# - several functions may access already freed structure in (unlikely) case of
#   the client's registration with I2C subsystem failing;
# - a check in davinci_i2c_attach_client() for client->adapter being already set
#   is misplaced.
# 
# Since there's little point in having 'struct i2_client' dynamically allocated,
# declare a static pre-initialized variable instead and, while at it:
# - fix warning in davinci_i2c_write() by dropping the *const* modifier;
# - drop meaningless 'addr' argument from davinci_i2c_attach_client(), rename it
#   to davinci_i2c_attach_adapter() and its argument to 'adapter', and replace
#   davinci_i2c_probe_adapter() with it as the attach_client() method;
# - only set client->adapter to NULL if i2c_detach_client() succeeds;
# - rename davinci_i2c_client_driver to davinci_evm_driver, changing the driver's
#   name to more fitting "davinci_evm" as the driver actually serves all DaVinci
#   EVM on-board I2C chips...
# 
#  arch/arm/mach-davinci/i2c-client.c |   63 +++++++++++++------------------------
#  1 files changed, 23 insertions(+), 40 deletions(-)
# 

PATCHNUM=2058
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 31724
Type: Defect Fix
Disposition: local
Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
Description:
DaVinci I2C client mishandles the dynamically allocated 'struct i2_client':
- detach_client() method doesn't free this structure (and it should);
- several functions may access already freed structure in (unlikely) case of
  the client's registration with I2C subsystem failing;
- a check in davinci_i2c_attach_client() for client->adapter being already set
  is misplaced.

Since there's little point in having 'struct i2_client' dynamically allocated,
declare a static pre-initialized variable instead and, while at it:
- fix warning in davinci_i2c_write() by dropping the *const* modifier;
- drop meaningless 'addr' argument from davinci_i2c_attach_client(), rename it
  to davinci_i2c_attach_adapter() and its argument to 'adapter', and replace
  davinci_i2c_probe_adapter() with it as the attach_client() method;
- only set client->adapter to NULL if i2c_detach_client() succeeds;
- rename davinci_i2c_client_driver to davinci_evm_driver, changing the driver's
  name to more fitting "davinci_evm" as the driver actually serves all DaVinci
  EVM on-board I2C chips...

 arch/arm/mach-davinci/i2c-client.c |   63 +++++++++++++------------------------
 mvl_patches/pro50-2058.c           |   16 +++++++++
 2 files changed, 39 insertions(+), 40 deletions(-)

Index: linux-2.6.18/arch/arm/mach-davinci/i2c-client.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/i2c-client.c
+++ linux-2.6.18/arch/arm/mach-davinci/i2c-client.c
@@ -34,14 +34,14 @@
 #include <asm/arch/i2c-client.h>
 
 static DEFINE_MUTEX(expander_lock);
-static struct i2c_client *client_handle;
+
+static struct i2c_client davinci_i2c_client;
 
 /* This function is used for internal initialization */
 int davinci_i2c_read(u8 size, u8 * val, u16 client_addr)
 {
 	int err;
-	struct i2c_client *client = client_handle;
-
+	struct i2c_client *client = &davinci_i2c_client;
 	struct i2c_msg msg[1];
 
 	if (!client->adapter)
@@ -67,8 +67,7 @@ EXPORT_SYMBOL(davinci_i2c_read);
 int davinci_i2c_write(u8 size, u8 * val, u16 client_addr)
 {
 	int err;
-	struct i2c_client *client = client_handle;
-
+	struct i2c_client *client = &davinci_i2c_client;
 	struct i2c_msg msg[1];
 
 	if (!client->adapter)
@@ -139,7 +138,7 @@ int davinci_i2c_expander_op(u16 client_a
 		return err;
 	}
 	if (!cpu_is_davinci_dm6467() && pin == CF_SEL) {
-		static const char cmd[4] = { 4, 6, 0x00, 0x09 };
+		static char cmd[4] = { 4, 6, 0x00, 0x09 };
 
 		err = davinci_i2c_write(4, cmd, 0x23);
 		if (err) {
@@ -160,35 +159,22 @@ int davinci_i2c_expander_op(u16 client_a
 
 EXPORT_SYMBOL(davinci_i2c_expander_op);
 
-static struct i2c_driver davinci_i2c_client_driver;
-
 void (*board_i2c_expander_setup)(void);
 
-static int davinci_i2c_attach_client(struct i2c_adapter *adap, int addr)
+static int davinci_i2c_attach_adapter(struct i2c_adapter *adapter)
 {
-	struct i2c_client *client;
+	struct i2c_client *client = &davinci_i2c_client;
 	int err;
 	u8 data_to_u35 = 0xf6;
 
-	if (!(client = kzalloc(sizeof(struct i2c_client), GFP_KERNEL))) {
-		err = -ENOMEM;
-		goto exit;
-	}
-	client_handle = client;
-
 	if (client->adapter)
 		return -EBUSY;	/* our client is already attached */
-
-	client->addr = addr;
-	client->flags = 0;
-	client->driver = &davinci_i2c_client_driver;
-	client->adapter = adap;
-	strlcpy(client->name, client->driver->driver.name, I2C_NAME_SIZE);
+	client->adapter = adapter;
 
 	err = i2c_attach_client(client);
 	if (err) {
 		client->adapter = NULL;
-		goto exit_kfree;
+		return err;
 	}
 
 	err = davinci_i2c_write(1, &data_to_u35, 0x3A);
@@ -197,11 +183,6 @@ static int davinci_i2c_attach_client(str
 		board_i2c_expander_setup();
 
 	return 0;
-
- exit_kfree:
-	kfree(client);
- exit:
-	return err;
 }
 
 static int davinci_i2c_detach_client(struct i2c_client *client)
@@ -212,33 +193,35 @@ static int davinci_i2c_detach_client(str
 		return -ENODEV;	/* our client isn't attached */
 
 	err = i2c_detach_client(client);
-	client->adapter = NULL;
+	if (!err)
+		client->adapter = NULL;
 	return err;
 }
 
-static int davinci_i2c_probe_adapter(struct i2c_adapter *adap)
-{
-	return davinci_i2c_attach_client(adap, 0x3A);
-}
-
 /* This is the driver that will be inserted */
-static struct i2c_driver davinci_i2c_client_driver = {
+static struct i2c_driver davinci_evm_driver = {
 	.driver = {
-		/* there are 3 expanders, one is leds-only ... */
-		.name	= "davinci_evm_expander1",
+		.name	= "davinci_evm",
 	},
-	.attach_adapter	= davinci_i2c_probe_adapter,
+	.attach_adapter	= davinci_i2c_attach_adapter,
 	.detach_client	= davinci_i2c_detach_client,
 };
 
+/* There are actually 3 expanders on DaVinci EVM, one is LEDs only... */
+static struct i2c_client davinci_i2c_client = {
+	.addr	 	= 0x3A,
+	.driver 	= &davinci_evm_driver,
+	.name		= "davinci_evm_expander1",
+};
+
 static int __init davinci_i2c_client_init(void)
 {
-	return i2c_add_driver(&davinci_i2c_client_driver);
+	return i2c_add_driver(&davinci_evm_driver);
 }
 
 static void __exit davinci_i2c_client_exit(void)
 {
-	i2c_del_driver(&davinci_i2c_client_driver);
+	i2c_del_driver(&davinci_evm_driver);
 }
 
 module_init(davinci_i2c_client_init);
Index: linux-2.6.18/mvl_patches/pro50-2058.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-2058.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2009 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(2058);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

