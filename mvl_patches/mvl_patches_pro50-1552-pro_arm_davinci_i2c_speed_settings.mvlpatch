#! /usr/bin/env bash
# Patch: -pro_arm_davinci_i2c_speed_settings
# Date: Fri Sep 19 13:59:06 2008
# Source: MontaVista Software, Inc.
# MR: 27723
# Type: Integration
# Disposition: Need to submit to linux-davinci-2.6.git
# Signed-off-by: Steve Chen <schen@mvista.com>
# Description:
#  i2c bus frequency and delay settings update to support multiple boards.
#  Also, update clock rate calculation to support DM355 sound.
# 

PATCHNUM=1552
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 27723
Type: Integration
Disposition: Need to submit to linux-davinci-2.6.git
Signed-off-by: Steve Chen <schen@mvista.com>
Description:
 i2c bus frequency and delay settings update to support multiple boards.
 Also, update clock rate calculation to support DM355 sound.

Index: linux-2.6.18/arch/arm/mach-davinci/devices.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/devices.c
+++ linux-2.6.18/arch/arm/mach-davinci/devices.c
@@ -25,6 +25,7 @@
 #include <asm/mach/map.h>
 
 #include <asm/arch/i2c.h>
+#include <asm/arch/cpu.h>
 
 #define DAVINCI_WDOG_BASE	(IO_PHYS + 0x21C00)
 
@@ -40,16 +41,26 @@ static struct resource i2c_resources[] =
 	},
 };
 
-static struct davinci_i2c_platform_data davinci_i2c_data = {
+static struct davinci_i2c_platform_data dm644x_i2c_data = {
 	.bus_freq	= 20,
 	.bus_delay	= 100,
 };
 
+static struct davinci_i2c_platform_data dm355_i2c_data = {
+	.bus_freq	= 400,
+	.bus_delay	= 0,
+};
+
+static struct davinci_i2c_platform_data dm646x_i2c_data = {
+	.bus_freq	= 100,
+	.bus_delay	= 0,
+};
+
 static struct platform_device i2c_device = {
 	.name           = "i2c_davinci",
 	.id             = 1,
 	.dev		= {
-		.platform_data = &davinci_i2c_data,
+		.platform_data = &dm355_i2c_data,
 	},
 	.num_resources	= ARRAY_SIZE(i2c_resources),
 	.resource	= i2c_resources,
@@ -120,8 +131,18 @@ static struct platform_device *devices[]
 	&usb_device,
 };
 
+static void __init davinci_init_cpu_i2c(void)
+{
+	if (cpu_is_davinci_dm644x())
+		i2c_device.dev.platform_data = &dm644x_i2c_data;
+	else if (cpu_is_davinci_dm6467())
+		i2c_device.dev.platform_data = &dm646x_i2c_data;
+
+	/* all others default to use dm355 because dm355 uses the max speed */
+}
 static int __init davinci_init_devices(void)
 {
+	davinci_init_cpu_i2c();
 	platform_add_devices(devices, ARRAY_SIZE(devices));
 	return 0;
 }
Index: linux-2.6.18/drivers/i2c/busses/i2c-davinci.c
===================================================================
--- linux-2.6.18.orig/drivers/i2c/busses/i2c-davinci.c
+++ linux-2.6.18/drivers/i2c/busses/i2c-davinci.c
@@ -108,6 +108,11 @@
 	} \
 } while (0)
 
+/*
+ * Choose 12Mhz as the targeted I2C clock frequency after the prescaler.
+ */
+#define I2C_PRESCALED_CLOCK	12000000UL
+
 struct davinci_i2c_dev {
 	struct device           *dev;
 	void __iomem		*base;
@@ -147,10 +152,9 @@ static int i2c_davinci_init(struct davin
 	struct davinci_i2c_platform_data *pdata = dev->dev->platform_data;
 	u16 psc;
 	u32 clk;
-	u32 clkh;
-	u32 clkl;
 	u32 input_clock = clk_get_rate(dev->clk);
 	u16 w;
+	u32 div, d;
 
 	if (!pdata)
 		pdata = &davinci_i2c_platform_data_default;
@@ -175,16 +179,25 @@ static int i2c_davinci_init(struct davin
 	 *       if PSC == 1, d = 6
 	 *       if PSC > 1 , d = 5
 	 */
+	psc = (input_clock + (I2C_PRESCALED_CLOCK - 1)) /
+	      I2C_PRESCALED_CLOCK - 1;
+	if (psc == 0)
+		d = 7;
+	else if (psc == 1)
+		d = 6;
+	else
+		d = 5;
 
-	psc = 26; /* To get 1MHz clock */
-
-	clk = ((input_clock / (psc + 1)) / (pdata->bus_freq * 1000)) - 10;
-	clkh = (50 * clk) / 100;
-	clkl = clk - clkh;
+	div = 2 * (psc + 1) * pdata->bus_freq * 1000;
+	clk = (input_clock + div - 1)/div;
+	if (clk >= d)
+		clk -= d;
+	else
+		clk = 0;
 
 	davinci_i2c_write_reg(dev, DAVINCI_I2C_PSC_REG, psc);
-	davinci_i2c_write_reg(dev, DAVINCI_I2C_CLKH_REG, clkh);
-	davinci_i2c_write_reg(dev, DAVINCI_I2C_CLKL_REG, clkl);
+	davinci_i2c_write_reg(dev, DAVINCI_I2C_CLKH_REG, clk);
+	davinci_i2c_write_reg(dev, DAVINCI_I2C_CLKL_REG, clk);
 
 	dev_dbg(dev->dev, "CLK  = %d\n", clk);
 	dev_dbg(dev->dev, "PSC  = %d\n",
Index: linux-2.6.18/mvl_patches/pro50-1552.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1552.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1552);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

