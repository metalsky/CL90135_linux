#! /usr/bin/env bash
# Patch: -pro_musb_hdrc_Add_board_specific_external_clock_handlin
# Date: Fri Sep 19 14:04:38 2008
# From 333fab99963e6e25679f1f111c11000dc347a0e1 Mon Sep 17 00:00:00 2001
# From: Dmitry Krivoschekov <dkrivoschekov@ru.mvista.com>
# Date: Wed, 21 May 2008 17:19:36 +0400
# Subject: [PATCH] musb_hdrc: Add board specific external clock handling
# 
# On N800, if osc_ck is disabled by PM, USB will stop working.
# 
# Signed-off-by: Tony Lindgren <tony@atomide.com>
# 
# Updated so some of this code can be shared with other HDRC implementations;
# pretty much everything except the TUSB 6010 EVM needs a clock.  This will
# need more work in the future.
# 
# Signed-off-by: David Brownell <dbrownell@users.sourceforge.net>
# (cherry picked from commit 4648dd526b8f7b7ff18af5cc06c5b16636fa7e97)
# 
# Conflicts:
# 
# 	arch/arm/mach-omap2/board-n800-usb.c

PATCHNUM=1631
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
From 333fab99963e6e25679f1f111c11000dc347a0e1 Mon Sep 17 00:00:00 2001
From: Dmitry Krivoschekov <dkrivoschekov@ru.mvista.com>
Date: Wed, 21 May 2008 17:19:36 +0400
Subject: [PATCH] musb_hdrc: Add board specific external clock handling

On N800, if osc_ck is disabled by PM, USB will stop working.

Signed-off-by: Tony Lindgren <tony@atomide.com>

Updated so some of this code can be shared with other HDRC implementations;
pretty much everything except the TUSB 6010 EVM needs a clock.  This will
need more work in the future.

Signed-off-by: David Brownell <dbrownell@users.sourceforge.net>
(cherry picked from commit 4648dd526b8f7b7ff18af5cc06c5b16636fa7e97)

Conflicts:

	arch/arm/mach-omap2/board-n800-usb.c
Index: linux-2.6.18/drivers/usb/musb/musbdefs.h
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musbdefs.h
+++ linux-2.6.18/drivers/usb/musb/musbdefs.h
@@ -39,6 +39,7 @@
 #include <linux/interrupt.h>
 #include <linux/smp_lock.h>
 #include <linux/errno.h>
+#include <linux/clk.h>
 #include <linux/device.h>
 #include <linux/usb/ch9.h>
 #include <linux/usb_gadget.h>
@@ -402,6 +403,8 @@ struct musb {
 	u8 board_mode;		/* enum musb_mode */
 	int			(*board_set_power)(int state);
 
+	int			(*set_clock)(struct clk *clk, int is_active);
+
 	u8			min_power;	/* vbus for periph, in mA/2 */
 
 	/* active means connected and not suspended */
Index: linux-2.6.18/drivers/usb/musb/plat_uds.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/plat_uds.c
+++ linux-2.6.18/drivers/usb/musb/plat_uds.c
@@ -97,7 +97,6 @@
 #include <linux/list.h>
 #include <linux/kobject.h>
 #include <linux/platform_device.h>
-#include <linux/clk.h>
 
 #include <asm/io.h>
 
@@ -792,6 +791,10 @@ static void musb_shutdown(struct platfor
 	spin_lock_irqsave(&musb->Lock, flags);
 	musb_platform_disable(musb);
 	musb_generic_disable(musb);
+	if (musb->clock) {
+		clk_put(musb->clock);
+		musb->clock = NULL;
+	}
 	spin_unlock_irqrestore(&musb->Lock, flags);
 
 	/* FIXME power down */
@@ -1712,8 +1715,23 @@ musb_init_controller(struct device *dev,
 	spin_lock_init(&pThis->Lock);
 	pThis->board_mode = plat->mode;
 	pThis->board_set_power = plat->set_power;
+	pThis->set_clock = plat->set_clock;
 	pThis->min_power = plat->min_power;
 
+	/* Clock usage is chip-specific ... functional clock (DaVinci,
+	 * OMAP2430), or PHY ref (some TUSB6010 boards).  All this core
+	 * code does is make sure a clock handle is available; platform
+	 * code manages it during start/stop and suspend/resume.
+	 */
+	if (plat->clock) {
+		pThis->clock = clk_get(dev, plat->clock);
+		if (IS_ERR(pThis->clock)) {
+			status = PTR_ERR(pThis->clock);
+			pThis->clock = NULL;
+			goto fail;
+		}
+	}
+
 	/* assume vbus is off */
 
 	/* platform adjusts pThis->pRegs and pThis->isr if needed,
@@ -1825,6 +1843,8 @@ musb_init_controller(struct device *dev,
 		musb_debug_create("driver/musb_hdrc", pThis);
 	else {
 fail:
+		if (pThis->clock)
+			clk_put(pThis->clock);
 		device_init_wakeup(dev, 0);
 		musb_free(pThis);
 		return status;
Index: linux-2.6.18/drivers/usb/musb/tusb6010.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/tusb6010.c
+++ linux-2.6.18/drivers/usb/musb/tusb6010.c
@@ -159,6 +159,9 @@ static int tusb_draw_power(struct otg_tr
 	/* tps65030 seems to consume max 100mA, with maybe 60mA available
 	 * (measured on one board) for things other than tps and tusb.
 	 *
+	 * Boards sharing the CPU clock with CLKIN will need to prevent
+	 * certain idle sleep states while the USB link is active.
+	 *
 	 * REVISIT we could use VBUS to supply only _one_ of { 1.5V, 3.3V }.
 	 * The actual current usage would be very board-specific.  For now,
 	 * it's simpler to just use an aggregate (also board-specific).
@@ -168,11 +171,15 @@ static int tusb_draw_power(struct otg_tr
 
 	reg = musb_readl(base, TUSB_PRCM_MNGMT);
 	if (mA) {
+		if (musb->set_clock)
+			musb->set_clock(musb->clock, 1);
 		musb->is_bus_powered = 1;
 		reg |= TUSB_PRCM_MNGMT_15_SW_EN | TUSB_PRCM_MNGMT_33_SW_EN;
 	} else {
 		musb->is_bus_powered = 0;
 		reg &= ~(TUSB_PRCM_MNGMT_15_SW_EN | TUSB_PRCM_MNGMT_33_SW_EN);
+		if (musb->set_clock)
+			musb->set_clock(musb->clock, 0);
 	}
 	musb_writel(base, TUSB_PRCM_MNGMT, reg);
 
Index: linux-2.6.18/include/linux/usb/musb.h
===================================================================
--- linux-2.6.18.orig/include/linux/usb/musb.h
+++ linux-2.6.18/include/linux/usb/musb.h
@@ -17,10 +17,15 @@ enum musb_mode {
 	MUSB_OTG		/* Mini-AB connector */
 };
 
+struct clk;
+
 struct musb_hdrc_platform_data {
 	/* MUSB_HOST, MUSB_PERIPHERAL, or MUSB_OTG */
 	u8		mode;
 
+	/* for clk_get() */
+	const char	*clock;
+
 	/* (HOST or OTG) switch VBUS on/off */
 	int		(*set_vbus)(struct device *dev, int is_on);
 
@@ -40,5 +45,8 @@ struct musb_hdrc_platform_data {
 
 	/* Power the device on or off */
 	int		(*set_power)(int state);
+
+	/* Turn device clock on or off */
+	int		(*set_clock)(struct clk *clock, int is_on);
 };
 
Index: linux-2.6.18/mvl_patches/pro50-1631.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1631.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1631);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

