#! /usr/bin/env bash
# Patch: -pro_arm_davinci_move_i2c_code_to_common_dir
# Date: Thu Feb 19 15:00:39 2009
# Source: MontaVista Software, Inc.
# MR: 30941
# Type: Enhancement
# Disposition: local
# Signed-off-by: Mark A. Greer <mgreer@mvista.com>
# Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
# Description:
# 
#     I2C: move common DaVinci client code to arch/arm/plat-davinci/
# 
#     Most of the i2c-client.c code in arch/arm/mach-davinci/ can be shared with
#     other DaVinci-like platforms, so move the shareable code to plat-davinci/.
#     Get rid of U35 in the names which only has to do with the original DaVinci
#     EVM board.
# 
#  arch/arm/mach-davinci/i2c-client.c        |  228 ------------------------------
#  arch/arm/mach-davinci/Kconfig             |    8 -
#  arch/arm/mach-davinci/Makefile            |    1 
#  arch/arm/plat-davinci/Kconfig             |    8 +
#  arch/arm/plat-davinci/Makefile            |    1 
#  arch/arm/plat-davinci/i2c-client.c        |  203 ++++++++++++++++++++++++++
#  include/asm-arm/arch-davinci/i2c-client.h |    8 -
#  7 files changed, 216 insertions(+), 241 deletions(-)
# 

PATCHNUM=2103
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 30941
Type: Enhancement
Disposition: local
Signed-off-by: Mark A. Greer <mgreer@mvista.com>
Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
Description:

    I2C: move common DaVinci client code to arch/arm/plat-davinci/

    Most of the i2c-client.c code in arch/arm/mach-davinci/ can be shared with
    other DaVinci-like platforms, so move the shareable code to plat-davinci/.
    Get rid of U35 in the names which only has to do with the original DaVinci
    EVM board.

 arch/arm/mach-davinci/Kconfig             |    8 -
 arch/arm/mach-davinci/Makefile            |    1 
 arch/arm/mach-davinci/i2c-client.c        |  228 ------------------------------
 arch/arm/plat-davinci/Kconfig             |    8 +
 arch/arm/plat-davinci/Makefile            |    1 
 arch/arm/plat-davinci/i2c-client.c        |  203 ++++++++++++++++++++++++++
 include/asm-arm/arch-davinci/i2c-client.h |    8 -
 mvl_patches/pro50-2103.c                  |   16 ++
 8 files changed, 232 insertions(+), 241 deletions(-)

Index: linux-2.6.18/arch/arm/mach-davinci/Kconfig
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/Kconfig
+++ linux-2.6.18/arch/arm/mach-davinci/Kconfig
@@ -42,14 +42,6 @@ config MACH_DAVINCI_DM6467_EVM
 
 endchoice
 
-config DAVINCI_I2C_EXPANDER
-	bool "TI DaVinci I2C Expander"
-	default y
-	depends on I2C
-	help
-	  Configure this option to specify whether the board used
-	  has I2C exapnder with ATA, USB, CF.
-
 config DAVINCI_EVM_CF_SUPPORT
 	bool "CF card support"
 	depends on MACH_DAVINCI_EVM
Index: linux-2.6.18/arch/arm/mach-davinci/Makefile
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/Makefile
+++ linux-2.6.18/arch/arm/mach-davinci/Makefile
@@ -9,7 +9,6 @@ obj-y := time.o irq.o clock.o io.o id.o 
 # Board specific
 obj-$(CONFIG_MACH_DAVINCI_EVM)		+= board-evm.o
 obj-$(CONFIG_MACH_DAVINCI_DM355_EVM)	+= board-dm355-evm.o
-obj-$(CONFIG_I2C_DAVINCI)		+= i2c-client.o
 obj-$(CONFIG_MACH_DAVINCI_DM6467_EVM)	+= board-dm6467-evm.o video_hdevm.o
 obj-$(CONFIG_SPI_DAVINCI)		+= davinci_spi_platform.o
 obj-$(CONFIG_GENERIC_GPIO)		+= gpio.o
Index: linux-2.6.18/arch/arm/mach-davinci/i2c-client.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/i2c-client.c
+++ /dev/null
@@ -1,228 +0,0 @@
-/*
- *  linux/drivers/davinci/i2c-davinci-client.c
- *
- * Copyright (C) 2006 Texas Instruments Inc
- * Copyright (C) 2008 MontaVista Software, Inc. <source@mvista.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- */
-
-#include <linux/init.h>
-#include <linux/fs.h>
-#include <linux/vmalloc.h>
-#include <linux/slab.h>
-#include <linux/proc_fs.h>
-#include <linux/ctype.h>
-#include <linux/delay.h>
-#include <linux/i2c.h>
-#include <linux/clk.h>
-
-#include <asm/semaphore.h>
-#include <asm/arch/cpu.h>
-#include <asm/arch/i2c-client.h>
-
-static DEFINE_MUTEX(expander_lock);
-
-static struct i2c_client davinci_i2c_client;
-
-/* This function is used for internal initialization */
-int davinci_i2c_read(u8 size, u8 * val, u16 client_addr)
-{
-	int err;
-	struct i2c_client *client = &davinci_i2c_client;
-	struct i2c_msg msg[1];
-
-	if (!client->adapter)
-		return -ENODEV;
-
-	msg->addr = client_addr;
-	msg->flags = I2C_M_RD;
-	msg->len = size;
-	msg->buf = val;
-
-	err = i2c_transfer(client->adapter, msg, 1);
-
-	if (err >= 0) {
-		return 0;
-	}
-
-	return err;
-}
-
-EXPORT_SYMBOL(davinci_i2c_read);
-
-/* This function is used for internal initialization */
-int davinci_i2c_write(u8 size, u8 * val, u16 client_addr)
-{
-	int err;
-	struct i2c_client *client = &davinci_i2c_client;
-	struct i2c_msg msg[1];
-
-	if (!client->adapter)
-		return -ENODEV;
-
-	msg->addr = client_addr;
-	msg->flags = 0;
-	msg->len = size;
-	msg->buf = val;
-
-	err = i2c_transfer(client->adapter, msg, 1);
-	if (err >= 0)
-		return 0;
-
-	return err;
-}
-
-EXPORT_SYMBOL(davinci_i2c_write);
-
-int davinci_i2c_expander_op(u16 client_addr, u35_expander_ops pin, u8 val)
-{
-	int err = 0;
-	u8 data_to_u35 = 0;
-
-	if (val > 1)
-		return -1;
-
-	if (client_addr != 0x3a) {
-		printk(KERN_WARNING "Only IO Expander at address "
-		       "0x3A is supported\n");
-		return -EINVAL;
-	}
-
-	if (cpu_is_davinci_dm6467()) {
-		switch (pin) {
-		case ATA_SEL_DM646X:
-		case ATA_PWD_DM646X:
-		case VSCALE_ON_DM646X:
-		case VLYNQ_RESET_DM646X:
-		case I2C_INT_DM646X:
-		case USB_FB_DM646X:
-		case CIR_MOD_DM646X:
-		case CIR_DEMOD_DM646X:
-			break;
-		default:
-			return -EINVAL;
-		}
-	} else {
-		switch (pin) {
-		case USB_DRVVBUS:
-		case VDDIMX_EN:
-		case VLYNQ_ON:
-		case CF_RESET:
-		case WLAN_RESET:
-		case ATA_SEL:
-		case CF_SEL:
-			break;
-		default:
-			return -EINVAL;
-	    }
-	}
-
-	mutex_lock(&expander_lock);
-
-	err = davinci_i2c_read(1, &data_to_u35, client_addr);
-	if (err) {
-		mutex_unlock(&expander_lock);
-		return err;
-	}
-	if (!cpu_is_davinci_dm6467() && pin == CF_SEL) {
-		static char cmd[4] = { 4, 6, 0x00, 0x09 };
-
-		err = davinci_i2c_write(4, cmd, 0x23);
-		if (err) {
-			mutex_unlock(&expander_lock);
-			return err;
-		}
-	}
-
-	data_to_u35 &= 0xff ^ (1 << pin);
-	data_to_u35 |= val << pin;
-
-	err = davinci_i2c_write(1, &data_to_u35, client_addr);
-
-	mutex_unlock(&expander_lock);
-
-	return err;
-}
-
-EXPORT_SYMBOL(davinci_i2c_expander_op);
-
-void (*board_i2c_expander_setup)(void);
-
-static int davinci_i2c_attach_adapter(struct i2c_adapter *adapter)
-{
-	struct i2c_client *client = &davinci_i2c_client;
-	int err;
-	u8 data_to_u35 = 0xf6;
-
-	if (client->adapter)
-		return -EBUSY;	/* our client is already attached */
-	client->adapter = adapter;
-
-	err = i2c_attach_client(client);
-	if (err) {
-		client->adapter = NULL;
-		return err;
-	}
-
-	err = davinci_i2c_write(1, &data_to_u35, 0x3A);
-
-	if (board_i2c_expander_setup)
-		board_i2c_expander_setup();
-
-	return 0;
-}
-
-static int davinci_i2c_detach_client(struct i2c_client *client)
-{
-	int err;
-
-	if (!client->adapter)
-		return -ENODEV;	/* our client isn't attached */
-
-	err = i2c_detach_client(client);
-	if (!err)
-		client->adapter = NULL;
-	return err;
-}
-
-/* This is the driver that will be inserted */
-static struct i2c_driver davinci_evm_driver = {
-	.driver = {
-		.name	= "davinci_evm",
-	},
-	.attach_adapter	= davinci_i2c_attach_adapter,
-	.detach_client	= davinci_i2c_detach_client,
-};
-
-/* There are actually 3 expanders on DaVinci EVM, one is LEDs only... */
-static struct i2c_client davinci_i2c_client = {
-	.addr	 	= 0x3A,
-	.driver 	= &davinci_evm_driver,
-	.name		= "davinci_evm_expander1",
-};
-
-static int __init davinci_i2c_client_init(void)
-{
-	return i2c_add_driver(&davinci_evm_driver);
-}
-
-static void __exit davinci_i2c_client_exit(void)
-{
-	i2c_del_driver(&davinci_evm_driver);
-}
-
-module_init(davinci_i2c_client_init);
-module_exit(davinci_i2c_client_exit);
Index: linux-2.6.18/arch/arm/plat-davinci/Kconfig
===================================================================
--- linux-2.6.18.orig/arch/arm/plat-davinci/Kconfig
+++ linux-2.6.18/arch/arm/plat-davinci/Kconfig
@@ -36,4 +36,12 @@ config DAVINCI_MUX_WARNINGS
 	  to change the pin multiplexing setup.  When there are no warnings
 	  printed, it's safe to deselect DAVINCI_MUX for your product.
 
+config DAVINCI_I2C_EXPANDER
+	bool "TI DaVinci I2C Expander support"
+	default y
+	depends on I2C
+	help
+	  Configure this option to specify whether the board used has I2C
+	  expander which controls ATA, CF, USB.
+
 endif
Index: linux-2.6.18/arch/arm/plat-davinci/Makefile
===================================================================
--- linux-2.6.18.orig/arch/arm/plat-davinci/Makefile
+++ linux-2.6.18/arch/arm/plat-davinci/Makefile
@@ -10,3 +10,4 @@ obj-$(CONFIG_SERIAL_8250)	+= serial.o
 obj-$(CONFIG_USB_OTG)		+= usb.o
 obj-$(CONFIG_DAVINCI_MUX)	+= mux.o
 obj-$(CONFIG_TI_DAVINCI_EMAC)	+= i2c-emac.o
+obj-$(CONFIG_I2C_DAVINCI)	+= i2c-client.o
Index: linux-2.6.18/arch/arm/plat-davinci/i2c-client.c
===================================================================
--- /dev/null
+++ linux-2.6.18/arch/arm/plat-davinci/i2c-client.c
@@ -0,0 +1,203 @@
+/*
+ * arch/arm/plat-davinci/i2c-client.c
+ *
+ * Copyright (C) 2006 Texas Instruments Inc
+ * Copyright (C) 2008 MontaVista Software, Inc. <source@mvista.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#include <linux/i2c.h>
+#include <asm/arch/i2c-client.h>
+
+static DEFINE_MUTEX(expander_lock);
+
+static struct i2c_client davinci_i2c_client;
+
+/* This function is used for internal initialization */
+int davinci_i2c_read(u8 size, u8 *val, u16 client_addr)
+{
+	struct i2c_client *client = &davinci_i2c_client;
+	struct i2c_msg msg;
+	int err;
+
+	if (client->adapter == NULL)
+		return -ENODEV;
+
+	msg.addr = client_addr;
+	msg.flags = I2C_M_RD;
+	msg.len = size;
+	msg.buf = val;
+
+	err = i2c_transfer(client->adapter, &msg, 1);
+	return err < 0 ? err : 0;
+}
+EXPORT_SYMBOL(davinci_i2c_read);
+
+/* This function is used for internal initialization */
+int davinci_i2c_write(u8 size, u8 *val, u16 client_addr)
+{
+	struct i2c_client *client = &davinci_i2c_client;
+	struct i2c_msg msg;
+	int err;
+
+	if (client->adapter == NULL)
+		return -ENODEV;
+
+	msg.addr = client_addr;
+	msg.flags = 0;
+	msg.len = size;
+	msg.buf = val;
+
+	err = i2c_transfer(client->adapter, &msg, 1);
+	return err < 0 ? err : 0;
+}
+EXPORT_SYMBOL(davinci_i2c_write);
+
+int davinci_i2c_expander_op(u16 client_addr, i2c_expander_pins pin, u8 val)
+{
+	int err = 0;
+	u8 data = 0;
+
+	if (val > 1)
+		return -1;
+
+	if (client_addr != 0x3a) {
+		printk(KERN_WARNING "Only I/O Expander at address 0x3A is "
+		       "supported\n");
+		return -EINVAL;
+	}
+
+	if (cpu_is_davinci_dm6467())
+		switch (pin) {
+		case ATA_SEL_DM646X:
+		case ATA_PWD_DM646X:
+		case VSCALE_ON_DM646X:
+		case VLYNQ_RESET_DM646X:
+		case I2C_INT_DM646X:
+		case USB_FB_DM646X:
+		case CIR_MOD_DM646X:
+		case CIR_DEMOD_DM646X:
+			break;
+		default:
+			return -EINVAL;
+		}
+	else
+		switch (pin) {
+		case USB_DRVVBUS:
+		case VDDIMX_EN:
+		case VLYNQ_ON:
+		case CF_RESET:
+		case WLAN_RESET:
+		case ATA_SEL:
+		case CF_SEL:
+			break;
+		default:
+			return -EINVAL;
+		}
+
+	mutex_lock(&expander_lock);
+
+	err = davinci_i2c_read(1, &data, client_addr);
+	if (err)
+		goto exit;
+
+	if (!cpu_is_davinci_dm6467() && pin == CF_SEL) {
+		static u8 cmd[4] = { 4, 6, 0x00, 0x09 };
+
+		err = davinci_i2c_write(4, cmd, 0x23);
+		if (err)
+			goto exit;
+	}
+
+	data &= ~(1 << pin);
+	data |= val << pin;
+
+	err = davinci_i2c_write(1, &data, client_addr);
+
+exit:
+	mutex_unlock(&expander_lock);
+	return err;
+}
+EXPORT_SYMBOL(davinci_i2c_expander_op);
+
+void (*board_i2c_expander_setup)(void);
+
+static int davinci_i2c_attach_adapter(struct i2c_adapter *adapter)
+{
+	struct i2c_client *client = &davinci_i2c_client;
+	u8 data = 0xf6;
+	int err;
+
+	if (client->adapter != NULL)
+		return -EBUSY;		/* our client is already attached */
+
+	client->adapter = adapter;
+
+	err = i2c_attach_client(client);
+	if (err) {
+		client->adapter = NULL;
+		return err;
+	}
+
+	davinci_i2c_write(1, &data, 0x3A);
+
+	if (board_i2c_expander_setup)
+		board_i2c_expander_setup();
+
+	return 0;
+}
+
+static int davinci_i2c_detach_client(struct i2c_client *client)
+{
+	int err;
+
+	if (client->adapter == NULL)
+		return -ENODEV; 	/* our client isn't attached */
+
+	err = i2c_detach_client(client);
+	if (!err)
+		client->adapter = NULL;
+	return err;
+}
+
+/* This is the driver that will be inserted */
+static struct i2c_driver davinci_evm_driver = {
+	.driver = {
+		.name	= "davinci_evm",
+	},
+	.attach_adapter	= davinci_i2c_attach_adapter,
+	.detach_client	= davinci_i2c_detach_client,
+};
+
+/* There are actually 3 expanders on DaVinci EVM, one is LEDs only... */
+static struct i2c_client davinci_i2c_client = {
+	.addr	 	= 0x3A,
+	.driver 	= &davinci_evm_driver,
+	.name		= "davinci_evm_expander1",
+};
+
+static int __init davinci_i2c_client_init(void)
+{
+	return i2c_add_driver(&davinci_evm_driver);
+}
+
+static void __exit davinci_i2c_client_exit(void)
+{
+	i2c_del_driver(&davinci_evm_driver);
+}
+
+module_init(davinci_i2c_client_init);
+module_exit(davinci_i2c_client_exit);
Index: linux-2.6.18/include/asm-arm/arch-davinci/i2c-client.h
===================================================================
--- linux-2.6.18.orig/include/asm-arm/arch-davinci/i2c-client.h
+++ linux-2.6.18/include/asm-arm/arch-davinci/i2c-client.h
@@ -39,7 +39,7 @@ typedef enum {
 	CIR_MOD_DM646X = 5,
 	I2C_INT_DM646X = 6,
 	USB_FB_DM646X = 7
-} u35_expander_ops;
+} i2c_expander_pins;
 
 /*
  * The board code will set this to point to its expander pin setup function
@@ -47,8 +47,8 @@ typedef enum {
  */
 extern void (*board_i2c_expander_setup)(void);
 
-int davinci_i2c_expander_op (u16 client_addr, u35_expander_ops pin, u8 val);
-int davinci_i2c_write(u8 size, u8 * val, u16 client_addr);
-int davinci_i2c_read(u8 size, u8 * val, u16 client_addr);
+int davinci_i2c_expander_op(u16 client_addr, i2c_expander_pins pin, u8 val);
+int davinci_i2c_write(u8 size, u8 *val, u16 client_addr);
+int davinci_i2c_read(u8 size, u8 *val, u16 client_addr);
 
 #endif
Index: linux-2.6.18/mvl_patches/pro50-2103.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-2103.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2009 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(2103);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

