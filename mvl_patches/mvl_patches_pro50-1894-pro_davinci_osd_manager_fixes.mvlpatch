#! /usr/bin/env bash
# Patch: -pro_davinci_osd_manager_fixes
# Date: Fri Sep 19 14:29:45 2008
# Source: Texas Instruments Inc.
# MR: 29654
# Type: Defect Fix
# Disposition: local
# Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
# Signed-off-by: Philby John <pjohn@in.mvista.com>
# Description:
# 	Fix for the following issues
# 	1. Moving objects show jitters on interlaced display
# 	2. FBDev driver did not support 2 OSD windows in RGB888
# 	mode at the same time
# 	3. Removing davinci_osd module got "device or resource busy" message
# 

PATCHNUM=1894
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: Texas Instruments Inc.
MR: 29654
Type: Defect Fix
Disposition: local
Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
Signed-off-by: Philby John <pjohn@in.mvista.com>
Description:
	Fix for the following issues
	1. Moving objects show jitters on interlaced display
	2. FBDev driver did not support 2 OSD windows in RGB888
	mode at the same time
	3. Removing davinci_osd module got "device or resource busy" message

Index: linux-2.6.18/drivers/media/video/davinci/davinci_osd.c
===================================================================
--- linux-2.6.18.orig/drivers/media/video/davinci/davinci_osd.c
+++ linux-2.6.18/drivers/media/video/davinci/davinci_osd.c
@@ -121,6 +121,13 @@ static __inline__ u32 osd_merge(u32 mask
 #define MAX_WIN_SIZE OSD_VIDWIN0XP_V0X
 #define MAX_LINE_LENGTH (OSD_VIDWIN0OFST_V0LO << 5)
 
+int davinci_disp_is_second_field(void)
+{
+	return ((davinci_readl(osd->vencregs + VENC_VSTAT) & VENC_VSTAT_FIDST)
+		== VENC_VSTAT_FIDST);
+}
+EXPORT_SYMBOL(davinci_disp_is_second_field);
+
 /* interrupt service routine */
 static irqreturn_t davinci_disp_isr(int irq, void *arg, struct pt_regs *regs)
 {
@@ -138,8 +145,7 @@ static irqreturn_t davinci_disp_isr(int 
 			       DM355_VPSSBL_REG_BASE + VPSSBL_INTSTAT);
 	}
 
-	if ((davinci_readl(osd->vencregs + VENC_VSTAT) & VENC_VSTAT_FIDST) ==
-	    VENC_VSTAT_FIDST)
+	if (davinci_disp_is_second_field())
 		event |= DAVINCI_DISP_SECOND_FIELD;
 	else
 		event |= DAVINCI_DISP_FIRST_FIELD;
@@ -206,6 +212,7 @@ int davinci_disp_unregister_callback(str
 
 	return err;
 }
+EXPORT_SYMBOL(davinci_disp_unregister_callback);
 
 int davinci_disp_register_callback(struct davinci_disp_callback *callback)
 {
@@ -222,6 +229,7 @@ int davinci_disp_register_callback(struc
 
 	return 0;
 }
+EXPORT_SYMBOL(davinci_disp_register_callback);
 
 /*
  * This routine implements a workaround for the field signal inversion silicon
@@ -253,10 +261,9 @@ static int _davinci_disp_dm6446_vid0_pin
 			  OSD_VIDWIN0ADR);
 		osd_write((fb_base_phys & ~0x1F) + lconfig->line_length,
 			  OSD_PPVWIN0ADR);
-		if ((davinci_readl(osd->vencregs + VENC_VSTAT) &
-		     VENC_VSTAT_FIDST) == VENC_VSTAT_FIDST) {
+		if (davinci_disp_is_second_field())
 			miscctl |= OSD_MISCCTL_PPSW;
-		}
+
 		osd_merge(OSD_MISCCTL_PPSW | OSD_MISCCTL_PPRV, miscctl,
 			  OSD_MISCCTL);
 
@@ -268,6 +275,7 @@ int davinci_disp_get_field_inversion(voi
 {
 	return osd->field_inversion;
 }
+EXPORT_SYMBOL(davinci_disp_get_field_inversion);
 
 static void _davinci_disp_set_field_inversion(int enable)
 {
@@ -295,6 +303,7 @@ void davinci_disp_set_field_inversion(in
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_set_field_inversion);
 
 void davinci_disp_get_background(enum davinci_clut *clut,
 				 unsigned char *clut_index)
@@ -308,6 +317,7 @@ void davinci_disp_get_background(enum da
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_get_background);
 
 static void _davinci_disp_set_background(enum davinci_clut clut,
 					 unsigned char clut_index)
@@ -333,11 +343,13 @@ void davinci_disp_set_background(enum da
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_set_background);
 
 int davinci_disp_get_interpolation_filter(void)
 {
 	return osd->interpolation_filter;
 }
+EXPORT_SYMBOL(davinci_disp_get_interpolation_filter);
 
 static void _davinci_disp_set_interpolation_filter(int filter)
 {
@@ -357,6 +369,7 @@ void davinci_disp_set_interpolation_filt
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_set_interpolation_filter);
 
 void davinci_disp_get_cursor_config(struct davinci_cursor_config *cursor)
 {
@@ -368,6 +381,7 @@ void davinci_disp_get_cursor_config(stru
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_get_cursor_config);
 
 static void _davinci_disp_set_cursor_config(const struct davinci_cursor_config
 					    *cursor)
@@ -426,11 +440,13 @@ void davinci_disp_set_cursor_config(stru
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_set_cursor_config);
 
 int davinci_disp_cursor_is_enabled(void)
 {
 	return osd->cursor.is_enabled;
 }
+EXPORT_SYMBOL(davinci_disp_cursor_is_enabled);
 
 static void _davinci_disp_cursor_disable(void)
 {
@@ -448,6 +464,7 @@ void davinci_disp_cursor_disable(void)
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_cursor_disable);
 
 static void _davinci_disp_cursor_enable(void)
 {
@@ -465,6 +482,7 @@ void davinci_disp_cursor_enable(void)
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_cursor_enable);
 
 void davinci_disp_get_vid_expansion(enum davinci_h_exp_ratio *h_exp,
 				    enum davinci_v_exp_ratio *v_exp)
@@ -478,6 +496,7 @@ void davinci_disp_get_vid_expansion(enum
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_get_vid_expansion);
 
 static void _davinci_disp_set_vid_expansion(enum davinci_h_exp_ratio h_exp,
 					    enum davinci_v_exp_ratio v_exp)
@@ -525,6 +544,7 @@ int davinci_disp_set_vid_expansion(enum 
 	spin_unlock_irqrestore(&osd->lock, flags);
 	return 0;
 }
+EXPORT_SYMBOL(davinci_disp_set_vid_expansion);
 
 void davinci_disp_get_osd_expansion(enum davinci_h_exp_ratio *h_exp,
 				    enum davinci_v_exp_ratio *v_exp)
@@ -538,6 +558,7 @@ void davinci_disp_get_osd_expansion(enum
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_get_osd_expansion);
 
 static void _davinci_disp_set_osd_expansion(enum davinci_h_exp_ratio h_exp,
 					    enum davinci_v_exp_ratio v_exp)
@@ -585,6 +606,7 @@ int davinci_disp_set_osd_expansion(enum 
 	spin_unlock_irqrestore(&osd->lock, flags);
 	return 0;
 }
+EXPORT_SYMBOL(davinci_disp_set_osd_expansion);
 
 void davinci_disp_get_blink_attribute(int *enable,
 				      enum davinci_blink_interval *blink)
@@ -598,6 +620,7 @@ void davinci_disp_get_blink_attribute(in
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_get_blink_attribute);
 
 static void _davinci_disp_set_blink_attribute(int enable,
 					      enum davinci_blink_interval blink)
@@ -627,11 +650,13 @@ void davinci_disp_set_blink_attribute(in
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_set_blink_attribute);
 
 enum davinci_rom_clut davinci_disp_get_rom_clut(void)
 {
 	return osd->rom_clut;
 }
+EXPORT_SYMBOL(davinci_disp_get_rom_clut);
 
 static void _davinci_disp_set_rom_clut(enum davinci_rom_clut rom_clut)
 {
@@ -652,6 +677,7 @@ void davinci_disp_set_rom_clut(enum davi
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_set_rom_clut);
 
 static void _davinci_disp_set_clut_ycbcr(unsigned char clut_index,
 					 unsigned char y, unsigned char cb,
@@ -679,6 +705,7 @@ void davinci_disp_set_clut_ycbcr(unsigne
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_set_clut_ycbcr);
 
 static void _davinci_disp_rgb_to_ycbcr(const unsigned char rgb[3],
 				       unsigned char ycbcr[3])
@@ -743,6 +770,7 @@ void davinci_disp_set_clut_rgb(unsigned 
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_set_clut_rgb);
 
 unsigned char davinci_disp_get_palette_map(enum davinci_osd_layer osdwin,
 					   unsigned char pixel_value)
@@ -775,6 +803,7 @@ unsigned char davinci_disp_get_palette_m
 
 	return clut_index;
 }
+EXPORT_SYMBOL(davinci_disp_get_palette_map);
 
 static void _davinci_disp_set_palette_map(enum davinci_osd_layer osdwin,
 					  unsigned char pixel_value,
@@ -853,6 +882,7 @@ void davinci_disp_set_palette_map(enum d
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_set_palette_map);
 
 int davinci_disp_get_rec601_attenuation(enum davinci_osd_layer osdwin)
 {
@@ -860,6 +890,7 @@ int davinci_disp_get_rec601_attenuation(
 
 	return osdwin_state->rec601_attenuation;
 }
+EXPORT_SYMBOL(davinci_disp_get_rec601_attenuation);
 
 static void _davinci_disp_set_rec601_attenuation(enum davinci_osd_layer osdwin,
 						 int enable)
@@ -907,6 +938,7 @@ void davinci_disp_set_rec601_attenuation
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_set_rec601_attenuation);
 
 enum davinci_blending_factor davinci_disp_get_blending_factor(enum
 							      davinci_osd_layer
@@ -916,6 +948,7 @@ enum davinci_blending_factor davinci_dis
 
 	return osdwin_state->blend;
 }
+EXPORT_SYMBOL(davinci_disp_get_blending_factor);
 
 static void _davinci_disp_set_blending_factor(enum davinci_osd_layer osdwin,
 					      enum davinci_blending_factor
@@ -950,6 +983,7 @@ void davinci_disp_set_blending_factor(en
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_set_blending_factor);
 
 static void _davinci_disp_disable_color_key(enum davinci_osd_layer osdwin)
 {
@@ -979,6 +1013,7 @@ void davinci_disp_disable_color_key(enum
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_disable_color_key);
 
 static void _davinci_disp_enable_color_key(enum davinci_osd_layer osdwin,
 					   unsigned colorkey,
@@ -1062,6 +1097,7 @@ void davinci_disp_enable_color_key(enum 
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_enable_color_key);
 
 enum davinci_clut davinci_disp_get_osd_clut(enum davinci_osd_layer osdwin)
 {
@@ -1069,6 +1105,7 @@ enum davinci_clut davinci_disp_get_osd_c
 
 	return osdwin_state->clut;
 }
+EXPORT_SYMBOL(davinci_disp_get_osd_clut);
 
 static void _davinci_disp_set_osd_clut(enum davinci_osd_layer osdwin,
 				       enum davinci_clut clut)
@@ -1106,6 +1143,7 @@ void davinci_disp_set_osd_clut(enum davi
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_set_osd_clut);
 
 void davinci_disp_get_zoom(enum davinci_disp_layer layer,
 			   enum davinci_zoom_factor *h_zoom,
@@ -1121,6 +1159,7 @@ void davinci_disp_get_zoom(enum davinci_
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_get_zoom);
 
 static void _davinci_disp_set_zoom(enum davinci_disp_layer layer,
 				   enum davinci_zoom_factor h_zoom,
@@ -1171,12 +1210,14 @@ void davinci_disp_set_zoom(enum davinci_
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_set_zoom);
 
 int davinci_disp_layer_is_enabled(enum davinci_disp_layer layer)
 {
 	struct davinci_window_state *win = &osd->win[layer];
 	return win->is_enabled;
 }
+EXPORT_SYMBOL(davinci_disp_layer_is_enabled);
 
 static void _davinci_disp_disable_layer(enum
 					davinci_disp_layer layer)
@@ -1216,6 +1257,7 @@ void davinci_disp_disable_layer(enum dav
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_disable_layer);
 
 static void _davinci_disp_enable_attribute_mode(void)
 {
@@ -1274,6 +1316,7 @@ int davinci_disp_enable_layer(enum davin
 	spin_unlock_irqrestore(&osd->lock, flags);
 	return 0;
 }
+EXPORT_SYMBOL(davinci_disp_enable_layer);
 
 static void _davinci_disp_start_layer(enum davinci_disp_layer layer,
 				      unsigned long fb_base_phys)
@@ -1354,6 +1397,7 @@ void davinci_disp_start_layer(enum davin
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_start_layer);
 
 void davinci_disp_get_layer_config(enum davinci_disp_layer layer,
 				   struct davinci_layer_config *lconfig)
@@ -1367,6 +1411,7 @@ void davinci_disp_get_layer_config(enum 
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_get_layer_config);
 
 /*
  * If the requested lconfig is completely rejected and the value of lconfig on
@@ -1417,10 +1462,10 @@ static int try_layer_config(enum davinci
 		return bad_config;
 	}
 
-	/* only one OSD window at a time can use RGB or YC pixel formats */
-	if (is_osd_win(layer)
-	    && (is_rgb_pixfmt(lconfig->pixfmt)
-		|| is_yc_pixfmt(lconfig->pixfmt))) {
+	/* DM6446: */
+	/* only one OSD window at a time can use RGB pixel formats */
+	if (cpu_is_davinci_dm644x() && is_osd_win(layer)
+	    && is_rgb_pixfmt(lconfig->pixfmt)) {
 		enum davinci_pix_format pixfmt;
 
 		if (layer == WIN_OSD0)
@@ -1428,11 +1473,10 @@ static int try_layer_config(enum davinci
 		else
 			pixfmt = osd->win[WIN_OSD0].lconfig.pixfmt;
 
-		if (is_rgb_pixfmt(pixfmt) || is_yc_pixfmt(pixfmt)) {
+		if (is_rgb_pixfmt(pixfmt)) {
 			/*
-			 * The other OSD window is already configured for an RGB
-			 * or YC pixel format, so keep the current layer
-			 * configuration.
+			 * The other OSD window is already configured for an
+			 * RGB, so keep the current layer configuration.
 			 */
 			*lconfig = win->lconfig;
 			return 1;
@@ -1496,6 +1540,7 @@ int davinci_disp_try_layer_config(enum d
 
 	return reject_config;
 }
+EXPORT_SYMBOL(davinci_disp_try_layer_config);
 
 static void _davinci_disp_disable_vid_rgb888(void)
 {
@@ -1863,6 +1908,7 @@ int davinci_disp_set_layer_config(enum d
 
 	return 0;
 }
+EXPORT_SYMBOL(davinci_disp_set_layer_config);
 
 void davinci_disp_init_layer(enum davinci_disp_layer layer)
 {
@@ -1925,6 +1971,7 @@ void davinci_disp_init_layer(enum davinc
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_init_layer);
 
 void davinci_disp_release_layer(enum davinci_disp_layer layer)
 {
@@ -1946,6 +1993,7 @@ void davinci_disp_release_layer(enum dav
 
 	spin_unlock_irqrestore(&osd->lock, flags);
 }
+EXPORT_SYMBOL(davinci_disp_release_layer);
 
 int davinci_disp_request_layer(enum davinci_disp_layer layer)
 {
@@ -1963,6 +2011,7 @@ int davinci_disp_request_layer(enum davi
 	spin_unlock_irqrestore(&osd->lock, flags);
 	return 0;
 }
+EXPORT_SYMBOL(davinci_disp_request_layer);
 
 static void _davinci_disp_init(void)
 {
@@ -2034,51 +2083,11 @@ int davinci_disp_init(void)
 	return 0;
 }
 
-subsys_initcall(davinci_disp_init);
+static void davinci_disp_cleanup(void)
+{
+	free_irq(osd->irq, osd);
+}
 
-EXPORT_SYMBOL(davinci_disp_request_layer);
-EXPORT_SYMBOL(davinci_disp_release_layer);
-EXPORT_SYMBOL(davinci_disp_init_layer);
-EXPORT_SYMBOL(davinci_disp_enable_layer);
-EXPORT_SYMBOL(davinci_disp_disable_layer);
-EXPORT_SYMBOL(davinci_disp_layer_is_enabled);
-EXPORT_SYMBOL(davinci_disp_set_layer_config);
-EXPORT_SYMBOL(davinci_disp_try_layer_config);
-EXPORT_SYMBOL(davinci_disp_get_layer_config);
-EXPORT_SYMBOL(davinci_disp_start_layer);
-EXPORT_SYMBOL(davinci_disp_set_interpolation_filter);
-EXPORT_SYMBOL(davinci_disp_get_interpolation_filter);
-EXPORT_SYMBOL(davinci_disp_set_osd_expansion);
-EXPORT_SYMBOL(davinci_disp_get_osd_expansion);
-EXPORT_SYMBOL(davinci_disp_set_vid_expansion);
-EXPORT_SYMBOL(davinci_disp_get_vid_expansion);
-EXPORT_SYMBOL(davinci_disp_set_zoom);
-EXPORT_SYMBOL(davinci_disp_get_zoom);
-EXPORT_SYMBOL(davinci_disp_set_background);
-EXPORT_SYMBOL(davinci_disp_get_background);
-EXPORT_SYMBOL(davinci_disp_set_rom_clut);
-EXPORT_SYMBOL(davinci_disp_get_rom_clut);
-EXPORT_SYMBOL(davinci_disp_set_clut_ycbcr);
-EXPORT_SYMBOL(davinci_disp_set_clut_rgb);
-EXPORT_SYMBOL(davinci_disp_set_osd_clut);
-EXPORT_SYMBOL(davinci_disp_get_osd_clut);
-EXPORT_SYMBOL(davinci_disp_enable_color_key);
-EXPORT_SYMBOL(davinci_disp_disable_color_key);
-EXPORT_SYMBOL(davinci_disp_set_blending_factor);
-EXPORT_SYMBOL(davinci_disp_get_blending_factor);
-EXPORT_SYMBOL(davinci_disp_set_rec601_attenuation);
-EXPORT_SYMBOL(davinci_disp_get_rec601_attenuation);
-EXPORT_SYMBOL(davinci_disp_set_palette_map);
-EXPORT_SYMBOL(davinci_disp_get_palette_map);
-EXPORT_SYMBOL(davinci_disp_set_blink_attribute);
-EXPORT_SYMBOL(davinci_disp_get_blink_attribute);
-EXPORT_SYMBOL(davinci_disp_cursor_enable);
-EXPORT_SYMBOL(davinci_disp_cursor_disable);
-EXPORT_SYMBOL(davinci_disp_cursor_is_enabled);
-EXPORT_SYMBOL(davinci_disp_set_cursor_config);
-EXPORT_SYMBOL(davinci_disp_get_cursor_config);
-EXPORT_SYMBOL(davinci_disp_set_field_inversion);
-EXPORT_SYMBOL(davinci_disp_get_field_inversion);
-EXPORT_SYMBOL(davinci_disp_register_callback);
-EXPORT_SYMBOL(davinci_disp_unregister_callback);
+subsys_initcall(davinci_disp_init);
+module_exit(davinci_disp_cleanup);
 MODULE_LICENSE("GPL");
Index: linux-2.6.18/include/video/davinci_osd.h
===================================================================
--- linux-2.6.18.orig/include/video/davinci_osd.h
+++ linux-2.6.18/include/video/davinci_osd.h
@@ -884,4 +884,14 @@ int davinci_disp_register_callback(struc
  */
 int davinci_disp_unregister_callback(struct davinci_disp_callback *callback);
 
+/**
+ * davinci_disp_is_second_field
+ *
+ * Returns: non-zero if true, zero otherwise
+ *
+ * Description:
+ * Check the Video Status Register (VSTAT) field FIDST to see if it's set
+ * if true then it is second field
+ */
+int davinci_disp_is_second_field(void);
 #endif				/* ifndef _DAVINCI_OSD_H */
Index: linux-2.6.18/mvl_patches/pro50-1894.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1894.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1894);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

