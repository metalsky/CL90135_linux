#! /usr/bin/env bash
# Patch: -pro_arm_davinci_split_into_common_and_soc_specific_dirs
# Date: Thu Feb 19 15:00:03 2009
# Source: MontaVista Software, Inc.
# MR: 30941
# Type: Enhancement
# Disposition: needs submitting to davinci community
# Signed-off-by: Mark A. Greer <mgreer@mvista.com>
# Description:
#     Split DaVinci code into SoC specific and common directories
#     so DaVinci-like SoCs can leverage common code.
# 

PATCHNUM=2094
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 30941
Type: Enhancement
Disposition: needs submitting to davinci community
Signed-off-by: Mark A. Greer <mgreer@mvista.com>
Description:
    Split DaVinci code into SoC specific and common directories
    so DaVinci-like SoCs can leverage common code.

Index: linux-2.6.18/arch/arm/Kconfig
===================================================================
--- linux-2.6.18.orig/arch/arm/Kconfig
+++ linux-2.6.18/arch/arm/Kconfig
@@ -348,7 +348,7 @@ config ARCH_DAVINCI
 	select GENERIC_CLOCKEVENTS
 	select GENERIC_GPIO
 	help
-	  Support for TI's DaVinci platform.
+	  Support for TI DaVinci and DaVinci-like platforms.
 
 endchoice
 
@@ -398,6 +398,8 @@ source "arch/arm/mach-at91rm9200/Kconfig
 
 source "arch/arm/mach-netx/Kconfig"
 
+source "arch/arm/plat-davinci/Kconfig"
+
 source "arch/arm/mach-davinci/Kconfig"
 
 # Definitions to make life easier
Index: linux-2.6.18/arch/arm/Makefile
===================================================================
--- linux-2.6.18.orig/arch/arm/Makefile
+++ linux-2.6.18/arch/arm/Makefile
@@ -124,7 +124,8 @@ endif
  machine-$(CONFIG_ARCH_NETX)       := netx
   incdir-$(CONFIG_ARCH_MXC)        := mxc
  machine-$(CONFIG_ARCH_MX2)        := mx2
- machine-$(CONFIG_ARCH_DAVINCI)	   := davinci
+ machine-$(CONFIG_ARCH_DAVINCI_TRUE)	   := davinci
+  incdir-$(CONFIG_ARCH_DAVINCI)	   := davinci
 
 ifeq ($(CONFIG_ARCH_EBSA110),y)
 # This is what happens if you forget the IOCS16 line.
@@ -165,6 +166,7 @@ core-$(CONFIG_VFP)		+= arch/arm/vfp/
 # If we have a common platform directory, then include it in the build.
 core-$(CONFIG_ARCH_OMAP)	+= arch/arm/plat-omap/
 core-$(CONFIG_ARCH_MXC)		+= arch/arm/plat-mxc/
+core-$(CONFIG_ARCH_DAVINCI)	+= arch/arm/plat-davinci/
 
 drivers-$(CONFIG_OPROFILE)      += arch/arm/oprofile/
 drivers-$(CONFIG_ARCH_CLPS7500)	+= drivers/acorn/char/
Index: linux-2.6.18/arch/arm/mach-davinci/Kconfig
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/Kconfig
+++ linux-2.6.18/arch/arm/mach-davinci/Kconfig
@@ -1,43 +1,33 @@
-if ARCH_DAVINCI
-
-menu "TI DaVinci Implementations"
-
-comment "DaVinci Core Type"
+if ARCH_DAVINCI_TRUE
 
 choice
-	prompt "DaVinci ARCH type"
-	default ARCH_DAVINCI_DM644x
+	prompt "DaVinci Specific Core Type"
+	default ARCH_DAVINCI644x
 
 config ARCH_DAVINCI644x
-	bool "DaVinci 644x based system"
+	bool "DM644x"
 
 config ARCH_DAVINCI_DM355
-	bool "DaVinci DM355 based system"
+	bool "DM355"
 
 config ARCH_DAVINCI_DM646x
-        bool "DaVinci 646x based system"
+        bool "DM646x"
+
 endchoice
 
-comment "DaVinci Board Type"
+choice
+	prompt "DaVinci Board Type"
+        default MACH_DAVINCI_EVM
 
 config MACH_DAVINCI_EVM
 	bool "TI DaVinci EVM"
-	default y
 	depends on ARCH_DAVINCI644x
 	help
 	  Configure this option to specify the whether the board used
 	  for development is a DaVinci EVM
 
-config DAVINCI_EVM_CF_SUPPORT
-	bool "CF card support"
-	depends on MACH_DAVINCI_EVM
-	default y
-	help
-	  Configure this option to enable CompactFlash card support.
-
 config MACH_DAVINCI_DM355_EVM
 	bool "TI DM355 EVM"
-	default n
 	depends on ARCH_DAVINCI_DM355
 	help
 	  Configure this option to specify the whether the board used
@@ -45,15 +35,15 @@ config MACH_DAVINCI_DM355_EVM
 
 config MACH_DAVINCI_DM6467_EVM
         bool "TI DM646x EVM"
-        default n
-        depends on ARCH_DAVINCI_DM646x && !ARCH_DAVINCI_DM644x
+        depends on ARCH_DAVINCI_DM646x
         help
           Configure this option to specify the whether the board used
           for development is a DM646x EVM
 
+endchoice
+
 config DAVINCI_MUX
 	bool "DAVINCI multiplexing support"
-	depends on ARCH_DAVINCI
 	default y
 	help
 	  Pin multiplexing support for DAVINCI boards. If your bootloader
@@ -80,11 +70,18 @@ config DAVINCI_MUX_WARNINGS
 config DAVINCI_I2C_EXPANDER
 	bool "TI DaVinci I2C Expander"
 	default y
-	depends on I2C && ARCH_DAVINCI644x || ARCH_DAVINCI_DM646x || ARCH_DAVINCI_DM355
+	depends on I2C
 	help
 	  Configure this option to specify whether the board used
 	  has I2C exapnder with ATA, USB, CF.
 
+config DAVINCI_EVM_CF_SUPPORT
+	bool "CF card support"
+	depends on MACH_DAVINCI_EVM
+	default y
+	help
+	  Configure this option to enable CompactFlash card support.
+
 config DM355_NAND_256KB_BLOCKS
         bool "NAND chip installed on DM355 EVM has 256KB blocks"
         default y
@@ -98,13 +95,4 @@ config DM355_NAND_256KB_BLOCKS
         has 256KB blocks.  Answer N here if the NAND chip (e.g. a 4 Gigabit
         Micron MT29F4G08AAA) installed on your board has 128KB blocks.
 
-config DAVINCI_SPI
-        bool "TI DAVINCI SPI device"
-        default y
-        help
-        Configure this option to specify whether the board used
-        has SPI device.
-
-endmenu
-
 endif
Index: linux-2.6.18/arch/arm/mach-davinci/Makefile
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/Makefile
+++ linux-2.6.18/arch/arm/mach-davinci/Makefile
@@ -4,17 +4,16 @@
 #
 
 # Common objects
-obj-y 			:= time.o irq.o clock.o serial.o io.o id.o \
-			   gpio.o mux.o mux_cfg.o dma.o devices.o usb.o
+obj-y := time.o irq.o clock.o serial.o io.o id.o gpio.o mux.o mux_cfg.o dma.o \
+	devices.o usb.o
 
 # Board specific
-obj-$(CONFIG_MACH_DAVINCI_EVM)  += board-evm.o i2c-emac.o
-obj-$(CONFIG_MACH_DAVINCI_DM355_EVM)  += board-dm355-evm.o
-obj-$(CONFIG_DAVINCI_I2C_EXPANDER)      += i2c-client.o
-obj-$(CONFIG_MACH_DAVINCI_DM6467_EVM)  += board-dm6467-evm.o i2c-emac.o \
-                                       video_hdevm.o
-obj-$(CONFIG_DAVINCI_SPI)       	+= davinci_spi_platform.o
+obj-$(CONFIG_MACH_DAVINCI_EVM)		+= board-evm.o i2c-emac.o
+obj-$(CONFIG_MACH_DAVINCI_DM355_EVM)	+= board-dm355-evm.o
+obj-$(CONFIG_I2C_DAVINCI)		+= i2c-client.o
+obj-$(CONFIG_MACH_DAVINCI_DM6467_EVM)	+= board-dm6467-evm.o i2c-emac.o \
+					   video_hdevm.o
+obj-$(CONFIG_SPI_DAVINCI)		+= davinci_spi_platform.o
 
 # Vlynq specific
-obj-$(CONFIG_DAVINCI_VLYNQ)	+= davinci_vlynq_init.o
-
+obj-$(CONFIG_DAVINCI_VLYNQ)		+= davinci_vlynq_init.o
Index: linux-2.6.18/arch/arm/plat-davinci/Kconfig
===================================================================
--- /dev/null
+++ linux-2.6.18/arch/arm/plat-davinci/Kconfig
@@ -0,0 +1,14 @@
+if ARCH_DAVINCI
+
+comment "TI DaVinci Implementations"
+
+choice
+	prompt "DaVinci Core Type"
+	default ARCH_DAVINCI_TRUE
+
+config ARCH_DAVINCI_TRUE
+	bool "True DaVinci Core"
+
+endchoice
+
+endif
Index: linux-2.6.18/mvl_patches/pro50-2094.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-2094.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2009 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(2094);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

