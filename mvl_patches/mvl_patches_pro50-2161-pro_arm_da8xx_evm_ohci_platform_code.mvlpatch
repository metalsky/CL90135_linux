#! /usr/bin/env bash
# Patch: -pro_arm_da8xx_evm_ohci_platform_code
# Date: Thu Feb 19 15:04:58 2009
# Source: MontaVista Software, Inc.
# MR: 30797
# Type: Enhancement
# Disposition: needs submitting to DaVinci community
# Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
# Description:
# Provide the board-specific hooks to the DA8xx OHCI glue layer for it to be able
# to control the port power and sense the over-current signal coming from TPS2065
# power switch used on the DA830 EVM board...
# 
#  arch/arm/mach-da8xx/board-evm.c |   89 +++++++++++++++++++++++++++++++++++++++-
#  1 files changed, 87 insertions(+), 2 deletions(-)
# 

PATCHNUM=2161
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 30797
Type: Enhancement
Disposition: needs submitting to DaVinci community
Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
Description:
Provide the board-specific hooks to the DA8xx OHCI glue layer for it to be able
to control the port power and sense the over-current signal coming from TPS2065
power switch used on the DA830 EVM board...

 arch/arm/mach-da8xx/board-evm.c |   89 +++++++++++++++++++++++++++++++++++++++-
 mvl_patches/pro50-2161.c        |   16 +++++++
 2 files changed, 103 insertions(+), 2 deletions(-)

Index: linux-2.6.18/arch/arm/mach-da8xx/board-evm.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-da8xx/board-evm.c
+++ linux-2.6.18/arch/arm/mach-da8xx/board-evm.c
@@ -167,6 +167,68 @@ static struct musb_hdrc_platform_data da
 	.multipoint	= 1,
 };
 
+#if defined(CONFIG_USB_OHCI_HCD) || defined(CONFIG_USB_OHCI_HCD_MODULE)
+
+#define ON_BD_USB_DRV	GPIO(31)	/* GPIO1[15]	*/
+#define ON_BD_USB_OVC	GPIO(36)	/* GPIO2[4]	*/
+
+static da8xx_ocic_handler_t da8xx_evm_usb_ocic_handler;
+
+static int da8xx_evm_usb_set_power(unsigned port, int on)
+{
+	gpio_set_value(ON_BD_USB_DRV, on);
+	return 0;
+}
+
+static int da8xx_evm_usb_get_power(unsigned port)
+{
+	return gpio_get_value(ON_BD_USB_DRV);
+}
+
+static int da8xx_evm_usb_get_oci(unsigned port)
+{
+	return !gpio_get_value(ON_BD_USB_OVC);
+}
+
+static irqreturn_t da8xx_evm_usb_ocic_irq(int, void *, struct pt_regs *);
+
+static int da8xx_evm_usb_ocic_notify(da8xx_ocic_handler_t handler)
+{
+	int irq 	= gpio_to_irq(ON_BD_USB_OVC);
+	int error	= 0;
+
+	if (handler != NULL) {
+		da8xx_evm_usb_ocic_handler = handler;
+
+		error = request_irq(irq, da8xx_evm_usb_ocic_irq, IRQF_DISABLED |
+				    IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING,
+				    "OHCI over-current indicator", NULL);
+		if (error)
+			printk(KERN_ERR "%s: could not request IRQ to watch "
+			       "over-current indicator changes\n", __func__);
+	} else
+		free_irq(irq, NULL);
+
+	return error;
+}
+
+static struct da8xx_ohci_root_hub da8xx_evm_usb11_pdata = {
+	.set_power	= da8xx_evm_usb_set_power,
+	.get_power	= da8xx_evm_usb_get_power,
+	.get_oci	= da8xx_evm_usb_get_oci,
+	.ocic_notify	= da8xx_evm_usb_ocic_notify,
+
+	/* TPS2065 switch @ 5V */
+	.potpgt		= (3 + 1) / 2,	/* 3 ms max */
+};
+
+static irqreturn_t da8xx_evm_usb_ocic_irq(int irq, void *dev_id,
+					  struct pt_regs *regs)
+{
+	da8xx_evm_usb_ocic_handler(&da8xx_evm_usb11_pdata, 1);
+	return IRQ_HANDLED;
+}
+#endif /* defined(CONFIG_USB_OHCI_HCD) || defined(CONFIG_USB_OHCI_HCD_MODULE) */
 static struct emac_init_config da8xx_evm_emac_pdata = {
 	.reset_line		= 0,
 	.emac_bus_frequency	= 148500000,
@@ -216,12 +278,14 @@ static void *da8xx_evm_soc_pdata[DA8XX_P
 	[DA8XX_PDEV_LCDC]	= &da8xx_evm_lcdc_pdata,
 };
 
-/* Setup USB clock/mode in the CFGCHIP2 register */
 static __init void da8xx_evm_usb_init(void)
 {
 	u32 cfgchip2;
 
-	/* FYI: CFGCHIP2 is 0x0000ef00 initially */
+	/*
+	 * Set up USB clock/mode in the CFGCHIP2 register.
+	 * FYI:  CFGCHIP2 is 0x0000ef00 initially.
+	 */
 	cfgchip2 = davinci_cfg_readl(DA8XX_CFGCHIP(2));
 
 	/* USB2.0 PHY reference clock is 24 MHz */
@@ -250,6 +314,22 @@ static __init void da8xx_evm_usb_init(vo
 #endif
 
 	davinci_cfg_writel(cfgchip2, DA8XX_CFGCHIP(2));
+
+#if defined(CONFIG_USB_OHCI_HCD) || defined(CONFIG_USB_OHCI_HCD_MODULE)
+
+	if (gpio_request(ON_BD_USB_DRV, "ON_BD_USB_DRV") ||
+	    gpio_request(ON_BD_USB_OVC, "ON_BD_USB_OVC")) {
+		printk(KERN_ERR "%s: could not request GPIOs for USB1 port "
+		       "power control and over-current indicator\n", __func__);
+
+		return;
+	}
+	gpio_direction_output(ON_BD_USB_DRV, 0);
+	gpio_direction_input(ON_BD_USB_OVC);
+
+	da8xx_evm_soc_pdata[DA8XX_PDEV_USB_11] = &da8xx_evm_usb11_pdata;
+
+#endif /* defined(CONFIG_USB_OHCI_HCD) || defined(CONFIG_USB_OHCI_HCD_MODULE) */
 }
 
 #ifdef	CONFIG_DA8XX_UI
@@ -455,7 +535,12 @@ static const short evm_usb20_pins[] = {
 	DA8XX_USB0_DRVVBUS,
 	-1
 };
+
+/*
+ * USB1 VBUS is controlled by GPIO1[15], over-current is reported on GPIO2[4].
+ */
 static const short evm_usb11_pins[] = {
+	DA8XX_GPIO1_15, DA8XX_GPIO2_4,
 	-1
 };
 
Index: linux-2.6.18/mvl_patches/pro50-2161.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-2161.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2009 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(2161);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

