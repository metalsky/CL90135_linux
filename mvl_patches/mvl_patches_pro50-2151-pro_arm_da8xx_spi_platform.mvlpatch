#! /usr/bin/env bash
# Patch: -pro_arm_da8xx_spi_platform
# Date: Thu Feb 19 15:04:15 2009
# Source: MontaVista Software, Inc.
# MR: 28546, 30871
# Type: Enhancement
# Disposition: needs submitting to DaVinci community
# Signed-off-by: Mark A. Greer <mgreer@mvista.com>
# Signed-off-by: Steve Chen <schen@mvista.com>
# Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
# Description:
# Add SPI support for DA8xx.
# 
#  arch/arm/mach-da8xx/Makefile |    1 
#  arch/arm/mach-da8xx/spi.c    |  278 +++++++++++++++++++++++++++++++++++++++++++
#  2 files changed, 279 insertions(+)
# 

PATCHNUM=2151
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 28546, 30871
Type: Enhancement
Disposition: needs submitting to DaVinci community
Signed-off-by: Mark A. Greer <mgreer@mvista.com>
Signed-off-by: Steve Chen <schen@mvista.com>
Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
Description:
Add SPI support for DA8xx.

 arch/arm/mach-da8xx/Makefile |    1 
 arch/arm/mach-da8xx/spi.c    |  278 +++++++++++++++++++++++++++++++++++++++++++
 mvl_patches/pro50-2151.c     |   16 ++
 3 files changed, 295 insertions(+)

Index: linux-2.6.18/arch/arm/mach-da8xx/Makefile
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-da8xx/Makefile
+++ linux-2.6.18/arch/arm/mach-da8xx/Makefile
@@ -7,3 +7,4 @@
 obj-y := time.o clock.o io.o id.o devices.o dma.o reset.o
 
 obj-$(CONFIG_GENERIC_GPIO)	+= gpio.o
+obj-$(CONFIG_SPI_DAVINCI)	+= spi.o
Index: linux-2.6.18/arch/arm/mach-da8xx/spi.c
===================================================================
--- /dev/null
+++ linux-2.6.18/arch/arm/mach-da8xx/spi.c
@@ -0,0 +1,278 @@
+/*
+ * TI DA8xx EVM SPI platform
+ *
+ * Copyright (C) 2008 Monta Vista Software Inc. <source@mvista.com>
+ *
+ * Based on: arch/arm/mach-davinci/davinci_spi_platform.c
+ * Copyright (C) 2007 Texas Instruments.
+ * Copyright (C) 2007 Monta Vista Software Inc.
+ *
+ * ----------------------------------------------------------------------------
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ * ----------------------------------------------------------------------------
+ *
+ * This file came directly from spi_platform_init.c.  This file has been
+ * generalized to all DaVinci variants.  This file should replace
+ * spi_platform_init.c
+ *
+ */
+#include <linux/config.h>
+#include <linux/device.h>
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/types.h>
+#include <linux/init.h>
+#include <linux/io.h>
+#include <linux/resource.h>
+#include <linux/spi/spi.h>
+#include <linux/spi/davinci_spi.h>
+#include <linux/spi/flash.h>
+#include <linux/device.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/partitions.h>
+#include <linux/platform_device.h>
+#include <linux/spi/davinci_spi_master.h>
+#include <linux/spi/at25xxA_eeprom.h>
+#include <linux/spi/mtd_spi_flash.h>
+
+#include <asm/arch/hardware.h>
+#include <asm/arch/cpu.h>
+
+static struct davinci_spi_platform_data da8xx_spi_pdata0 = {
+	.version = DAVINCI_SPI_VERSION_2,
+	.num_chipselect = 1,
+	.clk_name = "SPI0CLK",
+};
+
+static struct resource da8xx_spi_resources0[] = {
+	[0] = {
+		.start = DA8XX_SPI0_BASE,
+		.end = DA8XX_SPI0_BASE + 0xfff,
+		.flags = IORESOURCE_MEM,
+	},
+	[1] = {
+		.start = IRQ_DA8XX_SPINT0,
+		.end = IRQ_DA8XX_SPINT0,
+		.flags = IORESOURCE_IRQ,
+	},
+	[2] = {
+		.start = DA8XX_DMACH_SPI0_RX,
+		.end = DA8XX_DMACH_SPI0_RX,
+		.flags = IORESOURCE_DMA | IORESOURCE_DMA_RX_CHAN,
+	},
+	[3] = {
+		.start = DA8XX_DMACH_SPI0_TX,
+		.end = DA8XX_DMACH_SPI0_TX,
+		.flags = IORESOURCE_DMA | IORESOURCE_DMA_TX_CHAN,
+	},
+	[4] = {
+		.start = EVENTQ_1,
+		.end = EVENTQ_1,
+		.flags = IORESOURCE_DMA | IORESOURCE_DMA_EVENT_Q,
+	},
+};
+
+static struct platform_device da8xx_spi_pdev0 = {
+	.name = "dm_spi",
+	.id = 0,
+	.resource = da8xx_spi_resources0,
+	.num_resources = ARRAY_SIZE(da8xx_spi_resources0),
+	.dev = {
+		.platform_data = &da8xx_spi_pdata0,
+	},
+};
+
+static u8 da8xx_spi1_chip_sel[] = {
+	DAVINCI_SPI_INTERN_CS, DAVINCI_SPI_INTERN_CS, 58,
+};
+
+static struct davinci_spi_platform_data da8xx_spi_pdata1 = {
+	.version = DAVINCI_SPI_VERSION_2,
+	.num_chipselect = 3,
+	.clk_name = "SPI1CLK",
+	.chip_sel = da8xx_spi1_chip_sel,
+};
+
+static struct resource da8xx_spi_resources1[] = {
+	[0] = {
+		.start = DA8XX_SPI1_BASE,
+		.end = DA8XX_SPI1_BASE + 0xfff,
+		.flags = IORESOURCE_MEM,
+	},
+	[1] = {
+		.start = IRQ_DA8XX_SPINT1,
+		.end = IRQ_DA8XX_SPINT1,
+		.flags = IORESOURCE_IRQ,
+	},
+	[2] = {
+		.start = DA8XX_DMACH_SPI1_RX,
+		.end = DA8XX_DMACH_SPI1_RX,
+		.flags = IORESOURCE_DMA | IORESOURCE_DMA_RX_CHAN,
+	},
+	[3] = {
+		.start = DA8XX_DMACH_SPI1_TX,
+		.end = DA8XX_DMACH_SPI1_TX,
+		.flags = IORESOURCE_DMA | IORESOURCE_DMA_TX_CHAN,
+	},
+	[4] = {
+		.start = EVENTQ_1,
+		.end = EVENTQ_1,
+		.flags = IORESOURCE_DMA | IORESOURCE_DMA_EVENT_Q,
+	},
+};
+
+static struct platform_device da8xx_spi_pdev1 = {
+	.name = "dm_spi",
+	.id = 1,
+	.resource = da8xx_spi_resources1,
+	.num_resources = ARRAY_SIZE(da8xx_spi_resources1),
+	.dev = {
+		.platform_data = &da8xx_spi_pdata1,
+	},
+};
+
+#if defined(CONFIG_MTD_SPI_FLASH) || defined(CONFIG_MTD_SPI_FLASH_MODULE)
+static struct mtd_partition flash_partitions[] = {
+	[0] = {
+		.name = "U-Boot",
+		.offset = 0,
+		.size = SZ_256K,
+		.mask_flags = MTD_WRITEABLE,
+	},
+	[1] = {
+		.name = "U-Boot Environment",
+		.offset = MTDPART_OFS_APPEND,
+		.size = SZ_16K,
+		.mask_flags = MTD_WRITEABLE,
+	},
+	[2] = {
+		.name = "Linux",
+		.offset = MTDPART_OFS_NXTBLK,
+		.size = MTDPART_SIZ_FULL,
+		.mask_flags = 0,
+	},
+};
+
+struct davinci_spi_config_t w25x64_spi_cfg = {
+	.wdelay		= 0,
+	.odd_parity	= 0,
+	.parity_enable	= 0,
+	.wait_enable	= 0,
+	.lsb_first	= 0,
+	.timer_disable	= 0,
+	.clk_high	= 0,
+	.phase_in	= 1,
+	.clk_internal	= 1,
+	.loop_back	= 0,
+	.cs_hold	= 1,
+	.intr_level	= 0,
+	.pin_op_modes	= SPI_OPMODE_SPISCS_4PIN,
+#ifndef CONFIG_SPI_INTERRUPT
+	.poll_mode	= 1,
+#endif
+};
+
+struct mtd_spi_flash_info w25x64_spi_flash = {
+	.name = "Windbond spi nand flash",
+	.chip_sel = SCS0_SELECT,
+	.parts = flash_partitions,
+	.nr_parts = ARRAY_SIZE(flash_partitions),
+};
+#endif
+
+static struct spi_board_info da8xx_spi_board_info0[] = {
+#if defined(CONFIG_MTD_SPI_FLASH) || defined(CONFIG_MTD_SPI_FLASH_MODULE)
+	[0] = {
+		.modalias = MTD_SPI_FLASH_NAME,
+		.platform_data = &w25x64_spi_flash,
+		.controller_data = &w25x64_spi_cfg,
+		.mode = SPI_MODE_0,
+		.max_speed_hz = 30000000,	/* max sample rate at 3V */
+		.bus_num = 0,
+		.chip_select = 0,
+	},
+#endif
+};
+
+static int ak4588_place_holder;
+
+struct davinci_spi_config_t ak4588_spi_cfg = {
+	.wdelay		= 0,
+	.odd_parity	= 0,
+	.parity_enable	= 0,
+	.wait_enable	= 0,
+	.lsb_first	= 0,
+	.timer_disable	= 0,
+	.clk_high	= 0,
+	.phase_in	= 1,
+	.clk_internal	= 1,
+	.loop_back	= 0,
+	.cs_hold	= 1,
+	.intr_level	= 0,
+	.pin_op_modes	= SPI_OPMODE_SPISCS_4PIN,
+#ifndef CONFIG_SPI_INTERRUPT
+	.poll_mode	= 1,
+#endif
+};
+
+static struct spi_board_info da8xx_spi_board_info1[] = {
+	[0] = {
+		.modalias = "AK4588 audio codec",
+		.platform_data = &ak4588_place_holder,
+		.controller_data = &ak4588_spi_cfg,
+		.mode = SPI_MODE_0,
+		.max_speed_hz = 2000000,	/* max sample rate at 3V */
+		.bus_num = 1,
+		.chip_select = 2,
+	},
+};
+
+/*
+ * This function registers the SPI master platform device and the SPI slave
+ * devices with the SPI bus.
+ */
+static int __init da8xx_spi_register(struct platform_device *pdev,
+				     struct spi_board_info *bi,
+				     unsigned int bi_size)
+{
+	int ret = platform_device_register(pdev);
+
+	if (ret)
+		return ret;
+
+	return spi_register_board_info(bi, bi_size);
+
+}
+
+static int __init da8xx_spi_board_init(void)
+{
+	int ret = da8xx_spi_register(&da8xx_spi_pdev0, da8xx_spi_board_info0,
+				     ARRAY_SIZE(da8xx_spi_board_info0));
+
+	if (ret)
+		return ret;
+
+	return da8xx_spi_register(&da8xx_spi_pdev1, da8xx_spi_board_info1,
+				  ARRAY_SIZE(da8xx_spi_board_info1));
+}
+
+static void __exit da8xx_spi_board_exit(void)
+{
+	/* nothing to be done */
+}
+
+module_init(da8xx_spi_board_init);
+module_exit(da8xx_spi_board_exit);
Index: linux-2.6.18/mvl_patches/pro50-2151.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-2151.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2009 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(2151);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

