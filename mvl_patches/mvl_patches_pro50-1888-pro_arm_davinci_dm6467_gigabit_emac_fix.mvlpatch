#! /usr/bin/env bash
# Patch: -pro_arm_davinci_dm6467_gigabit_emac_fix
# Date: Fri Sep 19 14:29:10 2008
# Source: MontaVista Software, Inc.
# MR: 28093
# Type: Integration.
# Disposition: merged from TI LSP 1.03
# Signed-off-by: Pavel Kiryukhin <pkiryulhin@ru.mvista.com>
# Description:
#     1) Fixes for Gigabit support for DaVinci dm6467 emac.
#     2) Other minor fixes.
#  drivers/net/davinci_emac.c |  106 +++++++++++++++++++++++++++++++--------------
#  1 files changed, 75 insertions(+), 31 deletions(-)
# 

PATCHNUM=1888
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 28093
Type: Integration.
Disposition: merged from TI LSP 1.03
Signed-off-by: Pavel Kiryukhin <pkiryulhin@ru.mvista.com>
Description:
    1) Fixes for Gigabit support for DaVinci dm6467 emac.
    2) Other minor fixes.
 drivers/net/davinci_emac.c |  113 ++++++++++++++++++++++++++++++---------------
 mvl_patches/pro50-1888.c   |   16 ++++++
 2 files changed, 93 insertions(+), 36 deletions(-)

Index: linux-2.6.18/drivers/net/davinci_emac.c
===================================================================
--- linux-2.6.18.orig/drivers/net/davinci_emac.c
+++ linux-2.6.18/drivers/net/davinci_emac.c
@@ -30,6 +30,7 @@
                              EMAC_IOCTL_READ_PHY_REG in emac_control() -
                              the phy_num and reg_addr args were swapped
                              in call to emac_mdio_read().
+      5.0 Sriramakrishnan - Modified and added support for dm6467
  */
 
 /*
@@ -98,7 +99,7 @@ MODULE_DESCRIPTION("DaVinci Ethernet dri
 
 static int cfg_link_speed = 0;
 module_param(cfg_link_speed, int, 0);
-MODULE_PARM_DESC(cfg_link_speed, "Fixed speed of the Link: <100/10>");
+MODULE_PARM_DESC(cfg_link_speed, "Fixed speed of the Link: <1000/100/10>");
 
 static char *cfg_link_mode = "auto";
 module_param(cfg_link_mode, charp, 0);
@@ -308,6 +309,7 @@ typedef void *emac_net_data_token;
 #define EMAC_RXMBP_CHMASK                      0x7
 
 /* mac control register bit fields */
+#define EMAC_MACCONTROL_GIG_FORCE_SHIFT        17
 #define EMAC_MACCONTROL_TXSHORTGAPEN_SHIFT     10
 #define EMAC_MACCONTROL_TXSHORTGAPEN_MASK      (0x1 << 10)
 #define EMAC_MACCONTROL_TXPTYPE_SHIFT          9
@@ -458,10 +460,15 @@ typedef void *emac_net_data_token;
 #define SNWAY_FD10          (1<<6)
 #define SNWAY_HD10          (1<<5)
 #define SNWAY_AUTO          (1<<0)
-#define SNWAY_AUTOALL       (SNWAY_AUTO|SNWAY_FD100|SNWAY_FD10|SNWAY_HD100|SNWAY_HD10)
+#define DM644X_SNWAY_AUTOALL   (SNWAY_AUTO|SNWAY_FD100|SNWAY_FD10|\
+				SNWAY_HD100|SNWAY_HD10)
+#define DM646X_SNWAY_AUTOALL   (SNWAY_AUTO|SNWAY_FD1000|SNWAY_HD1000|\
+				SNWAY_FD100|SNWAY_FD10|SNWAY_HD100|SNWAY_HD10)
+#define SNWAY_AUTOALL ((cpu_is_davinci_dm6467()) ? DM646X_SNWAY_AUTOALL : \
+			DM644X_SNWAY_AUTOALL)
 
 /**
- *  DDC Status Ioctl - Error status
+ *  Status Ioctl - Error status
  *
  *  Note that each error code is a bit position so that multiple
  *  errors can be clubbed together and passed in a integer value
@@ -1995,6 +2002,8 @@ static int emac_cfg_probe(void)
 static int emac_control_cb(emac_dev_t * dev, int cmd,
 			   void *cmd_arg, void *param)
 {
+	emac_mac_config *cfg;
+
 	switch (cmd) {
 	case EMAC_IOCTL_TIMER_START:
 		{
@@ -2046,9 +2055,19 @@ static int emac_control_cb(emac_dev_t * 
 				if (!netif_carrier_ok(netdev)) {
 					netif_carrier_on(netdev);
 				}
-				dev->link_speed =
-				    ((status->
-				      phy_speed == 100) ? 100000000 : 10000000);
+
+				cfg = &dev->init_cfg.mac_cfg;
+				cfg->giga_bit_enable = FALSE;
+
+				if (status->phy_speed == 1000) {
+					dev->link_speed = 1000000000;
+					cfg->giga_bit_enable = TRUE;
+				} else if (status->phy_speed == 100) {
+					dev->link_speed = 100000000;
+				} else {
+					dev->link_speed = 10000000;
+				}
+
 				dev->link_mode =
 				    ((status->phy_duplex == PHY_DUPLEX_FULL) ?
 					PHY_DUPLEX_FULL : PHY_DUPLEX_HALF);
@@ -2082,8 +2101,9 @@ static int emac_control_cb(emac_dev_t * 
 				    status->phy_num,
 				    ((status->phy_duplex == PHY_DUPLEX_FULL) ?
 				     "Full Duplex" : "Half Duplex"),
-				    ((status->phy_speed == 100) ?
-				     "100 Mbps" : "10 Mbps"),
+					((status->phy_speed > 10) ?
+					((status->phy_speed > 100) ?
+					"1000 Mbps" : "100 Mbps") : "10 Mbps"),
 				    ((status->phy_linked) ?
 				     "Linked" : "NO LINK"));
 		}
@@ -2296,21 +2316,26 @@ static int emac_net_get_config(emac_dev_
 		if ((speed == 0) && (duplex == PHY_DUPLEX_AUTO)) {
 			i_cfg->phy_mode = SNWAY_AUTOALL;
 		} else if (speed == 10) {
-			if (duplex == PHY_DUPLEX_HALF) {
+			if (duplex == PHY_DUPLEX_HALF)
 				i_cfg->phy_mode = SNWAY_HD10;
-			} else if (duplex == PHY_DUPLEX_FULL) {
+			else if (duplex == PHY_DUPLEX_FULL)
 				i_cfg->phy_mode = SNWAY_FD10;
-			} else {
+			else
 				i_cfg->phy_mode = SNWAY_HD10 | SNWAY_FD10;
-			}
 		} else if (speed == 100) {
-			if (duplex == PHY_DUPLEX_HALF) {
+			if (duplex == PHY_DUPLEX_HALF)
 				i_cfg->phy_mode = SNWAY_HD100;
-			} else if (duplex == PHY_DUPLEX_FULL) {
+			else if (duplex == PHY_DUPLEX_FULL)
 				i_cfg->phy_mode = SNWAY_FD100;
-			} else {
+			else
 				i_cfg->phy_mode = SNWAY_HD100 | SNWAY_FD100;
-			}
+		} else if (speed == 1000) {
+			if (duplex == PHY_DUPLEX_HALF)
+				i_cfg->phy_mode = SNWAY_HD1000;
+			else if (duplex == PHY_DUPLEX_FULL)
+				i_cfg->phy_mode = SNWAY_FD1000;
+			else
+				i_cfg->phy_mode = SNWAY_HD1000 | SNWAY_FD1000;
 		} else {
 			if (duplex == PHY_DUPLEX_FULL) {
 				i_cfg->phy_mode = SNWAY_FD10 | SNWAY_FD100;
@@ -2387,7 +2412,8 @@ static int __init emac_p_detect_manual_c
 		DBG("auto negotiation selected\n");
 	}
 
-	if (!link_speed || (link_speed != 10 && link_speed != 100)) {
+	if (!link_speed || (link_speed != 10 && link_speed != 100
+				&& link_speed != 1000)) {
 		g_link_speed = 0;
 		g_link_mode = 0;
 		DBG("Invalid or No value of link speed specified,"
@@ -2414,6 +2440,9 @@ static int __init emac_p_detect_manual_c
 	} else if ((link_speed == 100) && (!strcmp(link_mode, "hd"))) {
 		g_link_speed = 100;
 		g_link_mode = 2;
+	} else if ((link_speed == 1000) && (!strcmp(link_mode, "fd"))) {
+		g_link_speed = 1000;
+		g_link_mode = 3;
 	} else {
 		g_link_speed = 0;
 		g_link_mode = 0;
@@ -2422,7 +2451,8 @@ static int __init emac_p_detect_manual_c
 	DBG("Link is set to the speed of"
 	    "%s speed and %s mode.\n",
 	    ((g_link_speed ==
-	      0) ? "auto" : ((g_link_speed == 100) ? "100" : "10")),
+		0) ? "auto" : ((g_link_speed == 100) ? "100" :
+		((g_link_speed == 1000) ? "1000" : "10"))),
 	    ((g_link_mode ==
 	      0) ? "auto" : ((g_link_mode == 2) ? "half" : "full")));
 
@@ -2464,7 +2494,9 @@ static int emac_p_read_link(char *buf, c
 				    dev->instance_num, "UP",
 				    dev->ddc_status.phy_num,
 				    (dev->link_speed ==
-				     100000000) ? "100" : "10",
+				     100000000) ? "100" :
+				    ((dev->link_speed == 10000000) ?
+				     "10" : "1000"),
 				    (dev->link_mode == 2) ? "Half" : "Full");
 
 		} else {
@@ -4168,19 +4200,6 @@ static int emac_update_phy_status(emac_d
 	if (set_phy_mode & SNWAY_NOPHY) {
 		/*  no phy condition, always linked */
 		dev->status.phy_linked = 1;
-		dev->status.phy_speed = 100;
-		dev->status.phy_duplex = PHY_DUPLEX_FULL;
-		dev->status.phy_num = 0xFFFFFFFF;	/* no phy */
-		dev->mac_control |= (1 << EMAC_MACCONTROL_FULLDUPLEXEN_SHIFT);
-
-		/* write mac control register from stored value */
-		dev->regs->mac_control = dev->mac_control;
-		goto emac_update_phy_status_exit;
-	}
-
-	/* if loopback set in hardware, set link to ON */
-	if (dev->mac_control & EMAC_MACCONTROL_LOOPBKEN_MASK) {
-		dev->status.phy_linked = 1;
 		goto emac_update_phy_status_exit;
 	}
 	if (set_phy_mode & SNWAY_LPBK) {
@@ -4208,6 +4227,16 @@ static int emac_update_phy_status(emac_d
 			    ~(1 << EMAC_MACCONTROL_FULLDUPLEXEN_SHIFT);
 		}
 
+		if (dev->status.phy_speed == 1000) {
+
+		dev->mac_control |=
+			((0x1 << EMAC_MACCONTROL_GIGABITEN_SHIFT) |
+			 (0x1 << EMAC_MACCONTROL_GIG_FORCE_SHIFT));
+		} else {
+			dev->mac_control &=
+			      ~((0x1 << EMAC_MACCONTROL_GIGABITEN_SHIFT) |
+				(0x1 << EMAC_MACCONTROL_GIG_FORCE_SHIFT));
+		}
 	}
 
 	/* write mac control register from stored value */
@@ -4247,10 +4276,14 @@ static int emac_set_phy_mode(emac_dev_t 
 		phy_mode |= NWAY_FD10;
 	if (set_phy_mode & SNWAY_FD100)
 		phy_mode |= NWAY_FD100;
+	if (set_phy_mode & SNWAY_FD1000)
+		phy_mode |= NWAY_FD1000;
 	if (set_phy_mode & SNWAY_HD10)
 		phy_mode |= NWAY_HD10;
 	if (set_phy_mode & SNWAY_HD100)
 		phy_mode |= NWAY_HD100;
+	if (set_phy_mode & SNWAY_HD1000)
+		phy_mode |= NWAY_HD1000;
 	if (set_phy_mode & SNWAY_LPBK)
 		phy_mode |= NWAY_LPBK;
 	if (set_phy_mode & SNWAY_AUTOMDIX)
@@ -4274,17 +4307,25 @@ static int emac_set_phy_mode(emac_dev_t 
 			       "100Mbps support. CANNOT SUPPORT 100Mbps",
 			       dev->init_cfg.emac_bus_frequency,
 			       EMAC_MIN_FREQUENCY_FOR_100MBPS);
+	} else if ((set_phy_mode & SNWAY_FD1000) ||
+		(set_phy_mode & SNWAY_HD1000)) {
+		if (dev->init_cfg.emac_bus_frequency <=
+		EMAC_MIN_FREQUENCY_FOR_1000MBPS)
+
+			LOGERR("freq(%d) is less than required %d freq for "
+				"1000Mbps support. CANNOT SUPPORT 1000Mbps",
+				dev->init_cfg.emac_bus_frequency,
+				EMAC_MIN_FREQUENCY_FOR_1000MBPS);
 	}
 
-	/* TODO: check for gigabit mode when PHY mode defines for
-	 * gigabit are available */
 	LOGMSG(EMAC_DEBUG_PORT_UPDATE,
 	       "MdioPhyMode=%08X, PhyMode=%08d, Auto:%d, FD10:%d, "
-	       "HD10:%d, FD100:%d, HD100:%d",
+	       "HD10:%d, FD100:%d, HD100:%d FD1000:%d HD1000:%d",
 	       set_phy_mode, phy_mode,
 	       (phy_mode & NWAY_AUTO), (phy_mode & NWAY_FD10),
 	       (phy_mode & NWAY_HD10),
-	       (phy_mode & NWAY_FD100), (phy_mode & NWAY_HD100));
+	       (phy_mode & NWAY_FD100), (phy_mode & NWAY_HD100),
+	       (phy_mode & NWAY_FD1000), (phy_mode & NWAY_HD1000));
 	emac_mdio_set_phy_mode(phy_mode);
 	emac_update_phy_status(_dev);
 	LOGMSG(EMAC_DEBUG_BUSY_FUNCTION_EXIT, "");
Index: linux-2.6.18/mvl_patches/pro50-1888.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1888.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1888);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

