#! /usr/bin/env bash
# Patch: -pro_emac_make_rx_tx_channels_equal
# Date: Thu Feb 19 15:03:03 2009
# Source: MontaVista Software, Inc.
# MR: 28780
# Type: Enhancement
# Disposition: local
# Signed-off-by: Mikhail Cherkashin <mcherkashin@irumvista.com>
# Description:
# Make RX/TX dma channel number be equal and controller by a single parameter.
# 

PATCHNUM=2135
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 28780
Type: Enhancement
Disposition: local
Signed-off-by: Mikhail Cherkashin <mcherkashin@irumvista.com>
Description:
Make RX/TX dma channel number be equal and controller by a single parameter.

Index: linux-2.6.18/drivers/net/davinci_emac.c
===================================================================
--- linux-2.6.18.orig/drivers/net/davinci_emac.c
+++ linux-2.6.18/drivers/net/davinci_emac.c
@@ -155,8 +155,7 @@ typedef void *emac_net_data_token;
 
 /* EMAC hardware specific */
 #define EMAC_RESET_CLOCKS_WAIT                 64
-#define EMAC_MAX_TX_CHANNELS                   8
-#define EMAC_MAX_RX_CHANNELS                   8
+#define EMAC_MAX_TXRX_CHANNELS		       8  /* Max hardware channels */
 #define EMAC_MIN_FREQUENCY_FOR_10MBPS          5500000
 #define EMAC_MIN_FREQUENCY_FOR_100MBPS         55000000
 #define EMAC_MIN_FREQUENCY_FOR_1000MBPS        125000000
@@ -1294,8 +1293,8 @@ struct emac_dev {
 
 	/* channel configuration - though only 1 TX/RX channel is
 	 * supported, provision is made for max */
-	emac_ch_info tx_ch_info[EMAC_MAX_TX_CHANNELS];
-	emac_ch_info rx_ch_info[EMAC_MAX_RX_CHANNELS];
+	emac_ch_info tx_ch_info[EMAC_MAX_TXRX_CHANNELS];
+	emac_ch_info rx_ch_info[EMAC_MAX_TXRX_CHANNELS];
 
 	struct timer_list mib_timer;	/* for 64 bit MIB counter  */
 	u32 mib_ticks;		/* ticks for this timer */
@@ -1319,15 +1318,15 @@ struct emac_dev {
 	emac_drv_state drv_state;
 
 	/** EMAC specific parameters - DDC device specifics */
-	emac_tx_cppi_ch *tx_cppi[EMAC_MAX_TX_CHANNELS];
-	emac_rx_cppi_ch *rx_cppi[EMAC_MAX_RX_CHANNELS];
-	bool tx_is_created[EMAC_MAX_TX_CHANNELS];
-	bool rx_is_created[EMAC_MAX_RX_CHANNELS];
-	bool tx_is_open[EMAC_MAX_TX_CHANNELS];
-	bool rx_is_open[EMAC_MAX_RX_CHANNELS];
-	bool tx_teardown_pending[EMAC_MAX_TX_CHANNELS];
-	bool rx_teardown_pending[EMAC_MAX_RX_CHANNELS];
-	int tx_int_threshold[EMAC_MAX_TX_CHANNELS];
+	emac_tx_cppi_ch * tx_cppi[EMAC_MAX_TXRX_CHANNELS];
+	emac_rx_cppi_ch * rx_cppi[EMAC_MAX_TXRX_CHANNELS];
+	bool tx_is_created[EMAC_MAX_TXRX_CHANNELS];
+	bool rx_is_created[EMAC_MAX_TXRX_CHANNELS];
+	bool tx_is_open[EMAC_MAX_TXRX_CHANNELS];
+	bool rx_is_open[EMAC_MAX_TXRX_CHANNELS];
+	bool tx_teardown_pending[EMAC_MAX_TXRX_CHANNELS];
+	bool rx_teardown_pending[EMAC_MAX_TXRX_CHANNELS];
+	int tx_int_threshold[EMAC_MAX_TXRX_CHANNELS];
 	bool tx_interrupt_disable;
 	bool giga_bit_enable;
 
@@ -3783,14 +3782,14 @@ static int emac_open(struct emac_dev *de
 			dev->mdio_base_address + MDIO_CONTROL);
 
 	/* program TX/RX HDP's to 0 */
-	for (channel = 0; channel < EMAC_MAX_TX_CHANNELS; channel++) {
+	for (channel = 0; channel < EMAC_MAX_TXRX_CHANNELS; channel++) {
 		dev->regs->tx_HDP[channel] = 0;
 
 		/* initialize the completion pointers to 0 */
 		dev->regs->tx_CP[channel] = 0;
 	}
 
-	for (channel = 0; channel < EMAC_MAX_RX_CHANNELS; channel++) {
+	for (channel = 0; channel < EMAC_MAX_TXRX_CHANNELS; channel++) {
 		dev->regs->rx_HDP[channel] = 0;
 
 		/* initialize the completion pointers to 0 */
@@ -3823,7 +3822,7 @@ static int emac_open(struct emac_dev *de
 	emac_set_phy_mode(dev);
 
 	/* enable opened TX channels */
-	for (channel = 0; channel < EMAC_MAX_TX_CHANNELS; channel++) {
+	for (channel = 0; channel < EMAC_MAX_TXRX_CHANNELS; channel++) {
 		if (dev->tx_cppi[channel] != NULL) {
 			ret_val =
 			    emac_enable_channel(dev, channel, NET_CH_DIR_TX);
@@ -3857,7 +3856,7 @@ static int emac_open(struct emac_dev *de
 	dev->rx_addr_type = (dev->regs->mac_cfig >> 8) & 0xFF;
 
 	/* enable opened RX channels */
-	for (channel = 0; channel < EMAC_MAX_RX_CHANNELS; channel++) {
+	for (channel = 0; channel < EMAC_MAX_TXRX_CHANNELS; channel++) {
 		if (dev->rx_cppi[channel] != NULL) {
 			ret_val =
 			    emac_enable_channel(dev, channel, NET_CH_DIR_RX);
@@ -3918,7 +3917,7 @@ static int emac_close(struct emac_dev *d
 	/* stop the mib timer via DDA */
 	emac_timer_stop(dev);
 	/* close TX channels */
-	for (channel = 0; channel < EMAC_MAX_TX_CHANNELS; channel++) {
+	for (channel = 0; channel < EMAC_MAX_TXRX_CHANNELS; channel++) {
 		if (dev->tx_cppi[channel] != NULL) {
 			ret_val =
 			    emac_ch_close(dev, channel, NET_CH_DIR_TX, NULL);
@@ -3934,7 +3933,7 @@ static int emac_close(struct emac_dev *d
 	}
 
 	/* close RX channels */
-	for (channel = 0; channel < EMAC_MAX_RX_CHANNELS; channel++) {
+	for (channel = 0; channel < EMAC_MAX_TXRX_CHANNELS; channel++) {
 		if (dev->rx_cppi[channel] != NULL) {
 			ret_val =
 			    emac_ch_close(dev, channel, NET_CH_DIR_RX, NULL);
@@ -5430,7 +5429,7 @@ static int emac_send(struct emac_dev *de
 		return (EMAC_ERR_DEV_NOT_OPEN);
 
 	/* validate channel number and get channel control structure */
-	if (channel > EMAC_MAX_TX_CHANNELS)
+	if (channel > EMAC_MAX_TXRX_CHANNELS)
 		return (EMAC_ERR_TX_CH_INVALID);
 
 	if (dev->tx_is_open[channel] != TRUE)
Index: linux-2.6.18/mvl_patches/pro50-2135.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-2135.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2009 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(2135);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

