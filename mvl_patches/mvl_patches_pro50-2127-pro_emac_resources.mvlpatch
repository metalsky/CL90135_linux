#! /usr/bin/env bash
# Patch: -pro_emac_resources
# Date: Thu Feb 19 15:02:29 2009
# Source: MontaVista Software, Inc.   
# MR: 28780  
# Type: Enhancement
# Disposition: local  
# Signed-off-by: Aleksey Makarov <amakarov@ru.mvista.com>
# Signed-off-by: Mikhail Cherkashin <mcherkashin@ru.mvista.com>
# Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
# Description:   
# Introducing Linux resources to the DaVinci EMAC driver.
# 
#  arch/arm/mach-davinci/devices.c |   90 +++++++----
#  drivers/net/davinci_emac.c      |  316 ++++++++++++++++++++--------------------
#  2 files changed, 226 insertions(+), 180 deletions(-)
# 

PATCHNUM=2127
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.   
MR: 28780  
Type: Enhancement
Disposition: local  
Signed-off-by: Aleksey Makarov <amakarov@ru.mvista.com>
Signed-off-by: Mikhail Cherkashin <mcherkashin@ru.mvista.com>
Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
Description:   
Introducing Linux resources to the DaVinci EMAC driver.

 arch/arm/mach-davinci/devices.c |   90 +++++++----
 drivers/net/davinci_emac.c      |  316 ++++++++++++++++++++--------------------
 mvl_patches/pro50-2127.c        |   16 ++
 3 files changed, 242 insertions(+), 180 deletions(-)

Index: linux-2.6.18/arch/arm/mach-davinci/devices.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/devices.c
+++ linux-2.6.18/arch/arm/mach-davinci/devices.c
@@ -160,62 +160,96 @@ static void __init davinci_init_cpu_usb(
  * MAC stuff
  */
 
+#define RESOURCE_IRQ 4
+
+static struct resource mac_resources[] = {
+	{
+		.start	= DAVINCI_EMAC_CNTRL_REGS_BASE,
+		.end	= DAVINCI_EMAC_CNTRL_REGS_BASE + 0xfff,
+		.flags	= IORESOURCE_MEM,
+		.name	= "ctrl_regs",
+	},
+	{
+		.start	= DAVINCI_EMAC_WRAPPER_CNTRL_REGS_BASE,
+		.end	= DAVINCI_EMAC_WRAPPER_CNTRL_REGS_BASE + 0xfff,
+		.flags	= IORESOURCE_MEM,
+		.name	= "wrapper_ctrl_regs",
+	},
+	{
+		.start	= DAVINCI_EMAC_WRAPPER_RAM_BASE,
+		.end	= DAVINCI_EMAC_WRAPPER_RAM_BASE + 0x1fff,
+		.flags	= IORESOURCE_MEM,
+		.name	= "wrapper_ram",
+	},
+	{
+		.start	= DAVINCI_MDIO_CNTRL_REGS_BASE,
+		.end	= DAVINCI_MDIO_CNTRL_REGS_BASE + 0x7ff,
+		.flags	= IORESOURCE_MEM,
+		.name	= "mdio_regs",
+	},
+	[RESOURCE_IRQ] = {
+		.start	= IRQ_DM646X_EMACRXTHINT,
+		.flags	= IORESOURCE_IRQ,
+		.name	= "mac_rx_threshold",
+	},
+	{
+		.start	= IRQ_DM646X_EMACRXINT,
+		.flags	= IORESOURCE_IRQ,
+		.name	= "mac_rx",
+	},
+	{
+		.start	= IRQ_DM646X_EMACTXINT,
+		.flags	= IORESOURCE_IRQ,
+		.name	= "mac_tx",
+	},
+	{
+		.start	= IRQ_DM646X_EMACMISCINT,
+		.flags	= IORESOURCE_IRQ,
+		.name	= "mac_misc",
+	},
+};
+
 static struct emac_init_config dm646x_emac_data = {
-	.base_address = IO_ADDRESS(DAVINCI_EMAC_CNTRL_REGS_BASE),
-	.intr_line = 24,
 	.reset_line = 0,
 	.emac_bus_frequency = 148500000,
-	.mdio_base_address = IO_ADDRESS(DAVINCI_MDIO_CNTRL_REGS_BASE),
 	.mdio_reset_line = 0,
-	.mdio_intr_line = 0,
 	.mdio_bus_frequency = 148500000,
 	.mdio_clock_frequency = 2200000,
 	.phy_mask = 3,
-	.num_intr_lines = 4,
-	.interrupt_name = {
-		[0] = "EMAC RX Threshold",
-		[1] = "EMAC Receive",
-		[2] = "EMAC Transmit",
-		[3] = "EMAC Misc",
-	},
 };
 
 static struct emac_init_config dm644x_emac_data = {
-	.base_address = IO_ADDRESS(DAVINCI_EMAC_CNTRL_REGS_BASE),
-	.intr_line = 13,
 	.reset_line = 0,
 	.emac_bus_frequency = 76500000,
-	.mdio_base_address = IO_ADDRESS(DAVINCI_MDIO_CNTRL_REGS_BASE),
 	.mdio_reset_line = 0,
-	.mdio_intr_line = 0,
 	.mdio_bus_frequency = 76500000,
 	.mdio_clock_frequency = 2200000,
 	.phy_mask = 2,
-	.num_intr_lines = 1,
-	.interrupt_name = {
-		[0] = "EMAC",
-	},
 };
 
 static struct platform_device emac_device = {
 	.name           = "emac_davinci",
 	.id             = 1,
 	.dev		= {
-		.platform_data = &dm644x_emac_data,
+		.platform_data = &dm646x_emac_data,
 	},
-	/*
-	 * TODO: use resources for addresses
-	 * .num_resources	= ARRAY_SIZE(mac_resources),
-	 * .resource	= mac_resources,
-	 */
+	.num_resources	= ARRAY_SIZE(mac_resources),
+	.resource	= mac_resources,
 };
 
 static void __init davinci_init_cpu_emac_register(void)
 {
-	if (cpu_is_davinci_dm644x())
+	if (cpu_is_davinci_dm644x()) {
 		emac_device.dev.platform_data = &dm644x_emac_data;
-	else if (cpu_is_davinci_dm6467())
-		emac_device.dev.platform_data = &dm646x_emac_data;
+		mac_resources[RESOURCE_IRQ] = (struct resource) {
+			.start	= IRQ_DM644X_EMACINT,
+			.flags	= IORESOURCE_IRQ,
+			.name	= "mac",
+		};
+		emac_device.num_resources = RESOURCE_IRQ + 1;
+	} else if (cpu_is_davinci_dm6467()) {
+		/* do nothing */
+	}
 	else
 		return;
 
Index: linux-2.6.18/drivers/net/davinci_emac.c
===================================================================
--- linux-2.6.18.orig/drivers/net/davinci_emac.c
+++ linux-2.6.18/drivers/net/davinci_emac.c
@@ -134,9 +134,6 @@ typedef void *emac_net_data_token;
  * TX BD's
  */
 #define EMAC_BASE_ADDR         IO_ADDRESS(DAVINCI_EMAC_CNTRL_REGS_BASE)
-#define EMAC_WRAPPER_REGS_ADDR IO_ADDRESS(DAVINCI_EMAC_WRAPPER_CNTRL_REGS_BASE)
-#define EMAC_WRAPPER_RAM_ADDR  IO_ADDRESS(DAVINCI_EMAC_WRAPPER_RAM_BASE)
-#define EMAC_WRAPPER_RAM_SIZE  (8 << 10)
 
 /* feature macros here */
 
@@ -1317,6 +1314,7 @@ struct emac_dev {
 	volatile union ewrap_regs *ewrap_regs;
 	char *ewrap_ram;
 	unsigned long ewrap_ram_size;
+	unsigned long mdio_base_address;
 
 	struct mib2_if_hccounters mib2if_hccounter;
 
@@ -1405,10 +1403,6 @@ static int emac_p_reset_statistics(struc
 static int emac_p_read_rfc2665_stats(char *buf, char **start, off_t offset,
 				     int count, int *eof, void *data);
 
-static int emac_p_dev_enable(struct emac_dev *dev);
-
-static int emac_p_dev_disable(struct emac_dev *dev);
-
 static void emac_p_tick_timer_expiry(struct emac_dev *dev);
 
 static int emac_dev_set_mac_addr(struct net_device *netdev, void *addr);
@@ -1738,7 +1732,7 @@ static int emac_control_cb(struct emac_d
  *
  * RETURNS: OK or ERROR.
  */
-static int emac_net_get_config(struct emac_dev *dev)
+static void emac_net_get_config(struct emac_dev *dev)
 {
 	struct emac_init_config *i_cfg = &dev->init_cfg;
 	emac_ch_info *tx_ch_cfg = &dev->tx_ch_info[0];
@@ -1845,10 +1839,6 @@ static int emac_net_get_config(struct em
 	rx_ch_cfg->ch_dir = NET_CH_DIR_RX;
 	rx_ch_cfg->ch_state = NET_CH_UNINITIALIZED;
 
-	/* module control EWrap base address for DaVinci */
-	i_cfg->e_wrap_base_address = EMAC_WRAPPER_REGS_ADDR;
-
-	return (0);
 }
 
 /* detect manual config */
@@ -1975,24 +1965,15 @@ static int emac_dump_config(char *buf, c
 		    sprintf(buf + len, "emacBusFrequency  = %d\n",
 			    dev->init_cfg.emac_bus_frequency);
 		len +=
-		    sprintf(buf + len, "baseAddress        = %08X\n",
-			    dev->init_cfg.base_address);
-		len +=
-		    sprintf(buf + len, "intrLine           = %d\n",
-			    dev->init_cfg.intr_line);
-		len +=
 		    sprintf(buf + len, "resetLine          = %d\n",
 			    dev->init_cfg.reset_line);
 		len +=
-		    sprintf(buf + len, "mdioBaseAddress    = %08X\n",
-			    dev->init_cfg.mdio_base_address);
+		    sprintf(buf + len, "mdioBaseAddress    = %08lX\n",
+			    dev->mdio_base_address);
 		len +=
 		    sprintf(buf + len, "mdioResetLine      = %d\n",
 			    dev->init_cfg.mdio_reset_line);
 		len +=
-		    sprintf(buf + len, "mdioIntrLine       = %d\n",
-			    dev->init_cfg.mdio_intr_line);
-		len +=
 		    sprintf(buf + len, "PhyMask            = %08X\n",
 			    dev->init_cfg.phy_mask);
 		len +=
@@ -2635,86 +2616,6 @@ static void emac_p_mib_timer_expiry(stru
 }
 
 /******************************************************************************
- *  Device enable/disable functions
- *****************************************************************************/
-
-/* enable the device - init TX/RX channels and open DDC */
-static int emac_p_dev_enable(struct emac_dev *dev)
-{
-	int ret_code;
-	struct net_device *netdev = dev->owner;
-
-	dev->set_to_close = 0;
-
-	/* create a TX channel */
-	ret_code = emac_ch_open(dev, &dev->tx_ch_info[0], NULL);
-
-	if (ret_code != EMAC_SUCCESS) {
-		ERR("%s error: Error %08X from EMAC TX Channel Open()\n",
-		    netdev->name, ret_code);
-
-		return (-1);
-	}
-
-	/* create a RX channel - note that last param contains mac address */
-	ret_code =
-	    emac_ch_open(dev, &dev->rx_ch_info[0], (void *)&dev->mac_addr[0]);
-	if (ret_code != EMAC_SUCCESS) {
-		ERR("%s error: Error %08X from EMAC RX Channel Open()\n",
-		    netdev->name, ret_code);
-
-		return (-1);
-	}
-
-	/* open DDC instance */
-	ret_code = emac_open(dev, NULL);
-	if (ret_code != EMAC_SUCCESS) {
-		ERR("%s error: Error %08X from EMAC Open()\n",
-		    netdev->name, ret_code);
-
-		return (-1);
-	}
-
-	return (0);
-}
-
-/* disable the device - teardown chanels and close DDC */
-static int emac_p_dev_disable(struct emac_dev *dev)
-{
-	int ret_code;
-	struct net_device *netdev = dev->owner;
-
-	/* inform the upper layers. */
-	netif_stop_queue(dev->owner);
-
-	/* prepare to close */
-	set_bit(0, &dev->set_to_close);
-
-	/* closing the DDC instance will close all channels also */
-	ret_code = emac_close(dev, NULL);
-
-	if (ret_code != EMAC_SUCCESS) {
-		ERR("%s error: Error %08X from EMAC Close()\n",
-		    netdev->name, ret_code);
-		return (-1);
-	} else {
-		/* DDC should turn off the timer, but just in case */
-		if (dev->timer_active != FALSE) {
-			del_timer_sync(&dev->periodic_timer);
-			dev->timer_active = FALSE;
-		}
-
-		pr_debug("Device %s Closed.\n", netdev->name);
-		dev->device_stats.start_tick = jiffies;
-		dev->link_speed = 100000000;
-		dev->link_mode = 1;
-		netif_carrier_off(netdev);
-	}
-
-	return (0);
-}
-
-/******************************************************************************
  *  Net Device functions
  *****************************************************************************/
 
@@ -2945,9 +2846,13 @@ struct ethtool_ops ethtool_ops = {
 
 static int emac_dev_init(struct net_device *netdev)
 {
-	int cnt, init_status = 0;
+	int cnt;
 	struct emac_dev *dev = NETDEV_PRIV(netdev);
+	struct platform_device *pdev =
+		to_platform_device(netdev->class_dev.dev);
 	unsigned char mac_eeprom[20];
+	struct resource *res;
+	int err = 0;
 
 	if (davinci_get_macaddr(mac_eeprom)) {
 		pr_err("Error getting board specific MAC address\n");
@@ -2965,14 +2870,7 @@ static int emac_dev_init(struct net_devi
 
 	dev->set_to_close = 1;
 
-	/* get configuration information for this instance */
-	/* when config service is available, use it */
-	if (emac_net_get_config(dev) != 0) {
-		ERR("Could not fetch configuration information\n");
-		goto emac_dev_init_exit;
-	}
-
-	init_status = 1;	/* instance created */
+	emac_net_get_config(dev);
 
 	/* init spin lock */
 	spin_lock_init(&dev->tx_lock);
@@ -2982,11 +2880,48 @@ static int emac_dev_init(struct net_devi
 	dev->link_speed = 100000000;
 	dev->link_mode = 1;
 
-	dev->regs = (volatile struct emac_regs *) dev->init_cfg.base_address;
-	dev->ewrap_regs = (volatile union ewrap_regs *)
-		dev->init_cfg.e_wrap_base_address;
-	dev->ewrap_ram = (char *)EMAC_WRAPPER_RAM_ADDR;
-	dev->ewrap_ram_size = EMAC_WRAPPER_RAM_SIZE;
+	/*
+	 * get resources
+	 */
+
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "ctrl_regs");
+	if (!res) {
+		err = -ENODEV;
+		goto emac_dev_init_exit;
+	}
+	dev->regs = (struct emac_regs *)IO_ADDRESS(res->start);
+	netdev->base_addr = res->start;
+
+	res = platform_get_resource_byname(pdev,
+			IORESOURCE_MEM, "wrapper_ctrl_regs");
+	if (!res) {
+		err = -ENODEV;
+		goto emac_dev_init_exit;
+	}
+	dev->ewrap_regs = (volatile union ewrap_regs *)IO_ADDRESS(res->start);
+
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "wrapper_ram");
+	if (!res) {
+		err = -ENODEV;
+		goto emac_dev_init_exit;
+	}
+	dev->ewrap_ram = (char *)IO_ADDRESS(res->start);
+	dev->ewrap_ram_size = res->end - res->start + 1;
+
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "mdio_regs");
+	if (!res) {
+		err = -ENODEV;
+		goto emac_dev_init_exit;
+	}
+	dev->mdio_base_address = IO_ADDRESS(res->start);
+
+	res = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
+	if (!res) {
+		err = -ENODEV;
+		goto emac_dev_init_exit;
+	}
+	netdev->irq = res->start;
+
 	dev->drv_state = DRV_CREATED;
 
 	/* initialize the timers for the net device - the timer will
@@ -3029,18 +2964,12 @@ static int emac_dev_init(struct net_devi
 		netdev->flags |= IFF_MULTICAST;
 
 	netif_carrier_off(netdev);
-	netdev->irq = dev->init_cfg.intr_line;
-
-	/* request memory region from the kernel */
-	netdev->base_addr = dev->init_cfg.base_address;
-	request_mem_region(netdev->base_addr, EMAC_DEFAULT_EMAC_SIZE,
-			   netdev->name);
 
 	return (0);
 
       emac_dev_init_exit:
 
-	return (-1);
+	return err;
 }
 
 /******************************************************************************
@@ -3050,26 +2979,64 @@ static int emac_dev_init(struct net_devi
 /* open the adapter */
 static int emac_dev_open(struct net_device *netdev)
 {
-	struct emac_dev *dev = NETDEV_PRIV(netdev);
-	int i;
+  	struct emac_dev *dev = NETDEV_PRIV(netdev);
+	struct platform_device *pdev =
+		to_platform_device(netdev->class_dev.dev);
+	struct resource *res;
+	int err;
+  	int i;
+	int ret_code;
 
-	if (emac_p_dev_enable(dev)) {
-		ERR("%s error: device could not OPEN\n", netdev->name);
-		return -1;
+	dev->set_to_close = 0;
+
+	/* create a TX channel */
+	ret_code = emac_ch_open(dev, &dev->tx_ch_info[0], NULL);
+
+	if (ret_code != EMAC_SUCCESS) {
+		ERR("%s error: Error %08X from EMAC TX Channel Open()\n",
+		    netdev->name, ret_code);
+
+		return -EINVAL;
+  	}
+
+	/* create a RX channel - note that last param contains mac address */
+	ret_code =
+	    emac_ch_open(dev, &dev->rx_ch_info[0], (void *)&dev->mac_addr[0]);
+	if (ret_code != EMAC_SUCCESS) {
+		ERR("%s error: Error %08X from EMAC RX Channel Open()\n",
+		    netdev->name, ret_code);
+
+		return -EINVAL;
 	}
 
-        /** NOTE: we can have multiple interrupt lines running to the CPU */
-        for (i = 0; i < dev->init_cfg.num_intr_lines; i++) {
-		int err = request_irq(dev->init_cfg.intr_line + i,
-				emac_hal_isr, SA_INTERRUPT,
-				dev->init_cfg.interrupt_name[i], dev);
-		if (err) {
-			ERR("Failed to register the irq %d for %s.\n",
-					dev->init_cfg.intr_line+i,
-					netdev->name);
-			return (-1);
-                }
-        }
+	/* open DDC instance */
+	ret_code = emac_open(dev, NULL);
+	if (ret_code != EMAC_SUCCESS) {
+		ERR("%s error: Error %08X from EMAC Open()\n",
+		    netdev->name, ret_code);
+
+		return -EINVAL;
+	}
+
+	/* we can have multiple interrupt lines running to the CPU */
+	for (i = 0; 1; i++) {
+
+		res = platform_get_resource(pdev, IORESOURCE_IRQ, i);
+		if (!res) {
+			if (i)
+				break;
+			else
+				goto error;
+		}
+
+		err = request_irq(res->start, emac_hal_isr, SA_INTERRUPT,
+				res->name, dev);
+  		if (err) {
+			pr_err("Failed to register the irq %d for %s\n",
+					res->start, res->name);
+			goto error;
+                  }
+          }
 
 	if (netif_carrier_ok(netdev))
 		netif_start_queue(netdev);
@@ -3078,24 +3045,70 @@ static int emac_dev_open(struct net_devi
 
 	dev->device_stats.start_tick = jiffies;
 	pr_debug("Started the network queue for %s.\n", netdev->name);
-	return (0);
+
+	return 0;
+
+error:
+	while (--i >= 0) {
+		res = platform_get_resource(pdev, IORESOURCE_IRQ, i);
+		if (!res)
+			break;
+
+		free_irq(res->start, dev);
+	}
+
+	return err;
 }
 
 /* close the adapter */
 static int emac_dev_close(struct net_device *netdev)
 {
 	struct emac_dev *dev = NETDEV_PRIV(netdev);
+	struct platform_device *pdev =
+		to_platform_device(netdev->class_dev.dev);
+	struct resource *res;
+	int ret_code;
 	int i;
 
-	emac_p_dev_disable(dev);
+	/* inform the upper layers. */
+	netif_stop_queue(dev->owner);
+
+	/* prepare to close */
+	set_bit(0, &dev->set_to_close);
+
+	/* closing the DDC instance will close all channels also */
+	ret_code = emac_close(dev, NULL);
+
+	if (ret_code != EMAC_SUCCESS) {
+		ERR("%s error: Error %08X from EMAC Close()\n",
+		    netdev->name, ret_code);
+		return -EIO;
+	} else {
+		/* DDC should turn off the timer, but just in case */
+		if (dev->timer_active != FALSE) {
+			del_timer_sync(&dev->periodic_timer);
+			dev->timer_active = FALSE;
+		}
+
+		pr_debug("Device %s Closed.\n", netdev->name);
+		dev->device_stats.start_tick = jiffies;
+		dev->link_speed = 100000000;
+		dev->link_mode = 1;
+		netif_carrier_off(netdev);
+	}
 
 	/* free ISR */
-	/* NOTE: we can have multiple interrupt lines running to the CPU */
-	for (i = 0; i < dev->init_cfg.num_intr_lines; i++) {
-		free_irq((dev->init_cfg.intr_line + i), dev);
+	/* we can have multiple interrupt lines running to the CPU */
+	for (i = 0; 1 ; i++) {
+
+		res = platform_get_resource(pdev, IORESOURCE_IRQ, i);
+		if (!res)
+			break;
+
+		free_irq(res->start, dev);
 	}
 
-	return (0);
+	return 0;
 }
 
 /* ioctl function */
@@ -3933,17 +3946,17 @@ static int emac_open(struct emac_dev *de
 	emac_set_mac_hw_cfg(dev);
 
 	/* start MDIO autonegotiation and set phy mode */
-	emac_mdio_get_ver(init_cfg->mdio_base_address,
+	emac_mdio_get_ver(dev->mdio_base_address,
 			  &mii_mod_id, &mii_rev_maj, &mii_rev_min);
 
 	LOGMSG(EMAC_DEBUG_PORT_UPDATE,
-	       "MII Module Id=%d, MII Base Address=%08X, Major Rev=%d, "
+	       "MII Module Id=%d, MII Base Address=%08lX, Major Rev=%d, "
 	       "Minor Rev=%d",
-	       mii_mod_id, init_cfg->mdio_base_address,
+	       mii_mod_id, dev->mdio_base_address,
 	       mii_rev_maj, mii_rev_min);
 
 	/* no failure code returned from this function */
-	emac_mdio_init(init_cfg->mdio_base_address,
+	emac_mdio_init(dev->mdio_base_address,
 		       init_cfg->phy_mask,
 		       init_cfg->m_link_mask,
 		       init_cfg->mdio_bus_frequency,
@@ -6510,7 +6523,6 @@ static int __devexit davinci_emac_remove
 	delete_proc_entries_for_dev(dev);
 
 	/* release memory region and unregister the device */
-	release_mem_region(netdev->base_addr, EMAC_DEFAULT_EMAC_SIZE);
 	unregister_netdev(netdev);
 
 	if (netdev)
Index: linux-2.6.18/mvl_patches/pro50-2127.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-2127.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2009 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(2127);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

