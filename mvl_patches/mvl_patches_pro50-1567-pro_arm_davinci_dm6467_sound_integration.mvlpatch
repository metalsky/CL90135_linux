#! /usr/bin/env bash
# Patch: -pro_arm_davinci_dm6467_sound_integration
# Date: Fri Sep 19 14:00:07 2008
# Source: MontaVista Software, Inc.
# MR: 28390
# Type: Integration
# Disposition: Need to submit to linux-davinci-2.6.git
# Signed-off-by: Steve Chen <schen@mvista.com>
# Description:
#     Sound support for DM6467.
# 
#  sound/soc/codecs/Kconfig              |    5 
#  sound/soc/codecs/Makefile             |    2 
#  sound/soc/codecs/codec_stubs.c        |   48 +++
#  sound/soc/codecs/codec_stubs.h        |   22 +
#  sound/soc/codecs/tlv320aic3x.c        |    4 
#  sound/soc/davinci/Kconfig             |   19 +
#  sound/soc/davinci/Makefile            |    3 
#  sound/soc/davinci/davinci-evm.c       |  149 +++++++++-
#  sound/soc/davinci/davinci-i2s-mcasp.c |  472 ++++++++++++++++++++++++++++++++++
#  sound/soc/davinci/davinci-i2s-mcasp.h |  285 ++++++++++++++++++++
#  sound/soc/davinci/davinci-i2s-mcbsp.c |  263 ++++++++++++++++++
#  sound/soc/davinci/davinci-i2s-mcbsp.h |   63 ++++
#  sound/soc/davinci/davinci-i2s.c       |  465 ++++++++-------------------------
#  sound/soc/davinci/davinci-i2s.h       |   33 ++
#  sound/soc/davinci/davinci-pcm.c       |    9 
#  sound/soc/davinci/davinci-pcm.h       |   21 +
#  16 files changed, 1486 insertions(+), 377 deletions(-)
# 

PATCHNUM=1567
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 28390
Type: Integration
Disposition: Need to submit to linux-davinci-2.6.git
Signed-off-by: Steve Chen <schen@mvista.com>
Description:
    Sound support for DM6467.

 mvl_patches/pro50-1567.c              |   16 +
 sound/soc/codecs/Kconfig              |    5 
 sound/soc/codecs/Makefile             |    2 
 sound/soc/codecs/codec_stubs.c        |   48 +++
 sound/soc/codecs/codec_stubs.h        |   22 +
 sound/soc/codecs/tlv320aic3x.c        |    4 
 sound/soc/davinci/Kconfig             |   19 +
 sound/soc/davinci/Makefile            |    3 
 sound/soc/davinci/davinci-evm.c       |  149 +++++++++-
 sound/soc/davinci/davinci-i2s-mcasp.c |  472 ++++++++++++++++++++++++++++++++++
 sound/soc/davinci/davinci-i2s-mcasp.h |  285 ++++++++++++++++++++
 sound/soc/davinci/davinci-i2s-mcbsp.c |  263 ++++++++++++++++++
 sound/soc/davinci/davinci-i2s-mcbsp.h |   63 ++++
 sound/soc/davinci/davinci-i2s.c       |  465 ++++++++-------------------------
 sound/soc/davinci/davinci-i2s.h       |   33 ++
 sound/soc/davinci/davinci-pcm.c       |    9 
 sound/soc/davinci/davinci-pcm.h       |   21 +
 17 files changed, 1502 insertions(+), 377 deletions(-)

Index: linux-2.6.18/sound/soc/codecs/Kconfig
===================================================================
--- linux-2.6.18.orig/sound/soc/codecs/Kconfig
+++ linux-2.6.18/sound/soc/codecs/Kconfig
@@ -40,3 +40,8 @@ config SND_SOC_CS4270_VD33_ERRATA
 config SND_SOC_TLV320AIC3X
 	tristate
 	depends on SND_SOC && I2C
+
+config SND_SOC_CODEC_STUBS
+	tristate
+	depends on SND_SOC && I2C
+
Index: linux-2.6.18/sound/soc/codecs/Makefile
===================================================================
--- linux-2.6.18.orig/sound/soc/codecs/Makefile
+++ linux-2.6.18/sound/soc/codecs/Makefile
@@ -5,6 +5,7 @@ snd-soc-wm8753-objs := wm8753.o
 snd-soc-wm9712-objs := wm9712.o
 snd-soc-cs4270-objs := cs4270.o
 snd-soc-tlv320aic3x-objs := tlv320aic3x.o
+snd-soc-codec_stubs-objs := codec_stubs.o
 
 obj-$(CONFIG_SND_SOC_AC97_CODEC)	+= snd-soc-ac97.o
 obj-$(CONFIG_SND_SOC_WM8731)	+= snd-soc-wm8731.o
@@ -13,3 +14,4 @@ obj-$(CONFIG_SND_SOC_WM8753)	+= snd-soc-
 obj-$(CONFIG_SND_SOC_WM9712)	+= snd-soc-wm9712.o
 obj-$(CONFIG_SND_SOC_CS4270)	+= snd-soc-cs4270.o
 obj-$(CONFIG_SND_SOC_TLV320AIC3X)	+= snd-soc-tlv320aic3x.o
+obj-$(CONFIG_SND_SOC_CODEC_STUBS)	+= snd-soc-codec_stubs.o
Index: linux-2.6.18/sound/soc/codecs/codec_stubs.c
===================================================================
--- /dev/null
+++ linux-2.6.18/sound/soc/codecs/codec_stubs.c
@@ -0,0 +1,48 @@
+/*
+ * ALSA SoC DaVinci DIT/DIR driver
+ *
+ *  TI DaVinci audio controller can operate in DIT/DIR (SPDI/F) where
+ *  no codec is needed.  This file provides stub codec that can be used
+ *  in these configurations.
+ *
+ * Author:      Steve Chen,  <schen@mvista.com>
+ * Copyright:   (C) 2008 MontaVista Software, Inc., <source@mvista.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <sound/soc.h>
+#include <sound/pcm.h>
+
+#define STUB_RATES	SNDRV_PCM_RATE_8000_96000
+#define STUB_FORMATS	(SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S20_3LE | \
+			SNDRV_PCM_FMTBIT_S24_3LE | SNDRV_PCM_FMTBIT_S32_LE)
+
+struct snd_soc_codec_dai dit_stub_dai[] = {
+	{
+		.name = "DIT",
+		.playback = {
+			.stream_name = "Playback",
+			.channels_min = 1,
+			.channels_max = 384,
+			.rates = STUB_RATES,
+			.formats = STUB_FORMATS,
+		},
+	}
+};
+
+struct snd_soc_codec_dai dir_stub_dai[] = {
+	{
+		.name = "DIR",
+		.capture = {
+			.stream_name = "Capture",
+			.channels_min = 1,
+			.channels_max = 384,
+			.rates = STUB_RATES,
+			.formats = STUB_FORMATS,
+		},
+	}
+};
Index: linux-2.6.18/sound/soc/codecs/codec_stubs.h
===================================================================
--- /dev/null
+++ linux-2.6.18/sound/soc/codecs/codec_stubs.h
@@ -0,0 +1,22 @@
+/*
+ * ALSA SoC DIT/DIR driver header
+ *
+ * Author:      Steve Chen,  <schen@mvista.com>
+ * Copyright:   (C) 2008 MontaVista Software, Inc., <source@mvista.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+#ifndef CODEC_STUBS_H
+#define CODEC_STUBS_H
+
+#ifdef CONFIG_SND_SOC_CODEC_STUBS
+extern struct snd_soc_codec_dai dit_stub_dai[];
+extern struct snd_soc_codec_dai dir_stub_dai[];
+#else
+#define dit_stub_dai	NULL
+#define dir_stub_dai	NULL
+#endif
+
+#endif /* CODEC_STUBS_H */
Index: linux-2.6.18/sound/soc/codecs/tlv320aic3x.c
===================================================================
--- linux-2.6.18.orig/sound/soc/codecs/tlv320aic3x.c
+++ linux-2.6.18/sound/soc/codecs/tlv320aic3x.c
@@ -1108,8 +1108,8 @@ static int aic3x_init(struct snd_soc_dev
 	aic3x_write(codec, MIC3LR_2_RADC_CTRL, 0xF0);
 
 	/* By default route Line1 to ADC PGA mixer */
-	aic3x_write(codec, LINE1L_2_LADC_CTRL, 0x0);
-	aic3x_write(codec, LINE1R_2_RADC_CTRL, 0x0);
+	aic3x_write(codec, LINE1L_2_LADC_CTRL, 0x40);
+	aic3x_write(codec, LINE1R_2_RADC_CTRL, 0x40);
 
 	/* PGA to HP Bypass default volume, disconnect from Output Mixer */
 	aic3x_write(codec, PGAL_2_HPLOUT_VOL, DEFAULT_VOL);
Index: linux-2.6.18/sound/soc/davinci/Kconfig
===================================================================
--- linux-2.6.18.orig/sound/soc/davinci/Kconfig
+++ linux-2.6.18/sound/soc/davinci/Kconfig
@@ -9,10 +9,16 @@ config SND_DAVINCI_SOC
 config SND_DAVINCI_SOC_I2S
 	tristate
 
+config SND_DAVINCI_SOC_I2S_MCBSP
+	tristate
+
+config SND_DAVINCI_SOC_I2S_MCASP
+	tristate
 config SND_DM644X_SOC_EVM
 	tristate "SoC Audio support for DaVinci EVM"
 	depends on SND_DAVINCI_SOC && MACH_DAVINCI_EVM
 	select SND_DAVINCI_SOC_I2S
+	select SND_DAVINCI_SOC_I2S_MCBSP
 	select SND_SOC_TLV320AIC3X
 	help
 	  Say Y if you want to add support for SoC audio on TI
@@ -22,7 +28,20 @@ config SND_DM355_SOC_EVM
 	tristate "SoC Audio support for DaVinci DM355 EVM"
 	depends on SND_DAVINCI_SOC && MACH_DAVINCI_DM355_EVM
 	select SND_DAVINCI_SOC_I2S
+	select SND_DAVINCI_SOC_I2S_MCBSP
 	select SND_SOC_TLV320AIC3X
 	help
 	  Say Y if you want to add support for SoC audio on TI
 	  DaVinci DM355 EVM platform.
+
+config SND_DM6467_SOC_EVM
+	tristate "SoC Audio support for DaVinci DM6467 EVM"
+	depends on SND_DAVINCI_SOC && MACH_DAVINCI_DM6467_EVM
+	select SND_DAVINCI_SOC_I2S
+	select SND_DAVINCI_SOC_I2S_MCASP
+	select SND_DAVINCI_SOC_I2S_MCBSP
+	select SND_SOC_TLV320AIC3X
+	select SND_SOC_CODEC_STUBS
+	help
+	  Say Y if you want to add support for SoC audio on TI
+	  DaVinci DM646x EVM platform.
Index: linux-2.6.18/sound/soc/davinci/Makefile
===================================================================
--- linux-2.6.18.orig/sound/soc/davinci/Makefile
+++ linux-2.6.18/sound/soc/davinci/Makefile
@@ -4,9 +4,12 @@ snd-soc-davinci-i2s-objs := davinci-i2s.
 
 obj-$(CONFIG_SND_DAVINCI_SOC) += snd-soc-davinci.o
 obj-$(CONFIG_SND_DAVINCI_SOC_I2S) += snd-soc-davinci-i2s.o
+obj-$(CONFIG_SND_DAVINCI_SOC_I2S_MCBSP) += davinci-i2s-mcbsp.o
+obj-$(CONFIG_SND_DAVINCI_SOC_I2S_MCASP) += davinci-i2s-mcasp.o
 
 # DAVINCI Machine Support
 snd-soc-evm-objs := davinci-evm.o
 
 obj-$(CONFIG_SND_DM644X_SOC_EVM) += snd-soc-evm.o
 obj-$(CONFIG_SND_DM355_SOC_EVM) += snd-soc-evm.o
+obj-$(CONFIG_SND_DM6467_SOC_EVM) += snd-soc-evm.o
Index: linux-2.6.18/sound/soc/davinci/davinci-evm.c
===================================================================
--- linux-2.6.18.orig/sound/soc/davinci/davinci-evm.c
+++ linux-2.6.18/sound/soc/davinci/davinci-evm.c
@@ -25,11 +25,15 @@
 #include <asm/arch/hardware.h>
 
 #include "../codecs/tlv320aic3x.h"
+#include "../codecs/codec_stubs.h"
 #include "davinci-pcm.h"
 #include "davinci-i2s.h"
+#include "davinci-i2s-mcbsp.h"
+#include "davinci-i2s-mcasp.h"
 
 #define DM644X_EVM_CODEC_CLOCK 22579200
 #define DM355_EVM_CODEC_CLOCK 27000000
+#define DM646X_EVM_CODEC_CLOCK 27000000
 
 static unsigned int evm_codec_clock;
 
@@ -39,23 +43,25 @@ static int evm_hw_params(struct snd_pcm_
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
 	struct snd_soc_codec_dai *codec_dai = rtd->dai->codec_dai;
 	struct snd_soc_cpu_dai *cpu_dai = rtd->dai->cpu_dai;
+	struct davinci_audio_dev *dev = rtd->dai->cpu_dai->private_data;
 	int ret = 0;
 
 	/* set codec DAI configuration */
-	ret = codec_dai->dai_ops.set_fmt(codec_dai, SND_SOC_DAIFMT_I2S |
-					 SND_SOC_DAIFMT_CBM_CFM);
+	if (codec_dai->dai_ops.set_fmt != NULL)
+		ret = codec_dai->dai_ops.set_fmt(codec_dai, SND_SOC_DAIFMT_I2S |
+						 SND_SOC_DAIFMT_CBM_CFM);
 	if (ret < 0)
 		return ret;
 
 	/* set cpu DAI configuration */
-	ret = cpu_dai->dai_ops.set_fmt(cpu_dai, SND_SOC_DAIFMT_CBM_CFM |
-				       SND_SOC_DAIFMT_IB_NF);
+	ret = cpu_dai->dai_ops.set_fmt(cpu_dai, dev->codec_fmt);
 	if (ret < 0)
 		return ret;
 
 	/* set the codec system clock */
-	ret = codec_dai->dai_ops.set_sysclk(codec_dai, 0, evm_codec_clock,
-					    SND_SOC_CLOCK_OUT);
+	if (codec_dai->dai_ops.set_sysclk != NULL)
+		ret = codec_dai->dai_ops.set_sysclk(codec_dai, 0,
+				evm_codec_clock, SND_SOC_CLOCK_OUT);
 
 	if (ret < 0)
 		return ret;
@@ -130,19 +136,37 @@ static int evm_aic3x_init(struct snd_soc
 }
 
 /* davinci-evm digital audio interface glue - connects codec <--> CPU */
-static struct snd_soc_dai_link evm_dai = {
+static struct snd_soc_dai_link davinci_evm_dai = {
 	.name = "TLV320AIC3X",
 	.stream_name = "AIC3X",
-	.cpu_dai = &davinci_i2s_dai,
+	.cpu_dai = davinci_i2s_dai,
 	.codec_dai = &aic3x_dai,
 	.init = evm_aic3x_init,
 	.ops = &evm_ops,
 };
 
+static struct snd_soc_dai_link dm646x_evm_dai[] = {
+	{
+		.name = "TLV320AIC3X",
+		.stream_name = "AIC3X",
+		.cpu_dai = davinci_iis_mcasp_dai,
+		.codec_dai = &aic3x_dai,
+		.init = evm_aic3x_init,
+		.ops = &evm_ops,
+	},
+	{
+		.name = "MCASP SPDIF",
+		.stream_name = "spdif",
+		.cpu_dai = davinci_dit_mcasp_dai,
+		.codec_dai = dit_stub_dai,
+		.ops = &evm_ops,
+	},
+};
+
 /* davinci dm644x evm audio machine driver */
-static struct snd_soc_machine dm646x_snd_soc_machine_evm = {
+static struct snd_soc_machine dm644x_snd_soc_machine_evm = {
 	.name = "DaVinci EVM",
-	.dai_link = &evm_dai,
+	.dai_link = &davinci_evm_dai,
 	.num_links = 1,
 };
 
@@ -153,7 +177,7 @@ static struct aic3x_setup_data dm644x_ev
 
 /* evm audio subsystem */
 static struct snd_soc_device dm644x_evm_snd_devdata = {
-	.machine = &dm646x_snd_soc_machine_evm,
+	.machine = &dm644x_snd_soc_machine_evm,
 	.platform = &davinci_soc_platform,
 	.codec_dev = &soc_codec_dev_aic3x,
 	.codec_data = &dm644x_evm_aic3x_setup,
@@ -171,12 +195,16 @@ static struct evm_snd_platform_data dm64
 	.clk_name	= "McBSPCLK",
 	.tx_dma_ch	= DM644X_DMACH_MCBSP_TX,
 	.rx_dma_ch	= DM644X_DMACH_MCBSP_RX,
+	.tx_dma_offset	= DAVINCI_MCBSP_DXR_REG,
+	.rx_dma_offset	= DAVINCI_MCBSP_DRR_REG,
+	.codec_fmt	= SND_SOC_DAIFMT_CBM_CFM | SND_SOC_DAIFMT_IB_NF,
+	.eventq_no	= EVENTQ_0,
 };
 
 /* davinci dm355 evm audio machine driver */
 static struct snd_soc_machine dm355_snd_soc_machine_evm = {
 	.name = "DaVinci DM355 EVM",
-	.dai_link = &evm_dai,
+	.dai_link = &davinci_evm_dai,
 	.num_links = 1,
 };
 
@@ -205,28 +233,106 @@ static struct evm_snd_platform_data dm35
 	.clk_name	= "McBSPCLK1",
 	.tx_dma_ch	= DM355_DMA_MCBSP1_TX,
 	.rx_dma_ch	= DM355_DMA_MCBSP1_RX,
+	.tx_dma_offset	= DAVINCI_MCBSP_DXR_REG,
+	.rx_dma_offset	= DAVINCI_MCBSP_DRR_REG,
+	.codec_fmt	= SND_SOC_DAIFMT_CBM_CFM | SND_SOC_DAIFMT_IB_NF,
+	.eventq_no	= EVENTQ_0,
+};
+
+/* davinci dm646x evm audio machine driver */
+static struct snd_soc_machine dm646x_snd_soc_machine_evm = {
+	.name = "DaVinci DM6467 EVM",
+	.dai_link = dm646x_evm_dai,
+	.num_links = 2,
+};
+
+/* evm audio private data */
+static struct aic3x_setup_data dm646x_evm_aic3x_setup = {
+	.i2c_address = 0x18,
+};
+
+/* evm audio subsystem */
+static struct snd_soc_device dm646x_evm_snd_devdata[] = {
+	{
+		.machine = &dm646x_snd_soc_machine_evm,
+		.platform = &davinci_soc_platform,
+		.codec_dev = &soc_codec_dev_aic3x,
+		.codec_data = &dm646x_evm_aic3x_setup,
+	},
+};
+
+static struct resource dm646x_evm_snd_resources[] = {
+	{
+		.start = DAVINCI_DM646X_MCASP0_REG_BASE,
+		.end = DAVINCI_DM646X_MCASP0_REG_BASE + (SZ_1K << 1) - 1,
+		.flags = IORESOURCE_MEM,
+	},
+	{
+		.start = DAVINCI_DM646X_MCASP1_REG_BASE,
+		.end = DAVINCI_DM646X_MCASP1_REG_BASE + (SZ_1K << 1) - 1,
+		.flags = IORESOURCE_MEM,
+	},
+};
+
+static u8 dm646x_iis_serializer_direction[] = {
+	TX_MODE, RX_MODE, INACTIVE_MODE, INACTIVE_MODE,
+};
+
+static u8 dm646x_dit_serializer_direction[] = {
+	TX_MODE, INACTIVE_MODE, INACTIVE_MODE, INACTIVE_MODE,
+};
+
+static struct evm_snd_platform_data dm646x_evm_snd_data[] = {
+	{
+		.clk_name	= "McASPCLK0",
+		.tx_dma_ch	= DAVINCI_DM646X_DMA_MCASP0_AXEVT0,
+		.rx_dma_ch	= DAVINCI_DM646X_DMA_MCASP0_AREVT0,
+		.tx_dma_offset	= 0x400,
+		.rx_dma_offset	= 0x400,
+		.op_mode	= DAVINCI_MCASP_IIS_MODE,
+		.num_serializer	= 4,
+		.tdm_slots	= 2,
+		.serial_dir	= dm646x_iis_serializer_direction,
+		.eventq_no	= EVENTQ_3,
+		.codec_fmt	= SND_SOC_DAIFMT_CBM_CFM | SND_SOC_DAIFMT_IB_NF,
+	},
+	{
+		.clk_name	= "McASPCLK1",
+		.tx_dma_ch	= DAVINCI_DM646X_DMA_MCASP1_AXEVT1,
+		.rx_dma_ch	= -1,
+		.tx_dma_offset	= 0x400,
+		.rx_dma_offset	= 0,
+		.op_mode	= DAVINCI_MCASP_DIT_MODE,
+		.num_serializer	= 4,
+		.tdm_slots	= 32,
+		.serial_dir	= dm646x_dit_serializer_direction,
+		.eventq_no	= EVENTQ_3,
+		.codec_fmt	= SND_SOC_DAIFMT_CBS_CFS | SND_SOC_DAIFMT_IB_NF,
+	},
 };
 
 static struct platform_device *evm_snd_device;
 
 static int __init evm_init(void)
 {
-	int ret;
+	int ret = 0;
 	int res_size;
 	struct snd_soc_device *evm_snd_devdata;
 	struct resource *evm_snd_resources;
 	struct evm_snd_platform_data *evm_snd_data;
 
-	evm_snd_device = platform_device_alloc("soc-audio", 0);
-	if (!evm_snd_device)
-		return -ENOMEM;
-
 	if (cpu_is_davinci_dm355()) {
 		evm_snd_devdata = &dm355_evm_snd_devdata;
 		evm_snd_resources = dm355_evm_snd_resources;
 		res_size = ARRAY_SIZE(dm355_evm_snd_resources);
 		evm_snd_data = &dm355_evm_snd_data;
 		evm_codec_clock = DM355_EVM_CODEC_CLOCK;
+	} else if (cpu_is_davinci_dm6467()) {
+		evm_snd_devdata = dm646x_evm_snd_devdata;
+		evm_snd_resources = dm646x_evm_snd_resources;
+		res_size = ARRAY_SIZE(dm646x_evm_snd_resources);
+		evm_snd_data = dm646x_evm_snd_data;
+		evm_codec_clock = DM646X_EVM_CODEC_CLOCK;
 	} else {
 		evm_snd_devdata = &dm644x_evm_snd_devdata;
 		evm_snd_resources = dm644x_evm_snd_resources;
@@ -235,12 +341,17 @@ static int __init evm_init(void)
 		evm_codec_clock = DM644X_EVM_CODEC_CLOCK;
 	}
 
+	evm_snd_device = platform_device_alloc("soc-audio", -1);
+	if (!evm_snd_device)
+		return -ENOMEM;
+
 	platform_set_drvdata(evm_snd_device, evm_snd_devdata);
 	evm_snd_devdata->dev = &evm_snd_device->dev;
 	evm_snd_device->dev.platform_data = evm_snd_data;
 
-	ret = platform_device_add_resources(evm_snd_device, evm_snd_resources,
-					    res_size);
+	ret = platform_device_add_resources(evm_snd_device,
+					    evm_snd_resources, res_size);
+
 	if (ret) {
 		platform_device_put(evm_snd_device);
 		return ret;
Index: linux-2.6.18/sound/soc/davinci/davinci-i2s-mcasp.c
===================================================================
--- /dev/null
+++ linux-2.6.18/sound/soc/davinci/davinci-i2s-mcasp.c
@@ -0,0 +1,472 @@
+/*
+ * ALSA SoC I2S (McASP) Audio Layer for TI DAVINCI processor
+ *
+ * Author: Nirmal Pandey <n-pandey@ti.com>,
+ *         Suresh Rajashekara <suresh.r@ti.com>
+ *         Steve Chen, <schen@.mvista.com>
+ *
+ * Copyright:   (C) 2008 MontaVista Software, Inc., <source@mvista.com>
+ * Copyright:   (C) 2007  Texas Instruments, India
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/device.h>
+#include <linux/delay.h>
+#include <linux/io.h>
+#include <linux/clk.h>
+
+#include <sound/driver.h>
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/initval.h>
+#include <sound/soc.h>
+
+#include "davinci-pcm.h"
+#include "davinci-i2s.h"
+#include "davinci-i2s-mcasp.h"
+
+static inline void mcasp_set_bits(void __iomem *reg, u32 val)
+{
+	outl(inl(reg) | val, reg);
+}
+
+static inline void mcasp_clr_bits(void __iomem *reg, u32 val)
+{
+	outl((inl(reg) & ~(val)), reg);
+}
+
+static inline void mcasp_mod_bits(void __iomem *reg, u32 val, u32 mask)
+{
+	outl((inl(reg) & ~mask) | val, reg);
+}
+
+static inline void mcasp_set_reg(void __iomem *reg, u32 val)
+{
+	outl(val, reg);
+}
+
+static inline u32 mcasp_get_reg(void __iomem *reg)
+{
+	return inl(reg);
+}
+
+static inline void mcasp_set_ctl_reg(void __iomem *regs, u32 val)
+{
+	mcasp_set_bits(regs, val);
+	while ((mcasp_get_reg(regs) & val) != val);
+}
+
+void mcasp_start_rx(struct davinci_audio_dev *dev)
+{
+	mcasp_set_ctl_reg(dev->base + DAVINCI_MCASP_GBLCTLR_REG, RXHCLKRST);
+	mcasp_set_ctl_reg(dev->base + DAVINCI_MCASP_GBLCTLR_REG, RXCLKRST);
+	mcasp_set_ctl_reg(dev->base + DAVINCI_MCASP_GBLCTLR_REG, RXSERCLR);
+	mcasp_set_reg(dev->base + DAVINCI_MCASP_RXBUF_REG, 0);
+
+	mcasp_set_ctl_reg(dev->base + DAVINCI_MCASP_GBLCTLR_REG, RXSMRST);
+	mcasp_set_ctl_reg(dev->base + DAVINCI_MCASP_GBLCTLR_REG, RXFSRST);
+	mcasp_set_reg(dev->base + DAVINCI_MCASP_RXBUF_REG, 0);
+
+	mcasp_set_ctl_reg(dev->base + DAVINCI_MCASP_GBLCTLR_REG, RXSMRST);
+	mcasp_set_ctl_reg(dev->base + DAVINCI_MCASP_GBLCTLR_REG, RXFSRST);
+}
+
+void mcasp_start_tx(struct davinci_audio_dev *dev)
+{
+	mcasp_set_ctl_reg(dev->base + DAVINCI_MCASP_GBLCTLX_REG, TXHCLKRST);
+	mcasp_set_ctl_reg(dev->base + DAVINCI_MCASP_GBLCTLX_REG, TXCLKRST);
+	mcasp_set_ctl_reg(dev->base + DAVINCI_MCASP_GBLCTLX_REG, TXSERCLR);
+	mcasp_set_reg(dev->base + DAVINCI_MCASP_TXBUF_REG, 0);
+
+	mcasp_set_ctl_reg(dev->base + DAVINCI_MCASP_GBLCTLX_REG, TXSMRST);
+	mcasp_set_ctl_reg(dev->base + DAVINCI_MCASP_GBLCTLX_REG, TXFSRST);
+	mcasp_set_reg(dev->base + DAVINCI_MCASP_TXBUF_REG, 0);
+
+	/* wait for TX ready */
+	while (!(mcasp_get_reg(dev->base + DAVINCI_MCASP_XRSRCTL_REG(0)) &
+		 TXSTATE));
+
+	mcasp_set_reg(dev->base + DAVINCI_MCASP_TXBUF_REG, 0);
+}
+
+static void davinci_mcasp_start(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct davinci_audio_dev *dev = rtd->dai->cpu_dai->private_data;
+
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
+		mcasp_start_tx(dev);
+	else
+		mcasp_start_rx(dev);
+}
+
+void mcasp_stop_rx(struct davinci_audio_dev *dev)
+{
+	mcasp_set_reg(dev->base + DAVINCI_MCASP_GBLCTLR_REG, 0);
+	mcasp_set_reg(dev->base + DAVINCI_MCASP_RXSTAT_REG, 0xFFFFFFFF);
+}
+
+void mcasp_stop_tx(struct davinci_audio_dev *dev)
+{
+	mcasp_set_reg(dev->base + DAVINCI_MCASP_GBLCTLX_REG, 0);
+	mcasp_set_reg(dev->base + DAVINCI_MCASP_TXSTAT_REG, 0xFFFFFFFF);
+}
+
+static void davinci_mcasp_stop(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct davinci_audio_dev *dev = rtd->dai->cpu_dai->private_data;
+
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
+		mcasp_stop_tx(dev);
+	else
+		mcasp_stop_rx(dev);
+}
+
+static int davinci_i2s_mcasp_set_dai_fmt(struct snd_soc_cpu_dai *cpu_dai,
+					 unsigned int fmt)
+{
+	struct davinci_audio_dev *dev = cpu_dai->private_data;
+	void __iomem *base = dev->base;
+
+	switch (fmt & SND_SOC_DAIFMT_MASTER_MASK) {
+	case SND_SOC_DAIFMT_CBS_CFS:
+		/* codec is clock and frame slave */
+		mcasp_set_bits(base + DAVINCI_MCASP_ACLKXCTL_REG, ACLKXE);
+		mcasp_set_bits(base + DAVINCI_MCASP_TXFMCTL_REG, AFSXE);
+
+		mcasp_set_bits(base + DAVINCI_MCASP_ACLKRCTL_REG, ACLKRE);
+		mcasp_set_bits(base + DAVINCI_MCASP_RXFMCTL_REG, AFSRE);
+
+		mcasp_set_bits(base + DAVINCI_MCASP_PDIR_REG, (0x7 << 26));
+		break;
+	case SND_SOC_DAIFMT_CBM_CFM:
+		/* codec is clock and frame master */
+		mcasp_clr_bits(base + DAVINCI_MCASP_ACLKXCTL_REG, ACLKXE);
+		mcasp_clr_bits(base + DAVINCI_MCASP_TXFMCTL_REG, AFSXE);
+
+		mcasp_clr_bits(base + DAVINCI_MCASP_ACLKRCTL_REG, ACLKRE);
+		mcasp_clr_bits(base + DAVINCI_MCASP_RXFMCTL_REG, AFSRE);
+
+		mcasp_clr_bits(base + DAVINCI_MCASP_PDIR_REG, (0x3f << 26));
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	switch (fmt & SND_SOC_DAIFMT_INV_MASK) {
+	case SND_SOC_DAIFMT_IB_NF:
+		mcasp_clr_bits(base + DAVINCI_MCASP_ACLKXCTL_REG, ACLKXPOL);
+		mcasp_clr_bits(base + DAVINCI_MCASP_TXFMCTL_REG, FSXPOL);
+
+		mcasp_set_bits(base + DAVINCI_MCASP_ACLKRCTL_REG, ACLKRPOL);
+		mcasp_clr_bits(base + DAVINCI_MCASP_RXFMCTL_REG, FSRPOL);
+		break;
+	case SND_SOC_DAIFMT_NB_IF:
+		mcasp_set_bits(base + DAVINCI_MCASP_ACLKXCTL_REG, ACLKXPOL);
+		mcasp_set_bits(base + DAVINCI_MCASP_TXFMCTL_REG, FSXPOL);
+
+		mcasp_clr_bits(base + DAVINCI_MCASP_ACLKRCTL_REG, ACLKRPOL);
+		mcasp_set_bits(base + DAVINCI_MCASP_RXFMCTL_REG, FSRPOL);
+		break;
+	case SND_SOC_DAIFMT_IB_IF:
+		mcasp_clr_bits(base + DAVINCI_MCASP_ACLKXCTL_REG, ACLKXPOL);
+		mcasp_set_bits(base + DAVINCI_MCASP_TXFMCTL_REG, FSXPOL);
+
+		mcasp_set_bits(base + DAVINCI_MCASP_ACLKRCTL_REG, ACLKRPOL);
+		mcasp_set_bits(base + DAVINCI_MCASP_RXFMCTL_REG, FSRPOL);
+		break;
+	case SND_SOC_DAIFMT_NB_NF:
+		mcasp_set_bits(base + DAVINCI_MCASP_ACLKXCTL_REG, ACLKXPOL);
+		mcasp_clr_bits(base + DAVINCI_MCASP_TXFMCTL_REG, FSXPOL);
+
+		mcasp_clr_bits(base + DAVINCI_MCASP_ACLKRCTL_REG, ACLKRPOL);
+		mcasp_clr_bits(base + DAVINCI_MCASP_RXFMCTL_REG, FSRPOL);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int davinci_config_channel_size(struct snd_pcm_substream *substream,
+				       int channel_size)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct davinci_audio_dev *dev = rtd->dai->cpu_dai->private_data;
+	u32 fmt = 0;
+
+	switch (channel_size) {
+	case DAVINCI_AUDIO_WORD_8:
+		fmt = 0x03 << 4;
+		break;
+
+	case DAVINCI_AUDIO_WORD_12:
+		fmt = 0x05 << 4;
+		break;
+
+	case DAVINCI_AUDIO_WORD_16:
+		fmt = 0x07 << 4;
+		break;
+
+	case DAVINCI_AUDIO_WORD_20:
+		fmt = 0x09 << 4;
+		break;
+
+	case DAVINCI_AUDIO_WORD_24:
+		fmt = 0x0B << 4;
+		break;
+
+	case DAVINCI_AUDIO_WORD_28:
+		fmt = 0x0D << 4;
+		break;
+
+	case DAVINCI_AUDIO_WORD_32:
+		fmt = 0x0F << 4;
+		break;
+
+	default:
+		return -1;
+	}
+
+	mcasp_mod_bits(dev->base + DAVINCI_MCASP_RXFMT_REG, fmt, (0x0F << 4));
+	mcasp_mod_bits(dev->base + DAVINCI_MCASP_TXFMT_REG, fmt, (0x0F << 4));
+	return 0;
+}
+
+static void davinci_hw_common_param(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct davinci_audio_dev *dev = rtd->dai->cpu_dai->private_data;
+	int i;
+
+	/* Default configuration */
+	mcasp_set_bits(dev->base + DAVINCI_MCASP_PWREMUMGT_REG, SOFT);
+
+	/* All PINS as McASP */
+	mcasp_set_reg(dev->base + DAVINCI_MCASP_PFUNC_REG, 0x00000000);
+
+	/* Clear out status registers */
+	mcasp_set_reg(dev->base + DAVINCI_MCASP_RXSTAT_REG, 0xFFFFFFFF);
+	mcasp_set_reg(dev->base + DAVINCI_MCASP_TXSTAT_REG, 0xFFFFFFFF);
+
+	/* enable DMA */
+	mcasp_clr_bits(dev->base + DAVINCI_MCASP_REVTCTL_REG, RXDATADMADIS);
+	mcasp_clr_bits(dev->base + DAVINCI_MCASP_XEVTCTL_REG, TXDATADMADIS);
+
+	for (i = 0; i < dev->num_serializer; i++) {
+		mcasp_set_bits(dev->base + DAVINCI_MCASP_XRSRCTL_REG(i),
+			       dev->serial_dir[i]);
+		if (dev->serial_dir[i] == TX_MODE)
+			mcasp_set_bits(dev->base + DAVINCI_MCASP_PDIR_REG,
+				       AXR(i));
+		else if (dev->serial_dir[i] == RX_MODE)
+			mcasp_clr_bits(dev->base + DAVINCI_MCASP_PDIR_REG,
+				       AXR(i));
+	}
+}
+static void davinci_hw_iis_param(struct snd_pcm_substream *substream)
+{
+	int i, active_slots;
+	u32 mask = 0;
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct davinci_audio_dev *dev = rtd->dai->cpu_dai->private_data;
+
+	/* bit stream is MSB first */
+	mcasp_set_bits(dev->base + DAVINCI_MCASP_TXFMT_REG, TXORD);
+
+	/* bit stream is MSB first with no delay */
+	mcasp_set_bits(dev->base + DAVINCI_MCASP_RXFMT_REG, FSRDLY(1) | RXORD);
+
+	mcasp_set_bits(dev->base + DAVINCI_MCASP_AHCLKXCTL_REG, AHCLKXE);
+	mcasp_set_bits(dev->base + DAVINCI_MCASP_AHCLKRCTL_REG, AHCLKRE);
+
+	active_slots = (dev->tdm_slots > 31) ? 32 : dev->tdm_slots;
+	for (i = 0; i < active_slots; i++)
+		mask |= (1 << i);
+
+	mcasp_set_reg(dev->base + DAVINCI_MCASP_RXTDM_REG, mask);
+	mcasp_set_reg(dev->base + DAVINCI_MCASP_TXTDM_REG, mask);
+
+	/* note only 2-32 slots currently supported in HW */
+	if ((dev->tdm_slots >= 2) || (dev->tdm_slots <= 32)) {
+		mcasp_mod_bits(dev->base + DAVINCI_MCASP_RXFMCTL_REG,
+			       FSRMOD(dev->tdm_slots), FSRMOD(0x1FF));
+		mcasp_mod_bits(dev->base + DAVINCI_MCASP_TXFMCTL_REG,
+			       FSXMOD(dev->tdm_slots), FSXMOD(0x1FF));
+	} else
+		printk(KERN_ERR "tdm slot %d not supported\n", dev->tdm_slots);
+
+	mcasp_set_reg(dev->base + DAVINCI_MCASP_RXMASK_REG, 0xFFFFFFFF);
+	mcasp_set_reg(dev->base + DAVINCI_MCASP_TXMASK_REG, 0xFFFFFFFF);
+
+	mcasp_clr_bits(dev->base + DAVINCI_MCASP_RXFMCTL_REG, FSRDUR);
+	mcasp_clr_bits(dev->base + DAVINCI_MCASP_TXFMCTL_REG, FSXDUR);
+}
+
+
+
+/* S/PDIF */
+static void davinci_hw_dit_param(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct davinci_audio_dev *dev = rtd->dai->cpu_dai->private_data;
+
+	/* Set the PDIR for Serialiser as output */
+	mcasp_set_bits(dev->base + DAVINCI_MCASP_PDIR_REG, AFSX);
+
+	/* TXMASK for 24 bits */
+	mcasp_set_reg(dev->base + DAVINCI_MCASP_TXMASK_REG, 0x00FFFFFF);
+
+	/* Set the TX format : 24 bit right rotation, 32 bit slot, Pad 0
+	   and LSB first */
+	mcasp_set_bits(dev->base + DAVINCI_MCASP_TXFMT_REG,
+		       TXROT(6) | TXSSZ(15));
+
+	/* Set TX frame synch : DIT Mode, 1 bit width, internal, rising edge */
+	mcasp_set_reg(dev->base + DAVINCI_MCASP_TXFMCTL_REG,
+		      AFSXE | FSXMOD(0x180));
+
+	/* Set the TX tdm : for all the slots */
+	mcasp_set_reg(dev->base + DAVINCI_MCASP_TXTDM_REG, 0xFFFFFFFF);
+
+	/* Set the TX clock controls : div = 1 and internal */
+	mcasp_set_bits(dev->base + DAVINCI_MCASP_ACLKXCTL_REG,
+		       ACLKXE | TX_ASYNC);
+
+	mcasp_clr_bits(dev->base + DAVINCI_MCASP_XEVTCTL_REG, TXDATADMADIS);
+
+	/* Only 44100 and 48000 are valid, both have the same setting */
+	mcasp_set_bits(dev->base + DAVINCI_MCASP_AHCLKXCTL_REG,
+		       AHCLKXDIV(3));
+
+	/* Enable the DIT */
+	mcasp_set_bits(dev->base + DAVINCI_MCASP_TXDITCTL_REG, DITEN);
+}
+
+static int davinci_i2s_mcasp_hw_params(struct snd_pcm_substream *substream,
+					struct snd_pcm_hw_params *params)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct davinci_audio_dev *dev = rtd->dai->cpu_dai->private_data;
+	struct davinci_pcm_dma_params *dma_params =
+					dev->dma_params[substream->stream];
+	int word_length;
+
+	davinci_hw_common_param(substream);
+
+	if (dev->op_mode == DAVINCI_MCASP_DIT_MODE)
+		davinci_hw_dit_param(substream);
+	else
+		davinci_hw_iis_param(substream);
+
+	switch (params_format(params)) {
+	case SNDRV_PCM_FORMAT_S8:
+		dma_params->data_type = 1;
+		word_length = DAVINCI_AUDIO_WORD_8;
+		break;
+	case SNDRV_PCM_FORMAT_S16_LE:
+		dma_params->data_type = 2;
+		word_length = DAVINCI_AUDIO_WORD_16;
+		break;
+	case SNDRV_PCM_FORMAT_S32_LE:
+		dma_params->data_type = 4;
+		word_length = DAVINCI_AUDIO_WORD_32;
+		break;
+	default:
+		printk(KERN_WARNING "davinci-i2s: unsupported PCM format");
+		return -EINVAL;
+	}
+	davinci_config_channel_size(substream, word_length);
+
+	return 0;
+}
+
+static int davinci_i2s_mcasp_trigger(struct snd_pcm_substream *substream,
+				     int cmd)
+{
+	int ret = 0;
+
+	switch (cmd) {
+	case SNDRV_PCM_TRIGGER_START:
+	case SNDRV_PCM_TRIGGER_RESUME:
+	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
+		davinci_mcasp_start(substream);
+		break;
+	case SNDRV_PCM_TRIGGER_STOP:
+	case SNDRV_PCM_TRIGGER_SUSPEND:
+	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+		davinci_mcasp_stop(substream);
+		break;
+	default:
+		ret = -EINVAL;
+	}
+
+	return ret;
+}
+
+struct snd_soc_cpu_dai davinci_iis_mcasp_dai[] = {
+	{
+		.name = "davinci-i2s",
+		.id = 0,
+		.type = SND_SOC_DAI_I2S,
+		.probe = davinci_i2s_probe,
+		.remove = davinci_i2s_remove,
+		.playback = {
+			.channels_min = 1,
+			.channels_max = 384,
+			.rates = DAVINCI_I2S_RATES,
+			.formats = SNDRV_PCM_FMTBIT_S16_LE,
+		},
+		.capture = {
+			.channels_min = 1,
+			.channels_max = 384,
+			.rates = DAVINCI_I2S_RATES,
+			.formats = SNDRV_PCM_FMTBIT_S16_LE,
+		},
+		.ops = {
+			.startup = davinci_i2s_startup,
+			.trigger = davinci_i2s_mcasp_trigger,
+			.hw_params = davinci_i2s_mcasp_hw_params,
+		},
+		.dai_ops = {
+			.set_fmt = davinci_i2s_mcasp_set_dai_fmt,
+		},
+	},
+};
+EXPORT_SYMBOL_GPL(davinci_iis_mcasp_dai);
+
+struct snd_soc_cpu_dai davinci_dit_mcasp_dai[] = {
+	{
+		.name = "davinci-dit",
+		.id = 1,
+		.type = SND_SOC_DAI_I2S,
+		.playback = {
+			.channels_min = 1,
+			.channels_max = 384,
+			.rates = DAVINCI_I2S_RATES,
+			.formats = SNDRV_PCM_FMTBIT_S16_LE,
+		},
+		.ops = {
+			.startup = davinci_i2s_startup,
+			.trigger = davinci_i2s_mcasp_trigger,
+			.hw_params = davinci_i2s_mcasp_hw_params,
+		},
+		.dai_ops = {
+			.set_fmt = davinci_i2s_mcasp_set_dai_fmt,
+		},
+	},
+};
+EXPORT_SYMBOL_GPL(davinci_dit_mcasp_dai);
+
+MODULE_AUTHOR("Steve Chen");
+MODULE_DESCRIPTION("TI DAVINCI I2S (McASP) SoC Interface");
+MODULE_LICENSE("GPL");
+
Index: linux-2.6.18/sound/soc/davinci/davinci-i2s-mcasp.h
===================================================================
--- /dev/null
+++ linux-2.6.18/sound/soc/davinci/davinci-i2s-mcasp.h
@@ -0,0 +1,285 @@
+/*
+ * ALSA SoC I2S (McASP) Audio Layer for TI DAVINCI processor
+ *
+ * Author: Nirmal Pandey <n-pandey@ti.com>,
+ *         Suresh Rajashekara <suresh.r@ti.com>
+ *         Steve Chen, <schen@.mvista.com>
+ *
+ * Copyright:   (C) 2008 MontaVista Software, Inc., <source@mvista.com>
+ * Copyright:   (C) 2007  Texas Instruments, India
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef DAVINCI_I2S_MCASP_H
+#define DAVINCI_I2S_MCASP_H
+
+/*
+ * McASP register definitions
+ */
+#define DAVINCI_MCASP_PID_REG		0x00
+#define DAVINCI_MCASP_PWREMUMGT_REG	0x04
+
+#define DAVINCI_MCASP_PFUNC_REG		0x10
+#define DAVINCI_MCASP_PDIR_REG		0x14
+#define DAVINCI_MCASP_PDOUT_REG		0x18
+#define DAVINCI_MCASP_PDSET_REG		0x1c
+
+#define DAVINCI_MCASP_PDCLR_REG		0x20
+
+#define DAVINCI_MCASP_TLGC_REG		0x30
+#define DAVINCI_MCASP_TLMR_REG		0x34
+
+#define DAVINCI_MCASP_GBLCTL_REG	0x44
+#define DAVINCI_MCASP_AMUTE_REG		0x48
+#define DAVINCI_MCASP_LBCTL_REG		0x4c
+
+#define DAVINCI_MCASP_TXDITCTL_REG	0x50
+
+#define DAVINCI_MCASP_GBLCTLR_REG	0x60
+#define DAVINCI_MCASP_RXMASK_REG	0x64
+#define DAVINCI_MCASP_RXFMT_REG		0x68
+#define DAVINCI_MCASP_RXFMCTL_REG	0x6c
+
+#define DAVINCI_MCASP_ACLKRCTL_REG	0x70
+#define DAVINCI_MCASP_AHCLKRCTL_REG	0x74
+#define DAVINCI_MCASP_RXTDM_REG		0x78
+#define DAVINCI_MCASP_EVTCTLR_REG	0x7c
+
+#define DAVINCI_MCASP_RXSTAT_REG	0x80
+#define DAVINCI_MCASP_RXTDMSLOT_REG	0x84
+#define DAVINCI_MCASP_RXCLKCHK_REG	0x88
+#define DAVINCI_MCASP_REVTCTL_REG	0x8c
+
+#define DAVINCI_MCASP_GBLCTLX_REG	0xa0
+#define DAVINCI_MCASP_TXMASK_REG	0xa4
+#define DAVINCI_MCASP_TXFMT_REG		0xa8
+#define DAVINCI_MCASP_TXFMCTL_REG	0xac
+
+#define DAVINCI_MCASP_ACLKXCTL_REG	0xb0
+#define DAVINCI_MCASP_AHCLKXCTL_REG	0xb4
+#define DAVINCI_MCASP_TXTDM_REG		0xb8
+#define DAVINCI_MCASP_EVTCTLX_REG	0xbc
+
+#define DAVINCI_MCASP_TXSTAT_REG	0xc0
+#define DAVINCI_MCASP_TXTDMSLOT_REG	0xc4
+#define DAVINCI_MCASP_TXCLKCHK_REG	0xc8
+#define DAVINCI_MCASP_XEVTCTL_REG	0xcc
+
+/* Left (even TDM Slot) Channel Status Register File*/
+#define DAVINCI_MCASP_DITCSRA_REG	0x100
+/* Right (odd TDM slot) Channel Status RegisterFile*/
+#define DAVINCI_MCASP_DITCSRB_REG	0x118
+/* Left (even TDM slot) User Data Register File */
+#define DAVINCI_MCASP_DITUDRA_REG	0x130
+/* Right (odd TDM Slot) User Data Register File */
+#define DAVINCI_MCASP_DITUDRB_REG	0x148
+
+/* Serializer n Control Register */
+#define DAVINCI_MCASP_XRSRCTL_BASE_REG	0x180
+#define DAVINCI_MCASP_XRSRCTL_REG(n)	(DAVINCI_MCASP_XRSRCTL_BASE_REG + \
+					 (n << 2))
+
+/* Transmit Buffer for Serializer n */
+#define DAVINCI_MCASP_TXBUF_REG		0x200
+/* Receive Buffer for Serializer n */
+#define DAVINCI_MCASP_RXBUF_REG		0x280
+
+/* Register Bits */
+#define BIT(n) (1<<n)
+
+/*
+ * DAVINCI_MCASP_PWREMUMGT_REG - Power Down and Emulation Management
+ *     Register Bits
+ */
+#define FREE         BIT(0)
+#define SOFT         BIT(1)
+
+/*
+ * DAVINCI_MCASP_PFUNC_REG - Pin Function / GPIO Enable Register Bits
+ */
+#define AXR(n)       (1<<n)
+#define PFUNC_AMUTE  BIT(25)
+#define ACLKX        BIT(26)
+#define AHCLKX       BIT(27)
+#define AFSX         BIT(28)
+#define ACLKR        BIT(29)
+#define AHCLKR       BIT(30)
+#define AFSR         BIT(31)
+
+/*
+ * DAVINCI_MCASP_PDIR_REG - Pin Direction Register Bits
+ */
+#define AXR(n)       (1<<n)
+#define PDIR_AMUTE   BIT(25)
+#define ACLKX        BIT(26)
+#define AHCLKX       BIT(27)
+#define AFSX         BIT(28)
+#define ACLKR        BIT(29)
+#define AHCLKR       BIT(30)
+#define AFSR         BIT(31)
+
+/*
+ * DAVINCI_MCASP_TXDITCTL_REG - Transmit DIT Control Register Bits
+ */
+#define DITEN        BIT(0)	/* Transmit DIT mode enable/disable */
+#define VA           BIT(2)
+#define VB           BIT(3)
+
+/*
+ * DAVINCI_MCASP_TXFMT_REG - Transmit Bitstream Format Register Bits
+ */
+#define TXROT(val)   (val)
+#define TXSEL        BIT(3)
+#define TXSSZ(val)   (val<<4)
+#define TXPBIT(val)  (val<<8)
+#define TXPAD(val)   (val<<13)
+#define TXORD        BIT(15)
+#define FSXDLY(val)  (val<<16)
+
+/*
+ * DAVINCI_MCASP_RXFMT_REG - Receive Bitstream Format Register Bits
+ */
+#define RXROT(val)   (val)
+#define RXSEL        BIT(3)
+#define RXSSZ(val)   (val<<4)
+#define RXPBIT(val)  (val<<8)
+#define RXPAD(val)   (val<<13)
+#define RXORD        BIT(15)
+#define FSRDLY(val)  (val<<16)
+
+/*
+ * DAVINCI_MCASP_TXFMCTL_REG -  Transmit Frame Control Register Bits
+  */
+#define FSXPOL       BIT(0)
+#define AFSXE        BIT(1)
+#define FSXDUR       BIT(4)
+#define FSXMOD(val)  (val<<7)
+
+/*
+ * DAVINCI_MCASP_RXFMCTL_REG - Receive Frame Control Register Bits
+ */
+#define FSRPOL       BIT(0)
+#define AFSRE        BIT(1)
+#define FSRDUR       BIT(4)
+#define FSRMOD(val)  (val<<7)
+
+/*
+ * DAVINCI_MCASP_ACLKXCTL_REG - Transmit Clock Control Register Bits
+ */
+#define ACLKXDIV(val) (val)
+#define ACLKXE       BIT(5)
+#define TX_ASYNC     BIT(6)
+#define ACLKXPOL     BIT(7)
+
+/*
+ * DAVINCI_MCASP_ACLKRCTL_REG Receive Clock Control Register Bits
+ */
+#define ACLKRDIV(val) (val)
+#define ACLKRE       BIT(5)
+#define RX_ASYNC     BIT(6)
+#define ACLKRPOL     BIT(7)
+
+/*
+ * DAVINCI_MCASP_AHCLKXCTL_REG - High Frequency Transmit Clock Control
+ *     Register Bits
+ */
+#define AHCLKXDIV(val) (val)
+#define AHCLKXPOL    BIT(14)
+#define AHCLKXE      BIT(15)
+
+/*
+ * DAVINCI_MCASP_AHCLKRCTL_REG - High Frequency Receive Clock Control
+ *     Register Bits
+ */
+#define AHCLKRDIV(val) (val)
+#define AHCLKRPOL    BIT(14)
+#define AHCLKRE      BIT(15)
+
+/*
+ * DAVINCI_MCASP_XRSRCTL_BASE_REG -  Serializer Control Register Bits
+ */
+#define MODE(val)    (val)
+#define INACTIVE_MODE	0
+#define TX_MODE		1
+#define RX_MODE		2
+#define DISMOD(val)  (val<<2)
+#define TXSTATE      BIT(4)
+#define RXSTATE      BIT(5)
+
+/*
+ * DAVINCI_MCASP_LBCTL_REG - Loop Back Control Register Bits
+ */
+#define LBEN         BIT(0)
+#define LBORD        BIT(1)
+#define LBGENMODE(val) (val<<2)
+
+/*
+ * DAVINCI_MCASP_TXTDMSLOT_REG - Transmit TDM Slot Register configuration
+ */
+#define TXTDMS(n)    (1<<n)
+
+/*
+ * DAVINCI_MCASP_RXTDMSLOT_REG - Receive TDM Slot Register configuration
+ */
+#define RXTDMS(n)    (1<<n)
+
+/*
+ * DAVINCI_MCASP_GBLCTL_REG -  Global Control Register Bits
+ */
+#define RXCLKRST     BIT(0)	/* Receiver Clock Divider Reset */
+#define RXHCLKRST    BIT(1)	/* Receiver High Frequency Clock Divider */
+#define RXSERCLR     BIT(2)	/* Receiver Serializer Clear */
+#define RXSMRST      BIT(3)	/* Receiver State Machine Reset */
+#define RXFSRST      BIT(4)	/* Frame Sync Generator Reset */
+#define TXCLKRST     BIT(8)	/* Transmitter Clock Divider Reset */
+#define TXHCLKRST    BIT(9)	/* Transmitter High Frequency Clock Divider
+				 * and Transmit Bad Clock Detect /32 Counter
+				 * Reset */
+#define TXSERCLR     BIT(10)	/* Transmit Serializer Clear */
+#define TXSMRST      BIT(11)	/* Transmitter State Machine Reset */
+#define TXFSRST      BIT(12)	/* Frame Sync Generator Reset */
+
+/*
+ * DAVINCI_MCASP_AMUTE_REG -  Mute Control Register Bits
+ */
+#define MUTENA(val)  (val)
+#define MUTEINPOL    BIT(2)
+#define MUTEINENA    BIT(3)
+#define MUTEIN       BIT(4)
+#define MUTER        BIT(5)
+#define MUTEX        BIT(6)
+#define MUTEFSR      BIT(7)
+#define MUTEFSX      BIT(8)
+#define MUTEBADCLKR  BIT(9)
+#define MUTEBADCLKX  BIT(10)
+#define MUTERXDMAERR BIT(11)
+#define MUTETXDMAERR BIT(12)
+
+/*
+ * DAVINCI_MCASP_REVTCTL_REG - Receiver DMA Event Control Register bits
+ */
+#define RXDATADMADIS BIT(0)
+
+/*
+ * DAVINCI_MCASP_XEVTCTL_REG - Transmitter DMA Event Control Register bits
+ */
+#define TXDATADMADIS BIT(0)
+
+#define DAVINCI_MCASP_IIS_MODE	0
+#define DAVINCI_MCASP_DIT_MODE	1
+
+#define DAVINCI_MCASP_NUM_SERIALIZER	16
+
+#if defined(CONFIG_SND_DAVINCI_SOC_I2S_MCASP) || \
+    defined(CONFIG_SND_DAVINCI_SOC_I2S_MCASP_MODULE)
+extern struct snd_soc_cpu_dai davinci_iis_mcasp_dai[];
+extern struct snd_soc_cpu_dai davinci_dit_mcasp_dai[];
+#else
+#define davinci_iis_mcasp_dai	NULL
+#define davinci_dit_mcasp_dai	NULL
+#endif
+
+#endif	/* DAVINCI_I2S_MCASP_H */
Index: linux-2.6.18/sound/soc/davinci/davinci-i2s-mcbsp.c
===================================================================
--- /dev/null
+++ linux-2.6.18/sound/soc/davinci/davinci-i2s-mcbsp.c
@@ -0,0 +1,263 @@
+/*
+ * ALSA SoC I2S (McBSP) Audio Layer for TI DAVINCI processor
+ *
+ * Author:      Vladimir Barinov, <vbarinov@ru.mvista.com>
+ * 		Steve Chen, <schen@mvista.com>
+ * Copyright:   (C) 2008 MontaVista Software, Inc., <source@mvista.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/device.h>
+#include <linux/delay.h>
+#include <linux/io.h>
+#include <linux/clk.h>
+
+#include <sound/driver.h>
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/initval.h>
+#include <sound/soc.h>
+
+#include "davinci-pcm.h"
+#include "davinci-i2s.h"
+#include "davinci-i2s-mcbsp.h"
+
+#define MOD_REG_BIT(val, mask, set) do { \
+	if (set) { \
+		val |= mask; \
+	} else { \
+		val &= ~mask; \
+	} \
+} while (0)
+
+static inline void davinci_mcbsp_write_reg(struct davinci_audio_dev *dev,
+					   int reg, u32 val)
+{
+	__raw_writel(val, dev->base + reg);
+}
+
+static inline u32 davinci_mcbsp_read_reg(struct davinci_audio_dev *dev, int reg)
+{
+	return __raw_readl(dev->base + reg);
+}
+
+static void davinci_mcbsp_start(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct davinci_audio_dev *dev = rtd->dai->cpu_dai->private_data;
+	u32 w;
+
+	/* Start the sample generator and enable transmitter/receiver */
+	w = davinci_mcbsp_read_reg(dev, DAVINCI_MCBSP_SPCR_REG);
+	MOD_REG_BIT(w, DAVINCI_MCBSP_SPCR_GRST, 1);
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
+		MOD_REG_BIT(w, DAVINCI_MCBSP_SPCR_XRST, 1);
+	else
+		MOD_REG_BIT(w, DAVINCI_MCBSP_SPCR_RRST, 1);
+	davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_SPCR_REG, w);
+
+	/* Start frame sync */
+	w = davinci_mcbsp_read_reg(dev, DAVINCI_MCBSP_SPCR_REG);
+	MOD_REG_BIT(w, DAVINCI_MCBSP_SPCR_FRST, 1);
+	davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_SPCR_REG, w);
+}
+
+static void davinci_mcbsp_stop(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct davinci_audio_dev *dev = rtd->dai->cpu_dai->private_data;
+	u32 w;
+
+	/* Start the sample generator and enable transmitter/receiver */
+	w = davinci_mcbsp_read_reg(dev, DAVINCI_MCBSP_SPCR_REG);
+	MOD_REG_BIT(w, DAVINCI_MCBSP_SPCR_GRST, 1);
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
+		MOD_REG_BIT(w, DAVINCI_MCBSP_SPCR_XRST, 1);
+	else
+		MOD_REG_BIT(w, DAVINCI_MCBSP_SPCR_RRST, 1);
+	davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_SPCR_REG, w);
+
+	/* Start frame sync */
+	w = davinci_mcbsp_read_reg(dev, DAVINCI_MCBSP_SPCR_REG);
+	MOD_REG_BIT(w, DAVINCI_MCBSP_SPCR_FRST, 1);
+	davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_SPCR_REG, w);
+}
+
+static int davinci_i2s_set_dai_fmt(struct snd_soc_cpu_dai *cpu_dai,
+				   unsigned int fmt)
+{
+	struct davinci_audio_dev *dev = cpu_dai->private_data;
+	u32 w;
+
+	switch (fmt & SND_SOC_DAIFMT_MASTER_MASK) {
+	case SND_SOC_DAIFMT_CBS_CFS:
+		davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_PCR_REG,
+					DAVINCI_MCBSP_PCR_FSXM |
+					DAVINCI_MCBSP_PCR_FSRM |
+					DAVINCI_MCBSP_PCR_CLKXM |
+					DAVINCI_MCBSP_PCR_CLKRM);
+		davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_SRGR_REG,
+					DAVINCI_MCBSP_SRGR_FSGM);
+		break;
+	case SND_SOC_DAIFMT_CBM_CFM:
+		davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_PCR_REG, 0);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	switch (fmt & SND_SOC_DAIFMT_INV_MASK) {
+	case SND_SOC_DAIFMT_IB_NF:
+		w = davinci_mcbsp_read_reg(dev, DAVINCI_MCBSP_PCR_REG);
+		MOD_REG_BIT(w, DAVINCI_MCBSP_PCR_CLKXP |
+			       DAVINCI_MCBSP_PCR_CLKRP, 1);
+		davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_PCR_REG, w);
+		break;
+	case SND_SOC_DAIFMT_NB_IF:
+		w = davinci_mcbsp_read_reg(dev, DAVINCI_MCBSP_PCR_REG);
+		MOD_REG_BIT(w, DAVINCI_MCBSP_PCR_FSXP |
+			       DAVINCI_MCBSP_PCR_FSRP, 1);
+		davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_PCR_REG, w);
+		break;
+	case SND_SOC_DAIFMT_IB_IF:
+		w = davinci_mcbsp_read_reg(dev, DAVINCI_MCBSP_PCR_REG);
+		MOD_REG_BIT(w, DAVINCI_MCBSP_PCR_CLKXP |
+			       DAVINCI_MCBSP_PCR_CLKRP |
+			       DAVINCI_MCBSP_PCR_FSXP |
+			       DAVINCI_MCBSP_PCR_FSRP, 1);
+		davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_PCR_REG, w);
+		break;
+	case SND_SOC_DAIFMT_NB_NF:
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int davinci_i2s_hw_params(struct snd_pcm_substream *substream,
+				 struct snd_pcm_hw_params *params)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct davinci_audio_dev *dev = rtd->dai->cpu_dai->private_data;
+	struct davinci_pcm_dma_params *dma_params =
+					  dev->dma_params[substream->stream];
+	struct snd_interval *i = NULL;
+	int mcbsp_word_length;
+	u32 w;
+
+	/* general line settings */
+	davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_SPCR_REG,
+				DAVINCI_MCBSP_SPCR_RINTM(3) |
+				DAVINCI_MCBSP_SPCR_XINTM(3) |
+				DAVINCI_MCBSP_SPCR_FREE);
+	davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_RCR_REG,
+				DAVINCI_MCBSP_RCR_RFRLEN1(1) |
+				DAVINCI_MCBSP_RCR_RDATDLY(1));
+	davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_XCR_REG,
+				DAVINCI_MCBSP_XCR_XFRLEN1(1) |
+				DAVINCI_MCBSP_XCR_XDATDLY(1) |
+				DAVINCI_MCBSP_XCR_XFIG);
+
+	i = hw_param_interval(params, SNDRV_PCM_HW_PARAM_SAMPLE_BITS);
+	w = davinci_mcbsp_read_reg(dev, DAVINCI_MCBSP_SRGR_REG);
+	MOD_REG_BIT(w, DAVINCI_MCBSP_SRGR_FWID(snd_interval_value(i) - 1), 1);
+	davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_SRGR_REG, w);
+
+	i = hw_param_interval(params, SNDRV_PCM_HW_PARAM_FRAME_BITS);
+	w = davinci_mcbsp_read_reg(dev, DAVINCI_MCBSP_SRGR_REG);
+	MOD_REG_BIT(w, DAVINCI_MCBSP_SRGR_FPER(snd_interval_value(i) - 1), 1);
+	davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_SRGR_REG, w);
+
+	/* Determine xfer data type */
+	switch (params_format(params)) {
+	case SNDRV_PCM_FORMAT_S8:
+		dma_params->data_type = 1;
+		mcbsp_word_length = DAVINCI_AUDIO_WORD_8;
+		break;
+	case SNDRV_PCM_FORMAT_S16_LE:
+		dma_params->data_type = 2;
+		mcbsp_word_length = DAVINCI_AUDIO_WORD_16;
+		break;
+	case SNDRV_PCM_FORMAT_S32_LE:
+		dma_params->data_type = 4;
+		mcbsp_word_length = DAVINCI_AUDIO_WORD_32;
+		break;
+	default:
+		printk(KERN_WARNING "davinci-i2s: unsupported PCM format");
+		return -EINVAL;
+	}
+
+	w = davinci_mcbsp_read_reg(dev, DAVINCI_MCBSP_RCR_REG);
+	MOD_REG_BIT(w, DAVINCI_MCBSP_RCR_RWDLEN1(mcbsp_word_length) |
+		       DAVINCI_MCBSP_RCR_RWDLEN2(mcbsp_word_length), 1);
+	davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_RCR_REG, w);
+
+	w = davinci_mcbsp_read_reg(dev, DAVINCI_MCBSP_XCR_REG);
+	MOD_REG_BIT(w, DAVINCI_MCBSP_XCR_XWDLEN1(mcbsp_word_length) |
+		       DAVINCI_MCBSP_XCR_XWDLEN2(mcbsp_word_length), 1);
+	davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_XCR_REG, w);
+
+	return 0;
+}
+
+static int davinci_i2s_trigger(struct snd_pcm_substream *substream, int cmd)
+{
+	int ret = 0;
+
+	switch (cmd) {
+	case SNDRV_PCM_TRIGGER_START:
+	case SNDRV_PCM_TRIGGER_RESUME:
+	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
+		davinci_mcbsp_start(substream);
+		break;
+	case SNDRV_PCM_TRIGGER_STOP:
+	case SNDRV_PCM_TRIGGER_SUSPEND:
+	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+		davinci_mcbsp_stop(substream);
+		break;
+	default:
+		ret = -EINVAL;
+	}
+
+	return ret;
+}
+
+struct snd_soc_cpu_dai davinci_i2s_dai[] = {
+	{
+		.name = "davinci-i2s",
+		.id = 0,
+		.type = SND_SOC_DAI_I2S,
+		.probe = davinci_i2s_probe,
+		.remove = davinci_i2s_remove,
+		.playback = {
+			.channels_min = 1,
+			.channels_max = 2,
+			.rates = DAVINCI_I2S_RATES,
+			.formats = SNDRV_PCM_FMTBIT_S16_LE,},
+		.capture = {
+			.channels_min = 1,
+			.channels_max = 2,
+			.rates = DAVINCI_I2S_RATES,
+			.formats = SNDRV_PCM_FMTBIT_S16_LE,},
+		.ops = {
+			.startup = davinci_i2s_startup,
+			.trigger = davinci_i2s_trigger,
+			.hw_params = davinci_i2s_hw_params,},
+		.dai_ops = {
+			.set_fmt = davinci_i2s_set_dai_fmt,
+		},
+	},
+};
+EXPORT_SYMBOL_GPL(davinci_i2s_dai);
+
+MODULE_AUTHOR("Vladimir Barinov");
+MODULE_DESCRIPTION("TI DAVINCI I2S (McBSP) SoC Interface");
+MODULE_LICENSE("GPL");
Index: linux-2.6.18/sound/soc/davinci/davinci-i2s-mcbsp.h
===================================================================
--- /dev/null
+++ linux-2.6.18/sound/soc/davinci/davinci-i2s-mcbsp.h
@@ -0,0 +1,63 @@
+/*
+ * ALSA SoC I2S (McBSP) Audio Layer for TI DAVINCI processor
+ *
+ * Author:      Vladimir Barinov, <vbarinov@ru.mvista.com>
+ *		Steve Chen, <schen@mvista.com>
+ * Copyright:   (C) 2008 MontaVista Software, Inc., <source@mvista.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef DAVINCI_I2S_MCBSP_H
+#define DAVINCI_I2S_MCBSP_H
+
+#define DAVINCI_MCBSP_DRR_REG	0x00
+#define DAVINCI_MCBSP_DXR_REG	0x04
+#define DAVINCI_MCBSP_SPCR_REG	0x08
+#define DAVINCI_MCBSP_RCR_REG	0x0c
+#define DAVINCI_MCBSP_XCR_REG	0x10
+#define DAVINCI_MCBSP_SRGR_REG	0x14
+#define DAVINCI_MCBSP_PCR_REG	0x24
+
+#define DAVINCI_MCBSP_SPCR_RRST		(1 << 0)
+#define DAVINCI_MCBSP_SPCR_RINTM(v)	((v) << 4)
+#define DAVINCI_MCBSP_SPCR_XRST		(1 << 16)
+#define DAVINCI_MCBSP_SPCR_XINTM(v)	((v) << 20)
+#define DAVINCI_MCBSP_SPCR_GRST		(1 << 22)
+#define DAVINCI_MCBSP_SPCR_FRST		(1 << 23)
+#define DAVINCI_MCBSP_SPCR_FREE		(1 << 25)
+
+#define DAVINCI_MCBSP_RCR_RWDLEN1(v)	((v) << 5)
+#define DAVINCI_MCBSP_RCR_RFRLEN1(v)	((v) << 8)
+#define DAVINCI_MCBSP_RCR_RDATDLY(v)	((v) << 16)
+#define DAVINCI_MCBSP_RCR_RWDLEN2(v)	((v) << 21)
+
+#define DAVINCI_MCBSP_XCR_XWDLEN1(v)	((v) << 5)
+#define DAVINCI_MCBSP_XCR_XFRLEN1(v)	((v) << 8)
+#define DAVINCI_MCBSP_XCR_XDATDLY(v)	((v) << 16)
+#define DAVINCI_MCBSP_XCR_XFIG		(1 << 18)
+#define DAVINCI_MCBSP_XCR_XWDLEN2(v)	((v) << 21)
+
+#define DAVINCI_MCBSP_SRGR_FWID(v)	((v) << 8)
+#define DAVINCI_MCBSP_SRGR_FPER(v)	((v) << 16)
+#define DAVINCI_MCBSP_SRGR_FSGM		(1 << 28)
+
+#define DAVINCI_MCBSP_PCR_CLKRP		(1 << 0)
+#define DAVINCI_MCBSP_PCR_CLKXP		(1 << 1)
+#define DAVINCI_MCBSP_PCR_FSRP		(1 << 2)
+#define DAVINCI_MCBSP_PCR_FSXP		(1 << 3)
+#define DAVINCI_MCBSP_PCR_CLKRM		(1 << 8)
+#define DAVINCI_MCBSP_PCR_CLKXM		(1 << 9)
+#define DAVINCI_MCBSP_PCR_FSRM		(1 << 10)
+#define DAVINCI_MCBSP_PCR_FSXM		(1 << 11)
+
+#if defined(CONFIG_SND_DAVINCI_SOC_I2S_MCBSP) || \
+    defined(CONFIG_SND_DAVINCI_SOC_I2S_MCBSP_MODULE)
+extern struct snd_soc_cpu_dai davinci_i2s_dai[];
+#else
+#define davinci_i2s_dai		NULL
+#endif
+
+#endif	/* DAVINCI_I2S_MCBSP_H */
Index: linux-2.6.18/sound/soc/davinci/davinci-i2s.c
===================================================================
--- linux-2.6.18.orig/sound/soc/davinci/davinci-i2s.c
+++ linux-2.6.18/sound/soc/davinci/davinci-i2s.c
@@ -24,386 +24,155 @@
 #include <sound/soc.h>
 
 #include "davinci-pcm.h"
+#include "davinci-i2s.h"
+#include "davinci-i2s-mcbsp.h"
+#include "davinci-i2s-mcasp.h"
 
-#define DAVINCI_MCBSP_DRR_REG	0x00
-#define DAVINCI_MCBSP_DXR_REG	0x04
-#define DAVINCI_MCBSP_SPCR_REG	0x08
-#define DAVINCI_MCBSP_RCR_REG	0x0c
-#define DAVINCI_MCBSP_XCR_REG	0x10
-#define DAVINCI_MCBSP_SRGR_REG	0x14
-#define DAVINCI_MCBSP_PCR_REG	0x24
-
-#define DAVINCI_MCBSP_SPCR_RRST		(1 << 0)
-#define DAVINCI_MCBSP_SPCR_RINTM(v)	((v) << 4)
-#define DAVINCI_MCBSP_SPCR_XRST		(1 << 16)
-#define DAVINCI_MCBSP_SPCR_XINTM(v)	((v) << 20)
-#define DAVINCI_MCBSP_SPCR_GRST		(1 << 22)
-#define DAVINCI_MCBSP_SPCR_FRST		(1 << 23)
-#define DAVINCI_MCBSP_SPCR_FREE		(1 << 25)
-
-#define DAVINCI_MCBSP_RCR_RWDLEN1(v)	((v) << 5)
-#define DAVINCI_MCBSP_RCR_RFRLEN1(v)	((v) << 8)
-#define DAVINCI_MCBSP_RCR_RDATDLY(v)	((v) << 16)
-#define DAVINCI_MCBSP_RCR_RWDLEN2(v)	((v) << 21)
-
-#define DAVINCI_MCBSP_XCR_XWDLEN1(v)	((v) << 5)
-#define DAVINCI_MCBSP_XCR_XFRLEN1(v)	((v) << 8)
-#define DAVINCI_MCBSP_XCR_XDATDLY(v)	((v) << 16)
-#define DAVINCI_MCBSP_XCR_XFIG		(1 << 18)
-#define DAVINCI_MCBSP_XCR_XWDLEN2(v)	((v) << 21)
-
-#define DAVINCI_MCBSP_SRGR_FWID(v)	((v) << 8)
-#define DAVINCI_MCBSP_SRGR_FPER(v)	((v) << 16)
-#define DAVINCI_MCBSP_SRGR_FSGM		(1 << 28)
-
-#define DAVINCI_MCBSP_PCR_CLKRP		(1 << 0)
-#define DAVINCI_MCBSP_PCR_CLKXP		(1 << 1)
-#define DAVINCI_MCBSP_PCR_FSRP		(1 << 2)
-#define DAVINCI_MCBSP_PCR_FSXP		(1 << 3)
-#define DAVINCI_MCBSP_PCR_CLKRM		(1 << 8)
-#define DAVINCI_MCBSP_PCR_CLKXM		(1 << 9)
-#define DAVINCI_MCBSP_PCR_FSRM		(1 << 10)
-#define DAVINCI_MCBSP_PCR_FSXM		(1 << 11)
-
-#define MOD_REG_BIT(val, mask, set) do { \
-	if (set) { \
-		val |= mask; \
-	} else { \
-		val &= ~mask; \
-	} \
-} while (0)
-
-enum {
-	DAVINCI_MCBSP_WORD_8 = 0,
-	DAVINCI_MCBSP_WORD_12,
-	DAVINCI_MCBSP_WORD_16,
-	DAVINCI_MCBSP_WORD_20,
-	DAVINCI_MCBSP_WORD_24,
-	DAVINCI_MCBSP_WORD_32,
-};
-
-static struct davinci_pcm_dma_params davinci_i2s_pcm_out = {
-	.name = "I2S PCM Stereo out",
-};
-
-static struct davinci_pcm_dma_params davinci_i2s_pcm_in = {
-	.name = "I2S PCM Stereo in",
-};
-
-struct davinci_mcbsp_dev {
-	void __iomem			*base;
-	struct clk			*clk;
-	struct davinci_pcm_dma_params	*dma_params[2];
-};
-
-static inline void davinci_mcbsp_write_reg(struct davinci_mcbsp_dev *dev,
-					   int reg, u32 val)
-{
-	__raw_writel(val, dev->base + reg);
-}
-
-static inline u32 davinci_mcbsp_read_reg(struct davinci_mcbsp_dev *dev, int reg)
-{
-	return __raw_readl(dev->base + reg);
-}
-
-static void davinci_mcbsp_start(struct snd_pcm_substream *substream)
-{
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct davinci_mcbsp_dev *dev = rtd->dai->cpu_dai->private_data;
-	u32 w;
-
-	/* Start the sample generator and enable transmitter/receiver */
-	w = davinci_mcbsp_read_reg(dev, DAVINCI_MCBSP_SPCR_REG);
-	MOD_REG_BIT(w, DAVINCI_MCBSP_SPCR_GRST, 1);
-	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
-		MOD_REG_BIT(w, DAVINCI_MCBSP_SPCR_XRST, 1);
-	else
-		MOD_REG_BIT(w, DAVINCI_MCBSP_SPCR_RRST, 1);
-	davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_SPCR_REG, w);
-
-	/* Start frame sync */
-	w = davinci_mcbsp_read_reg(dev, DAVINCI_MCBSP_SPCR_REG);
-	MOD_REG_BIT(w, DAVINCI_MCBSP_SPCR_FRST, 1);
-	davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_SPCR_REG, w);
-}
-
-static void davinci_mcbsp_stop(struct snd_pcm_substream *substream)
-{
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct davinci_mcbsp_dev *dev = rtd->dai->cpu_dai->private_data;
-	u32 w;
-
-	/* Reset transmitter/receiver and sample rate/frame sync generators */
-	w = davinci_mcbsp_read_reg(dev, DAVINCI_MCBSP_SPCR_REG);
-	MOD_REG_BIT(w, DAVINCI_MCBSP_SPCR_GRST |
-		       DAVINCI_MCBSP_SPCR_FRST, 0);
-	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
-		MOD_REG_BIT(w, DAVINCI_MCBSP_SPCR_XRST, 0);
-	else
-		MOD_REG_BIT(w, DAVINCI_MCBSP_SPCR_RRST, 0);
-	davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_SPCR_REG, w);
-}
-
-static int davinci_i2s_startup(struct snd_pcm_substream *substream)
+int davinci_i2s_startup(struct snd_pcm_substream *substream)
 {
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
 	struct snd_soc_cpu_dai *cpu_dai = rtd->dai->cpu_dai;
-	struct davinci_mcbsp_dev *dev = rtd->dai->cpu_dai->private_data;
+	struct davinci_audio_dev *dev = rtd->dai->cpu_dai->private_data;
 
 	cpu_dai->dma_data = dev->dma_params[substream->stream];
 
 	return 0;
 }
+EXPORT_SYMBOL(davinci_i2s_startup);
 
-static int davinci_i2s_set_dai_fmt(struct snd_soc_cpu_dai *cpu_dai,
-				   unsigned int fmt)
-{
-	struct davinci_mcbsp_dev *dev = cpu_dai->private_data;
-	u32 w;
-
-	switch (fmt & SND_SOC_DAIFMT_MASTER_MASK) {
-	case SND_SOC_DAIFMT_CBS_CFS:
-		davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_PCR_REG,
-					DAVINCI_MCBSP_PCR_FSXM |
-					DAVINCI_MCBSP_PCR_FSRM |
-					DAVINCI_MCBSP_PCR_CLKXM |
-					DAVINCI_MCBSP_PCR_CLKRM);
-		davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_SRGR_REG,
-					DAVINCI_MCBSP_SRGR_FSGM);
-		break;
-	case SND_SOC_DAIFMT_CBM_CFM:
-		davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_PCR_REG, 0);
-		break;
-	default:
-		return -EINVAL;
-	}
-
-	switch (fmt & SND_SOC_DAIFMT_INV_MASK) {
-	case SND_SOC_DAIFMT_IB_NF:
-		w = davinci_mcbsp_read_reg(dev, DAVINCI_MCBSP_PCR_REG);
-		MOD_REG_BIT(w, DAVINCI_MCBSP_PCR_CLKXP |
-			       DAVINCI_MCBSP_PCR_CLKRP, 1);
-		davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_PCR_REG, w);
-		break;
-	case SND_SOC_DAIFMT_NB_IF:
-		w = davinci_mcbsp_read_reg(dev, DAVINCI_MCBSP_PCR_REG);
-		MOD_REG_BIT(w, DAVINCI_MCBSP_PCR_FSXP |
-			       DAVINCI_MCBSP_PCR_FSRP, 1);
-		davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_PCR_REG, w);
-		break;
-	case SND_SOC_DAIFMT_IB_IF:
-		w = davinci_mcbsp_read_reg(dev, DAVINCI_MCBSP_PCR_REG);
-		MOD_REG_BIT(w, DAVINCI_MCBSP_PCR_CLKXP |
-			       DAVINCI_MCBSP_PCR_CLKRP |
-			       DAVINCI_MCBSP_PCR_FSXP |
-			       DAVINCI_MCBSP_PCR_FSRP, 1);
-		davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_PCR_REG, w);
-		break;
-	case SND_SOC_DAIFMT_NB_NF:
-		break;
-	default:
-		return -EINVAL;
-	}
-
-	return 0;
-}
-
-static int davinci_i2s_hw_params(struct snd_pcm_substream *substream,
-				 struct snd_pcm_hw_params *params)
-{
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct davinci_mcbsp_dev *dev = rtd->dai->cpu_dai->private_data;
-	struct davinci_pcm_dma_params *dma_params =
-					dev->dma_params[substream->stream];
-	struct snd_interval *i = NULL;
-	int mcbsp_word_length;
-	u32 w;
-
-	/* general line settings */
-	davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_SPCR_REG,
-				DAVINCI_MCBSP_SPCR_RINTM(3) |
-				DAVINCI_MCBSP_SPCR_XINTM(3) |
-				DAVINCI_MCBSP_SPCR_FREE);
-	davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_RCR_REG,
-				DAVINCI_MCBSP_RCR_RFRLEN1(1) |
-				DAVINCI_MCBSP_RCR_RDATDLY(1));
-	davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_XCR_REG,
-				DAVINCI_MCBSP_XCR_XFRLEN1(1) |
-				DAVINCI_MCBSP_XCR_XDATDLY(1) |
-				DAVINCI_MCBSP_XCR_XFIG);
-
-	i = hw_param_interval(params, SNDRV_PCM_HW_PARAM_SAMPLE_BITS);
-	w = davinci_mcbsp_read_reg(dev, DAVINCI_MCBSP_SRGR_REG);
-	MOD_REG_BIT(w, DAVINCI_MCBSP_SRGR_FWID(snd_interval_value(i) - 1), 1);
-	davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_SRGR_REG, w);
-
-	i = hw_param_interval(params, SNDRV_PCM_HW_PARAM_FRAME_BITS);
-	w = davinci_mcbsp_read_reg(dev, DAVINCI_MCBSP_SRGR_REG);
-	MOD_REG_BIT(w, DAVINCI_MCBSP_SRGR_FPER(snd_interval_value(i) - 1), 1);
-	davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_SRGR_REG, w);
-
-	/* Determine xfer data type */
-	switch (params_format(params)) {
-	case SNDRV_PCM_FORMAT_S8:
-		dma_params->data_type = 1;
-		mcbsp_word_length = DAVINCI_MCBSP_WORD_8;
-		break;
-	case SNDRV_PCM_FORMAT_S16_LE:
-		dma_params->data_type = 2;
-		mcbsp_word_length = DAVINCI_MCBSP_WORD_16;
-		break;
-	case SNDRV_PCM_FORMAT_S32_LE:
-		dma_params->data_type = 4;
-		mcbsp_word_length = DAVINCI_MCBSP_WORD_32;
-		break;
-	default:
-		printk(KERN_WARNING "davinci-i2s: unsupported PCM format");
-		return -EINVAL;
-	}
-
-	w = davinci_mcbsp_read_reg(dev, DAVINCI_MCBSP_RCR_REG);
-	MOD_REG_BIT(w, DAVINCI_MCBSP_RCR_RWDLEN1(mcbsp_word_length) |
-		       DAVINCI_MCBSP_RCR_RWDLEN2(mcbsp_word_length), 1);
-	davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_RCR_REG, w);
-
-	w = davinci_mcbsp_read_reg(dev, DAVINCI_MCBSP_XCR_REG);
-	MOD_REG_BIT(w, DAVINCI_MCBSP_XCR_XWDLEN1(mcbsp_word_length) |
-		       DAVINCI_MCBSP_XCR_XWDLEN2(mcbsp_word_length), 1);
-	davinci_mcbsp_write_reg(dev, DAVINCI_MCBSP_XCR_REG, w);
-
-	return 0;
-}
-
-static int davinci_i2s_trigger(struct snd_pcm_substream *substream, int cmd)
-{
-	int ret = 0;
-
-	switch (cmd) {
-	case SNDRV_PCM_TRIGGER_START:
-	case SNDRV_PCM_TRIGGER_RESUME:
-	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
-		davinci_mcbsp_start(substream);
-		break;
-	case SNDRV_PCM_TRIGGER_STOP:
-	case SNDRV_PCM_TRIGGER_SUSPEND:
-	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
-		davinci_mcbsp_stop(substream);
-		break;
-	default:
-		ret = -EINVAL;
-	}
-
-	return ret;
-}
-
-static int davinci_i2s_probe(struct platform_device *pdev)
+int davinci_i2s_probe(struct platform_device *pdev)
 {
+	int tmp, link_cnt;
+	int count = 0;
+	int backup_count = 0;
 	struct snd_soc_device *socdev = platform_get_drvdata(pdev);
 	struct snd_soc_machine *machine = socdev->machine;
-	struct snd_soc_cpu_dai *cpu_dai = machine->dai_link[pdev->id].cpu_dai;
-	struct davinci_mcbsp_dev *dev;
+	struct snd_soc_cpu_dai *cpu_dai;
+	struct davinci_audio_dev *dev;
 	struct resource *mem, *ioarea;
+	struct evm_snd_platform_data *parray = pdev->dev.platform_data;
 	struct evm_snd_platform_data *pdata;
-	int ret;
-
-	mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	if (!mem) {
-		dev_err(&pdev->dev, "no mem resource?\n");
-		return -ENODEV;
-	}
+	struct davinci_pcm_dma_params *dma_data;
+	int ret = 0;
 
-	ioarea = request_mem_region(mem->start, (mem->end - mem->start) + 1,
-				    pdev->name);
-	if (!ioarea) {
-		dev_err(&pdev->dev, "McBSP region already claimed\n");
-		return -EBUSY;
-	}
+	dev = kzalloc(sizeof(struct davinci_audio_dev) * machine->num_links,
+		      GFP_KERNEL);
+	if (!dev)
+		return  -ENOMEM;
+
+	dma_data = kzalloc(sizeof(struct davinci_pcm_dma_params) *
+			(machine->num_links << 1), GFP_KERNEL);
+	if (!dma_data)
+		goto err_release_dev;
+
+	for (link_cnt = 0; link_cnt < machine->num_links; link_cnt++) {
+		mem = platform_get_resource(pdev, IORESOURCE_MEM, link_cnt);
+		if (!mem) {
+			dev_err(&pdev->dev, "no mem resource?\n");
+			ret = -ENODEV;
+			backup_count = 0;
+			goto err_release_data;
+		}
+
+		ioarea = request_mem_region(mem->start,
+				(mem->end - mem->start) + 1, pdev->name);
+		if (!ioarea) {
+			dev_err(&pdev->dev, "Audio region already claimed\n");
+			ret = -EBUSY;
+			backup_count = 1;
+			goto err_release_data;
+		}
+
+
+		cpu_dai = machine->dai_link[link_cnt].cpu_dai;
+		cpu_dai->private_data = &dev[link_cnt];
+
+		pdata = &parray[link_cnt];
+		dev[link_cnt].clk = clk_get(&pdev->dev, pdata->clk_name);
+
+		if (IS_ERR(dev[link_cnt].clk)) {
+			ret = -ENODEV;
+			backup_count = 2;
+			goto err_release_data;
+		}
+		clk_enable(dev[link_cnt].clk);
+
+		dev[link_cnt].base = (void __iomem *)IO_ADDRESS(mem->start);
+		dev[link_cnt].op_mode = pdata->op_mode;
+		dev[link_cnt].tdm_slots = pdata->tdm_slots;
+		dev[link_cnt].num_serializer = pdata->num_serializer;
+		dev[link_cnt].serial_dir = pdata->serial_dir;
+		dev[link_cnt].codec_fmt = pdata->codec_fmt;
+
+
+		dma_data[count].name = "I2S PCM Stereo out";
+		dma_data[count].channel = pdata->tx_dma_ch;
+		dma_data[count].eventq_no = pdata->eventq_no;
+		dma_data[count].dma_addr = (dma_addr_t) (pdata->tx_dma_offset +
+					   io_v2p(dev[link_cnt].base));
+		dev[link_cnt].dma_params[SNDRV_PCM_STREAM_PLAYBACK] =
+				&dma_data[count];
+
+
+		count++;
+		dma_data[count].name = "I2S PCM Stereo in";
+		dma_data[count].channel = pdata->rx_dma_ch;
+		dma_data[count].eventq_no = pdata->eventq_no;
+		dma_data[count].dma_addr = (dma_addr_t)(pdata->rx_dma_offset +
+					    io_v2p(dev[link_cnt].base));
+		dev[link_cnt].dma_params[SNDRV_PCM_STREAM_CAPTURE] =
+				&dma_data[count];
+		count++;
 
-	dev = kzalloc(sizeof(struct davinci_mcbsp_dev), GFP_KERNEL);
-	if (!dev) {
-		ret = -ENOMEM;
-		goto err_release_region;
 	}
+	return 0;
 
-	cpu_dai->private_data = dev;
-
-	pdata = pdev->dev.platform_data;
-	dev->clk = clk_get(&pdev->dev, pdata->clk_name);
-
-	if (IS_ERR(dev->clk)) {
-		ret = -ENODEV;
-		goto err_free_mem;
+err_release_data:
+	for (tmp = link_cnt; tmp >= 0; tmp--) {
+		if (backup_count > 2)
+			clk_disable(dev[tmp].clk);
+
+		if (backup_count > 1) {
+			mem = platform_get_resource(pdev, IORESOURCE_MEM, tmp);
+			release_mem_region(mem->start,
+					   (mem->end - mem->start) + 1);
+		}
+		backup_count = 3;
 	}
-	clk_enable(dev->clk);
-
-	dev->base = (void __iomem *)IO_ADDRESS(mem->start);
-
-	dev->dma_params[SNDRV_PCM_STREAM_PLAYBACK] = &davinci_i2s_pcm_out;
-	dev->dma_params[SNDRV_PCM_STREAM_PLAYBACK]->channel = pdata->tx_dma_ch;
-	dev->dma_params[SNDRV_PCM_STREAM_PLAYBACK]->dma_addr =
-	    (dma_addr_t)(io_v2p(dev->base) + DAVINCI_MCBSP_DXR_REG);
-
-	dev->dma_params[SNDRV_PCM_STREAM_CAPTURE] = &davinci_i2s_pcm_in;
-	dev->dma_params[SNDRV_PCM_STREAM_CAPTURE]->channel = pdata->rx_dma_ch;
-	dev->dma_params[SNDRV_PCM_STREAM_CAPTURE]->dma_addr =
-	    (dma_addr_t)(io_v2p(dev->base) + DAVINCI_MCBSP_DRR_REG);
+	kfree(dma_data);
 
-	return 0;
-
-err_free_mem:
+err_release_dev:
 	kfree(dev);
-err_release_region:
-	release_mem_region(mem->start, (mem->end - mem->start) + 1);
 
 	return ret;
 }
+EXPORT_SYMBOL(davinci_i2s_probe);
 
-static void davinci_i2s_remove(struct platform_device *pdev)
+void davinci_i2s_remove(struct platform_device *pdev)
 {
+	int i;
 	struct snd_soc_device *socdev = platform_get_drvdata(pdev);
 	struct snd_soc_machine *machine = socdev->machine;
-	struct snd_soc_cpu_dai *cpu_dai = machine->dai_link[pdev->id].cpu_dai;
-	struct davinci_mcbsp_dev *dev = cpu_dai->private_data;
+	struct snd_soc_cpu_dai *cpu_dai = machine->dai_link->cpu_dai;
+	struct davinci_audio_dev *dev_list = cpu_dai->private_data;
+	struct davinci_audio_dev *dev;
 	struct resource *mem;
+	struct davinci_pcm_dma_params *ptr;
 
-	clk_disable(dev->clk);
-	clk_put(dev->clk);
-	dev->clk = NULL;
-
-	kfree(dev);
-
-	mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	release_mem_region(mem->start, (mem->end - mem->start) + 1);
+	for (i = 0; i < machine->num_links; i++) {
+		dev = &dev_list[i];
+		clk_disable(dev->clk);
+		clk_put(dev->clk);
+		dev->clk = NULL;
+
+		mem = platform_get_resource(pdev, IORESOURCE_MEM, i);
+		release_mem_region(mem->start, (mem->end - mem->start) + 1);
+	}
+	ptr = dev_list->dma_params[SNDRV_PCM_STREAM_PLAYBACK];
+	kfree(ptr);
+	kfree(dev_list);
 }
-
-#define DAVINCI_I2S_RATES	SNDRV_PCM_RATE_8000_96000
-
-struct snd_soc_cpu_dai davinci_i2s_dai = {
-	.name = "davinci-i2s",
-	.id = 0,
-	.type = SND_SOC_DAI_I2S,
-	.probe = davinci_i2s_probe,
-	.remove = davinci_i2s_remove,
-	.playback = {
-		.channels_min = 1,
-		.channels_max = 2,
-		.rates = DAVINCI_I2S_RATES,
-		.formats = SNDRV_PCM_FMTBIT_S16_LE,},
-	.capture = {
-		.channels_min = 1,
-		.channels_max = 2,
-		.rates = DAVINCI_I2S_RATES,
-		.formats = SNDRV_PCM_FMTBIT_S16_LE,},
-	.ops = {
-		.startup = davinci_i2s_startup,
-		.trigger = davinci_i2s_trigger,
-		.hw_params = davinci_i2s_hw_params,},
-	.dai_ops = {
-		.set_fmt = davinci_i2s_set_dai_fmt,
-	},
-};
-EXPORT_SYMBOL_GPL(davinci_i2s_dai);
+EXPORT_SYMBOL(davinci_i2s_remove);
 
 MODULE_AUTHOR("Vladimir Barinov");
 MODULE_DESCRIPTION("TI DAVINCI I2S (McBSP) SoC Interface");
Index: linux-2.6.18/sound/soc/davinci/davinci-i2s.h
===================================================================
--- linux-2.6.18.orig/sound/soc/davinci/davinci-i2s.h
+++ linux-2.6.18/sound/soc/davinci/davinci-i2s.h
@@ -12,6 +12,37 @@
 #ifndef _DAVINCI_I2S_H
 #define _DAVINCI_I2S_H
 
-extern struct snd_soc_cpu_dai davinci_i2s_dai;
+#include <linux/io.h>
+#include "davinci-pcm.h"
+
+#define DAVINCI_I2S_RATES	SNDRV_PCM_RATE_8000_96000
+
+enum {
+	DAVINCI_AUDIO_WORD_8 = 0,
+	DAVINCI_AUDIO_WORD_12,
+	DAVINCI_AUDIO_WORD_16,
+	DAVINCI_AUDIO_WORD_20,
+	DAVINCI_AUDIO_WORD_24,
+	DAVINCI_AUDIO_WORD_32,
+	DAVINCI_AUDIO_WORD_28,  /* This is only valid for McASP */
+};
+
+struct davinci_audio_dev {
+	void __iomem			*base;
+	int				sample_rate;
+	struct clk			*clk;
+	struct davinci_pcm_dma_params	*dma_params[2];
+	unsigned int			codec_fmt;
+
+	/* McASP specific data */
+	int				tdm_slots;
+	u8				op_mode;
+	u8				num_serializer;
+	u8				*serial_dir;
+};
+
+int davinci_i2s_startup(struct snd_pcm_substream *substream);
+int davinci_i2s_probe(struct platform_device *pdev);
+void davinci_i2s_remove(struct platform_device *pdev);
 
 #endif
Index: linux-2.6.18/sound/soc/davinci/davinci-pcm.c
===================================================================
--- linux-2.6.18.orig/sound/soc/davinci/davinci-pcm.c
+++ linux-2.6.18/sound/soc/davinci/davinci-pcm.c
@@ -32,6 +32,8 @@
 #define DPRINTK(x...)
 #endif
 
+void davinci_dma_getposition(int lch, dma_addr_t *src, dma_addr_t *dst);
+
 static struct snd_pcm_hardware davinci_pcm_hardware = {
 	.info = (SNDRV_PCM_INFO_INTERLEAVED | SNDRV_PCM_INFO_BLOCK_TRANSFER |
 		 SNDRV_PCM_INFO_MMAP | SNDRV_PCM_INFO_MMAP_VALID |
@@ -143,13 +145,13 @@ static int davinci_pcm_dma_request(struc
 	/* Request master DMA channel */
 	ret = davinci_request_dma(prtd->params->channel, prtd->params->name,
 				  davinci_pcm_dma_irq, substream,
-				  &prtd->master_lch, &tcc, EVENTQ_0);
+				  &prtd->master_lch, &tcc, dma_data->eventq_no);
 	if (ret)
 		return ret;
 
 	/* Request slave DMA channel */
-	ret = davinci_request_dma(DAVINCI_EDMA_PARAM_ANY, "Link",
-				  NULL, NULL, &prtd->slave_lch, &tcc, EVENTQ_0);
+	ret = davinci_request_dma(DAVINCI_EDMA_PARAM_ANY, "Link", NULL, NULL,
+				  &prtd->slave_lch, &tcc, dma_data->eventq_no);
 	if (ret) {
 		davinci_free_dma(prtd->master_lch);
 		return ret;
@@ -356,6 +358,7 @@ static int davinci_pcm_new(struct snd_ca
 {
 	int ret;
 
+	sprintf(pcm->name, "%s-%d", dai->name, pcm->device);
 	if (!card->dev->dma_mask)
 		card->dev->dma_mask = &davinci_pcm_dmamask;
 	if (!card->dev->coherent_dma_mask)
Index: linux-2.6.18/sound/soc/davinci/davinci-pcm.h
===================================================================
--- linux-2.6.18.orig/sound/soc/davinci/davinci-pcm.h
+++ linux-2.6.18/sound/soc/davinci/davinci-pcm.h
@@ -12,17 +12,30 @@
 #ifndef _DAVINCI_PCM_H
 #define _DAVINCI_PCM_H
 
+#include <asm/arch/edma.h>
+
 struct davinci_pcm_dma_params {
-	char *name;		/* stream identifier */
-	int channel;		/* sync dma channel ID */
-	dma_addr_t dma_addr;	/* device physical address for DMA */
-	unsigned int data_type;	/* xfer data type */
+	char *name;			/* stream identifier */
+	int channel;			/* sync dma channel ID */
+	dma_addr_t dma_addr;		/* device physical address for DMA */
+	unsigned int data_type;		/* xfer data type */
+	enum dma_event_q eventq_no;	/* event queue number */
 };
 
 struct evm_snd_platform_data {
 	char *clk_name;
 	int tx_dma_ch;
 	int rx_dma_ch;
+	u32 tx_dma_offset;
+	u32 rx_dma_offset;
+	enum dma_event_q eventq_no;	/* event queue number */
+	unsigned int codec_fmt;
+
+	/* McASP specific fields */
+	int tdm_slots;
+	u8 op_mode;
+	u8 num_serializer;
+	u8 *serial_dir;
 };
 
 extern struct snd_soc_platform davinci_soc_platform;
Index: linux-2.6.18/mvl_patches/pro50-1567.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1567.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1567);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

