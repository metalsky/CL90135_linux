#! /usr/bin/env bash
# Patch: -pro_arm_da8xx_ui_nor_support
# Date: Thu Feb 19 15:11:50 2009
# Source: MontaVista Software, Inc.
# MR: 31602
# Type: Enhancement
# Disposition: needs submitting to DaVinci community
# Signed-off-by: Aleksey Makarov <amakarov@ru.mvista.com>
# Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
# Description:
# Support for the NOR flash on the DA8xx User Interface daugter board using the
# latch-addr-flash MTD mapping driver.
# 
#  arch/arm/mach-da8xx/Kconfig     |    7 +
#  arch/arm/mach-da8xx/board-evm.c |  195 +++++++++++++++++++++++++++++++++++++++-
#  2 files changed, 199 insertions(+), 3 deletions(-)
# 

PATCHNUM=2257
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 31602
Type: Enhancement
Disposition: needs submitting to DaVinci community
Signed-off-by: Aleksey Makarov <amakarov@ru.mvista.com>
Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
Description:
Support for the NOR flash on the DA8xx User Interface daugter board using the
latch-addr-flash MTD mapping driver.

 arch/arm/mach-da8xx/Kconfig     |    7 +
 arch/arm/mach-da8xx/board-evm.c |  195 +++++++++++++++++++++++++++++++++++++++-
 mvl_patches/pro50-2257.c        |   16 +++
 3 files changed, 215 insertions(+), 3 deletions(-)

Index: linux-2.6.18/arch/arm/mach-da8xx/Kconfig
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-da8xx/Kconfig
+++ linux-2.6.18/arch/arm/mach-da8xx/Kconfig
@@ -41,6 +41,13 @@ config DA8XX_UI_NAND
 	  communicate to the NAND flash. Do not forget to setup the switch
 	  correctly.
 
+config DA8XX_UI_NOR
+	bool "NOR flash"
+	help
+	  Configure this option to specify the that CE2/CE3 will be used to
+	  communicate to the NOR flash. Do not forget to setup the switch
+	  correctly.
+
 endchoice
 
 endif
Index: linux-2.6.18/arch/arm/mach-da8xx/board-evm.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-da8xx/board-evm.c
+++ linux-2.6.18/arch/arm/mach-da8xx/board-evm.c
@@ -16,10 +16,12 @@
 #include <linux/kernel.h>
 #include <linux/serial.h>
 #include <linux/serial_8250.h>
+#include <linux/clk.h>
 #include <linux/io.h>
 #include <linux/console.h>
 #include <linux/davinci_emac.h>
 #include <linux/usb/musb.h>
+#include <linux/mtd/latch-addr-flash.h>
 #include <linux/mtd/partitions.h>
 
 #include <asm/hardware.h>
@@ -42,7 +44,7 @@
 
 #define DAVINCI_DA8XX_UART_CLK		150000000
 
-#ifdef CONFIG_DA8XX_UI_NAND
+#if defined(CONFIG_DA8XX_UI_NAND)
 
 static struct mtd_partition da8xx_evm_nand_partitions[] = {
 	/* bootloader (U-Boot, etc) in first sector */
@@ -137,11 +139,198 @@ static struct platform_device da8xx_evm_
 	.resource	= da8xx_evm_nand_resources,
 };
 
-#endif	/* CONFIG_DA8XX_UI_NAND */
+#elif defined(CONFIG_DA8XX_UI_NOR)
+
+#define	SZ_32K	(32 * 1024)
+
+#define NOR_WINDOW_SIZE_LOG	15
+#define NOR_WINDOW_SIZE 	(1 << NOR_WINDOW_SIZE_LOG)
+
+static struct {
+	struct clk *clk;
+	struct {
+		struct resource *res;
+		void __iomem *addr;
+	} latch, aemif;
+} da8xx_evm_nor;
+
+static void da8xx_evm_nor_set_window(unsigned long offset, void *data)
+{
+	writeb(0, da8xx_evm_nor.latch.addr +
+	       (~3UL & (offset >> (NOR_WINDOW_SIZE_LOG - 2))));
+}
+
+static void da8xx_evm_nor_done(void *data)
+{
+	if (da8xx_evm_nor.clk != NULL) {
+		clk_disable(da8xx_evm_nor.clk);
+		clk_put(da8xx_evm_nor.clk);
+		da8xx_evm_nor.clk  = NULL;
+	}
+	if (da8xx_evm_nor.latch.addr != NULL) {
+		iounmap(da8xx_evm_nor.latch.addr);
+		da8xx_evm_nor.latch.addr = NULL;
+	}
+	if (da8xx_evm_nor.latch.res != NULL) {
+		release_mem_region(DA8XX_EMIF25_ASYNC_DATA_CE3_BASE, PAGE_SIZE);
+		da8xx_evm_nor.latch.res = NULL;
+	}
+	if (da8xx_evm_nor.aemif.addr != NULL) {
+		iounmap(da8xx_evm_nor.aemif.addr);
+		da8xx_evm_nor.aemif.addr = NULL;
+	}
+	if (da8xx_evm_nor.aemif.res != NULL) {
+		release_mem_region(DA8XX_EMIF25_CONTROL_BASE, SZ_32K);
+		da8xx_evm_nor.aemif.res = NULL;
+	}
+}
+
+static int da8xx_evm_nor_init(void *data)
+{
+	/*
+	 * Turn on AEMIF clocks
+	 */
+	da8xx_evm_nor.clk = clk_get(NULL, "AEMIFCLK");
+	if (IS_ERR(da8xx_evm_nor.clk)) {
+		printk(KERN_ERR "%s: could not get AEMIF clock\n", __func__);
+		da8xx_evm_nor.clk = NULL;
+		return -ENODEV;
+	}
+	clk_enable(da8xx_evm_nor.clk);
+
+	da8xx_evm_nor.aemif.res = request_mem_region(DA8XX_EMIF25_CONTROL_BASE,
+						     SZ_32K, "AEMIF control");
+	if (da8xx_evm_nor.aemif.res == NULL) {
+		printk(KERN_ERR	"%s: could not request AEMIF control region\n",
+		       __func__);
+		da8xx_evm_nor_done(data);
+		return -EBUSY;
+	}
+
+	da8xx_evm_nor.aemif.addr = ioremap_nocache(DA8XX_EMIF25_CONTROL_BASE,
+						   SZ_32K);
+	if (da8xx_evm_nor.aemif.addr == NULL) {
+		printk(KERN_ERR	"%s: could not remap AEMIF control region\n",
+		       __func__);
+		da8xx_evm_nor_done(data);
+		return -ENOMEM;
+	}
+
+	/*
+	 * Setup AEMIF -- timings, etc.
+	 */
+
+	/* Set maximum wait cycles */
+	writel(0xff, da8xx_evm_nor.aemif.addr + ASYNC_EMIF_AWCCR);
+
+	/* Set the async memory config register for NOR flash */
+	writel(0x00300608, da8xx_evm_nor.aemif.addr + ASYNC_EMIF_A1CR);
+
+	/* Set the async memory config register for the latch */
+	writel(0x00300388, da8xx_evm_nor.aemif.addr + ASYNC_EMIF_A2CR);
+
+	/*
+	 * Setup the window to access the latch
+	 */
+	da8xx_evm_nor.latch.res =
+		request_mem_region(DA8XX_EMIF25_ASYNC_DATA_CE3_BASE, PAGE_SIZE,
+				   "DA8xx UI NOR address latch");
+	if (da8xx_evm_nor.latch.res == NULL) {
+		printk(KERN_ERR	"%s: could not request address latch region\n",
+		       __func__);
+		da8xx_evm_nor_done(data);
+		return -EBUSY;
+	}
+
+	da8xx_evm_nor.latch.addr =
+		ioremap_nocache(DA8XX_EMIF25_ASYNC_DATA_CE3_BASE, PAGE_SIZE);
+	if (da8xx_evm_nor.latch.addr == NULL) {
+		printk(KERN_ERR	"%s: could not remap address latch region\n",
+		       __func__);
+		da8xx_evm_nor_done(data);
+		return -ENOMEM;
+	}
+
+	return 0;
+}
+
+static struct mtd_partition da8xx_evm_nor_partitions[] = {
+       /* bootloader (U-Boot, etc) in first 2 sectors */
+       [0] = {
+	       .name           = "bootloader",
+	       .offset         = 0,
+	       .size           = SZ_128K,
+	       .mask_flags     = MTD_WRITEABLE, /* force read-only */
+       },
+       /* bootloader parameters in the next 1 sector */
+       [1] = {
+	       .name           = "params",
+	       .offset         = MTDPART_OFS_APPEND,
+	       .size           = SZ_64K,
+	       .mask_flags     = 0,
+       },
+       /* kernel */
+       [2] = {
+	       .name           = "kernel",
+	       .offset         = MTDPART_OFS_APPEND,
+	       .size           = SZ_2M,
+	       .mask_flags     = 0
+       },
+       /* file system */
+       [3] = {
+	       .name           = "filesystem",
+	       .offset         = MTDPART_OFS_APPEND,
+	       .size           = MTDPART_SIZ_FULL,
+	       .mask_flags     = 0
+       }
+};
+
+static struct latch_addr_flash_data da8xx_evm_nor_pdata = {
+	.width		= 1,
+	.size		= SZ_4M,
+	.init		= da8xx_evm_nor_init,
+	.done		= da8xx_evm_nor_done,
+	.set_window	= da8xx_evm_nor_set_window,
+	.nr_parts	= ARRAY_SIZE(da8xx_evm_nor_partitions),
+	.parts		= da8xx_evm_nor_partitions,
+};
+
+static struct resource da8xx_evm_nor_resource[] = {
+	[0] = {
+		.start	= DA8XX_EMIF25_ASYNC_DATA_CE2_BASE,
+		.end	= DA8XX_EMIF25_ASYNC_DATA_CE2_BASE +
+			  NOR_WINDOW_SIZE - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+	[1] = {
+		.start	= DA8XX_EMIF25_ASYNC_DATA_CE3_BASE,
+		.end	= DA8XX_EMIF25_ASYNC_DATA_CE3_BASE + PAGE_SIZE - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+	[2] = {
+		.start	= DA8XX_EMIF25_CONTROL_BASE,
+		.end	= DA8XX_EMIF25_CONTROL_BASE + SZ_32K - 1,
+		.flags	= IORESOURCE_MEM,
+	}
+};
+
+static struct platform_device da8xx_evm_nor_device = {
+	.name		= "latch-addr-flash",
+	.id		= 0,
+	.dev		= {
+		.platform_data	= &da8xx_evm_nor_pdata,
+	},
+	.num_resources	= ARRAY_SIZE(da8xx_evm_nor_resource),
+	.resource	= da8xx_evm_nor_resource,
+};
+
+#endif	/* CONFIG_DA8XX_UI_NOR */
 
 static struct platform_device *da8xx_evm_devices[] __initdata = {
-#ifdef	CONFIG_DA8XX_UI_NAND
+#if defined(CONFIG_DA8XX_UI_NAND)
 	&da8xx_evm_nand_device,
+#elif defined(CONFIG_DA8XX_UI_NOR)
+	&da8xx_evm_nor_device,
 #endif
 };
 
Index: linux-2.6.18/mvl_patches/pro50-2257.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-2257.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2009 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(2257);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

