#! /usr/bin/env bash
# Patch: -pro_arm_davinci_cir_355
# Date: Fri Sep 19 14:00:31 2008
# Source: MontaVista Software, Inc.
# MR: 28263
# Type: Enhancement
# Disposition: Local
# Signed-off-by: Aleksey Makarov <amakarov@ru.mvista.com>
# Description:
#     Add Consumer InfraRed support for TI DaVinci DM355
# 

PATCHNUM=1573
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 28263
Type: Enhancement
Disposition: Local
Signed-off-by: Aleksey Makarov <amakarov@ru.mvista.com>
Description:
    Add Consumer InfraRed support for TI DaVinci DM355

Index: linux-2.6.18/drivers/char/Kconfig
===================================================================
--- linux-2.6.18.orig/drivers/char/Kconfig
+++ linux-2.6.18/drivers/char/Kconfig
@@ -1168,5 +1168,12 @@ config DM646x_CIR
 	help
 	  DM646x Consumer IR Driver
 
+config DM355_CIR
+	tristate "DM355 Consumer IR Driver"
+	default n
+	depends on MACH_DAVINCI_DM355_EVM && TI_MSP430
+	help
+	  DM355 Consumer IR Driver
+
 endmenu
 
Index: linux-2.6.18/drivers/char/Makefile
===================================================================
--- linux-2.6.18.orig/drivers/char/Makefile
+++ linux-2.6.18/drivers/char/Makefile
@@ -110,6 +110,7 @@ obj-$(CONFIG_TCG_TPM)		+= tpm/
 obj-$(CONFIG_DAVINCI_PWM) += davinci_pwm.o
 
 obj-$(CONFIG_DM646x_CIR)	+= cir.o
+obj-$(CONFIG_DM355_CIR)		+= cir_355.o
 
 # Files generated that shall be removed upon make clean
 clean-files := consolemap_deftbl.c defkeymap.c qtronixmap.c
Index: linux-2.6.18/drivers/char/cir_355.c
===================================================================
--- /dev/null
+++ linux-2.6.18/drivers/char/cir_355.c
@@ -0,0 +1,249 @@
+/*
+ * Copyright 2008 MontaVista Software Inc.
+ * Author: Aleksey Makarov <amakarov@ru.mvista.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/fs.h>
+#include <linux/cdev.h>
+#include <linux/platform_device.h>
+
+#include <asm/uaccess.h>
+#include <asm/arch/ti_msp430.h>
+
+#define CIR_DM355_DEV_COUNT	1
+
+#define COMMAND_CODE		0x00
+#define STATUS_CODE		0x01
+#define IR_DATA_COUNT		0x16
+#define IR_DATA_HIGH_BYTE	0x17
+#define IR_DATA_LOW_BYTE	0x18
+
+static dev_t cir_dm355_dev;
+static u32 cir_dm355_major_number;
+static u32 cir_dm355_minor_number;
+static struct cdev cir_dm355_cdev;
+
+static struct class *cir_class;
+
+static void cir_dm355_platform_release(struct device *device)
+{
+}
+
+static struct platform_device cir_dm355_device = {
+	.name = "cir_dm355",
+	.id = 0,
+	.dev = {
+		.release = cir_dm355_platform_release,
+	}
+};
+
+static struct device_driver cir_dm355_driver = {
+	.name = "cir_dm355",
+	.bus = &platform_bus_type,
+};
+
+static int reset_done;
+
+static int reset_cir(void)
+{
+
+	int err;
+
+	/*reset status code register */
+	err = ti_msp430_write(STATUS_CODE, 0x00);
+	if (err) {
+		printk (KERN_ERR "ti_msp430_read() error: %d\n", err);
+		return err;
+	}
+
+	/* reinitialize IR remote */
+	err = ti_msp430_write(COMMAND_CODE, 0x05);
+	if (err) {
+		printk (KERN_ERR "ti_msp430_read() error: %d\n", err);
+		return err;
+	}
+
+	reset_done = 1;
+
+	return 0;
+}
+
+static int read_status(void)
+{
+
+	int err;
+	u8 value;
+
+	err = ti_msp430_read(STATUS_CODE, &value);
+	if (err) {
+		printk (KERN_ERR "ti_msp430_read() error: %d\n", err);
+		return err;
+	}
+
+	return (int)value;
+}
+
+ssize_t cir_dm355_read (struct file *file, char __user *buff, size_t size, loff_t
+		  *loff)
+{
+	u8 value;
+	u16 value_full;
+	ssize_t retval = 0;
+	int err;
+
+	if (!reset_done) {
+		err = reset_cir();
+		if (err)
+			return err;
+	}
+
+	if (size < sizeof(u16)) {
+		printk (KERN_ERR "Invalid size requested for read\n");
+		return -EINVAL;
+	}
+
+	while (size >= sizeof(u16)) {
+
+		err = ti_msp430_read(IR_DATA_HIGH_BYTE, &value);
+		if (err) {
+			printk (KERN_ERR "ti_msp430_read() error: %d\n", err);
+			return err;
+		}
+
+		value_full = value << 8;
+
+		err = ti_msp430_read(IR_DATA_LOW_BYTE, &value);
+		if (err) {
+			printk (KERN_ERR "ti_msp430_read() error: %d\n", err);
+			return err;
+		}
+
+		value_full |= value;
+
+		if (value_full == 0xdead)
+			break;
+
+		if (copy_to_user(buff, &value_full, sizeof(value_full)) != 0)
+			return -EFAULT;
+
+		buff += sizeof(u16);
+		size -= sizeof(u16);
+		*loff += sizeof(u16);
+		retval += sizeof(u16);
+
+		err = read_status();
+		if (err < 0)
+			return err;
+		if (err & 0x08) {
+			reset_cir();
+			return -EIO;
+		}
+
+	}
+
+	return retval;
+}
+
+static struct file_operations cir_dm355_fops = {
+	.owner   = THIS_MODULE,
+	.read    = cir_dm355_read,
+};
+
+static int __init cir_dm355_init ( void )
+{
+	s8 retval = 0;
+
+	cir_dm355_major_number = 0;
+	cir_dm355_minor_number = 0;
+	cir_class = NULL;
+
+	retval = alloc_chrdev_region (&cir_dm355_dev, cir_dm355_minor_number,
+			CIR_DM355_DEV_COUNT, "/dev/cir");
+	if (retval < 0) {
+		printk (KERN_ERR "Unable to register the CIR device\n");
+		retval = -ENODEV;
+		goto failure;
+	}
+
+	cir_dm355_major_number = MAJOR(cir_dm355_dev);
+
+	cdev_init (&cir_dm355_cdev, &cir_dm355_fops);
+	cir_dm355_cdev.owner = THIS_MODULE;
+	cir_dm355_cdev.ops = &cir_dm355_fops;
+
+	retval = cdev_add (&cir_dm355_cdev, cir_dm355_dev, CIR_DM355_DEV_COUNT);
+	if (retval) {
+		unregister_chrdev_region (cir_dm355_dev, CIR_DM355_DEV_COUNT);
+		printk (KERN_ERR "Error %d adding CIR device\n", retval);
+		goto failure;
+	}
+
+	cir_class = class_create(THIS_MODULE, "cir");
+
+	if (!cir_class) {
+		unregister_chrdev_region (cir_dm355_dev, CIR_DM355_DEV_COUNT);
+		cdev_del(&cir_dm355_cdev);
+		goto failure;
+	}
+
+	if (driver_register(&cir_dm355_driver) != 0) {
+		unregister_chrdev_region (cir_dm355_dev, CIR_DM355_DEV_COUNT);
+		cdev_del(&cir_dm355_cdev);
+		class_destroy(cir_class);
+		goto failure;
+	}
+	/* Register the drive as a platform device */
+	if (platform_device_register(&cir_dm355_device) != 0) {
+		driver_unregister(&cir_dm355_driver);
+		unregister_chrdev_region (cir_dm355_dev, CIR_DM355_DEV_COUNT);
+		cdev_del(&cir_dm355_cdev);
+		class_destroy(cir_class);
+		goto failure;
+	}
+
+	cir_dm355_dev = MKDEV(cir_dm355_major_number, 0);
+
+	class_device_create(cir_class, NULL, cir_dm355_dev, NULL, "cir");
+
+ failure:
+	return retval;
+}
+
+static void __exit cir_dm355_exit ( void )
+{
+	printk (KERN_INFO "Unregistering the CIR device");
+
+	driver_unregister(&cir_dm355_driver);
+	platform_device_unregister(&cir_dm355_device);
+	cir_dm355_dev = MKDEV(cir_dm355_major_number, 0);
+	class_device_destroy(cir_class, cir_dm355_dev);
+	class_destroy(cir_class);
+	cdev_del(&cir_dm355_cdev);
+	unregister_chrdev_region(cir_dm355_dev, CIR_DM355_DEV_COUNT);
+
+	return;
+}
+
+module_init (cir_dm355_init);
+module_exit (cir_dm355_exit);
+
+MODULE_AUTHOR ( "MontaVista" );
+MODULE_DESCRIPTION ( "Consumer Infrared (CIR) Driver for TI DaVinci DM355" );
+MODULE_LICENSE ( "GPL" );
Index: linux-2.6.18/mvl_patches/pro50-1573.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1573.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1573);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

