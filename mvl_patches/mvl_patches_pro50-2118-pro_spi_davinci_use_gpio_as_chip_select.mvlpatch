#! /usr/bin/env bash
# Patch: -pro_spi_davinci_use_gpio_as_chip_select
# Date: Thu Feb 19 15:01:39 2009
# Source: MontaVista Software, Inc.
# MR: 30871
# Type: Enhancement
# Disposition: needs submitting to spi-devel-general
# Signed-off-by: Steve Chen <schen@mvista.com>
# Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
# Description:
# Add capability to use GPIO as SPI chip select as the SPI chip select is not
# always available due to PinMux conflicts.
# 
#  drivers/spi/davinci_spi_master.c |   44 +++++++++++++++++++++++++++++++++++----
#  include/linux/spi/davinci_spi.h  |    2 +
#  2 files changed, 42 insertions(+), 4 deletions(-)
# 

PATCHNUM=2118
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 30871
Type: Enhancement
Disposition: needs submitting to spi-devel-general
Signed-off-by: Steve Chen <schen@mvista.com>
Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
Description:
Add capability to use GPIO as SPI chip select as the SPI chip select is not
always available due to PinMux conflicts.

 drivers/spi/davinci_spi_master.c |   44 +++++++++++++++++++++++++++++++++++----
 include/linux/spi/davinci_spi.h  |    2 +
 mvl_patches/pro50-2118.c         |   16 ++++++++++++++
 3 files changed, 58 insertions(+), 4 deletions(-)

Index: linux-2.6.18/drivers/spi/davinci_spi_master.c
===================================================================
--- linux-2.6.18.orig/drivers/spi/davinci_spi_master.c
+++ linux-2.6.18/drivers/spi/davinci_spi_master.c
@@ -25,6 +25,7 @@
 #include <asm/arch/edma.h>
 #include <asm/arch/cpu.h>
 #include <asm/arch/mux.h>
+#include <asm/arch/gpio.h>
 
 #ifdef CONFIG_SPI_DAVINCI_DMA
 static unsigned use_dma = 1;
@@ -116,11 +117,23 @@ static void davinci_spi_chipselect(struc
 {
 	struct davinci_spi *davinci_spi;
 	u32 data1_reg_val = 0;
+	struct davinci_spi_platform_data *pdata;
+	int i;
+
 	davinci_spi = spi_master_get_devdata(spi->master);
+	pdata = davinci_spi->pdata;
 
 	/* board specific chip select logic decides the polarity and cs */
 	/* line for the controller */
 	if (value == BITBANG_CS_INACTIVE) {
+		/* set all chip select high */
+		if (pdata->chip_sel != NULL) {
+			for (i = 0; i < pdata->num_chipselect; i++) {
+				if (pdata->chip_sel[i] != DAVINCI_SPI_INTERN_CS)
+					gpio_set_value(pdata->chip_sel[i], 1);
+			}
+		}
+
 		set_bits(davinci_spi->base + SPIDEF, CS_DEFAULT);
 
 		data1_reg_val |= CS_DEFAULT << SPI_SPIDAT1_CSNR_SHIFT;
@@ -498,8 +511,10 @@ static int davinci_spi_bufs_pio(struct s
 	u32 tx_data, data1_reg_val;
 	struct davinci_spi_config_t *spi_cfg;
 	u32 buf_val, flg_val;
+	struct davinci_spi_platform_data *pdata;
 
 	davinci_spi = spi_master_get_devdata(spi->master);
+	pdata = davinci_spi->pdata;
 
 	davinci_spi->tx = t->tx_buf;
 	davinci_spi->rx = t->rx_buf;
@@ -525,9 +540,15 @@ static int davinci_spi_bufs_pio(struct s
 	count = davinci_spi->count;
 	data1_reg_val = spi_cfg->cs_hold << SPI_SPIDAT1_CSHOLD_SHIFT;
 
-	/* CD default = 0xFF */
 	tmp = ~(0x1 << spi->chip_select);
-	clear_bits(davinci_spi->base + SPIDEF, ~tmp);
+	/* CD default = 0xFF */
+	/* check for GPIO */
+	if ((pdata->chip_sel != NULL) &&
+	    (pdata->chip_sel[spi->chip_select] != DAVINCI_SPI_INTERN_CS))
+		gpio_set_value(pdata->chip_sel[spi->chip_select], 0);
+	 else
+		clear_bits(davinci_spi->base + SPIDEF, ~tmp);
+
 	data1_reg_val |= tmp << SPI_SPIDAT1_CSNR_SHIFT;
 
 	while (1)
@@ -638,10 +659,11 @@ static int davinci_spi_bufs_dma(struct s
 	struct davinci_spi_dma *davinci_spi_dma;
 	int word_len, data_type, ret;
 	unsigned long tx_reg, rx_reg;
-
 	struct davinci_spi_config_t *spi_cfg;
+	struct davinci_spi_platform_data *pdata;
 
 	davinci_spi = spi_master_get_devdata(spi->master);
+	pdata = davinci_spi->pdata;
 
 	BUG_ON(davinci_spi->dma_channels == NULL);
 
@@ -687,7 +709,12 @@ static int davinci_spi_bufs_dma(struct s
 
 	/* CD default = 0xFF */
 	tmp = ~(0x1 << spi->chip_select);
-	clear_bits(davinci_spi->base + SPIDEF, ~tmp);
+	if ((pdata->chip_sel != NULL) &&
+	    (pdata->chip_sel[spi->chip_select] != DAVINCI_SPI_INTERN_CS))
+		gpio_set_value(pdata->chip_sel[spi->chip_select], 0);
+	 else
+		clear_bits(davinci_spi->base + SPIDEF, ~tmp);
+
 	data1_reg_val |= tmp << SPI_SPIDAT1_CSNR_SHIFT;
 
 	/* disable all interrupts for dma transfers */
@@ -923,6 +950,15 @@ static int davinci_spi_probe(struct devi
 
 	davinci_spi->pbase = r->start;
 	davinci_spi->region_size = r->end - r->start + 1;
+	davinci_spi->pdata = pdata;
+
+	/* initialize gpio used as chip select */
+	if (pdata->chip_sel != NULL) {
+		for (i = 0; i < pdata->num_chipselect; i++) {
+			if (pdata->chip_sel[i] != DAVINCI_SPI_INTERN_CS)
+				gpio_direction_output(pdata->chip_sel[i], 1);
+		}
+	}
 
 	mem = request_mem_region(r->start, davinci_spi->region_size, dev->name);
 	if (mem == NULL) {
Index: linux-2.6.18/include/linux/spi/davinci_spi.h
===================================================================
--- linux-2.6.18.orig/include/linux/spi/davinci_spi.h
+++ linux-2.6.18/include/linux/spi/davinci_spi.h
@@ -25,6 +25,8 @@
 #define IORESOURCE_DMA_TX_CHAN		0x02
 #define IORESOURCE_DMA_EVENT_Q		0x04
 
+#define DAVINCI_SPI_INTERN_CS		0xFF
+
 enum {
 	DAVINCI_SPI_VERSION_1, /* Original on most Davinci's */
 	DAVINCI_SPI_VERSION_2, /* New one on DA8xx */
Index: linux-2.6.18/mvl_patches/pro50-2118.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-2118.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2009 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(2118);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

