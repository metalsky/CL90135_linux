#! /usr/bin/env bash
# Patch: -pro_musb_hdrc_Search_and_replace_bDesiredMode_with_desi
# Date: Fri Sep 19 14:09:25 2008
# From 6b0e0423e90a982bb5a9d3292e68f5bf7bd36537 Mon Sep 17 00:00:00 2001
# From: Tony Lindgren <tony@atomide.com>
# Date: Mon, 13 Aug 2007 04:55:31 -0700
# Subject: [PATCH] musb_hdrc: Search and replace bDesiredMode with desired_mode
# 
# Search and replace bDesiredMode with desired_mode
# 
# Signed-off-by: Tony Lindgren <tony@atomide.com>
# (cherry picked from commit c74a37e9afbca8f3b593321ee664bd1bb889847c)

PATCHNUM=1698
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
From 6b0e0423e90a982bb5a9d3292e68f5bf7bd36537 Mon Sep 17 00:00:00 2001
From: Tony Lindgren <tony@atomide.com>
Date: Mon, 13 Aug 2007 04:55:31 -0700
Subject: [PATCH] musb_hdrc: Search and replace bDesiredMode with desired_mode

Search and replace bDesiredMode with desired_mode

Signed-off-by: Tony Lindgren <tony@atomide.com>
(cherry picked from commit c74a37e9afbca8f3b593321ee664bd1bb889847c)
Index: linux-2.6.18/drivers/usb/musb/dma.h
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/dma.h
+++ linux-2.6.18/drivers/usb/musb/dma.h
@@ -105,7 +105,7 @@ struct dma_controller;
  *	transaction (typically representing many USB maximum-sized packets)
  * @actual_len: how many bytes have been transferred
  * @status: current channel status (updated e.g. on interrupt)
- * @bDesiredMode: TRUE if mode 1 is desired; FALSE if mode 0 is desired
+ * @desired_mode: TRUE if mode 1 is desired; FALSE if mode 0 is desired
  *
  * channels are associated with an endpoint for the duration of at least
  * one usb transfer.
@@ -116,7 +116,7 @@ struct dma_channel {
 	size_t			max_len;
 	size_t			actual_len;
 	enum dma_channel_status	status;
-	u8			bDesiredMode;
+	u8			desired_mode;
 };
 
 /*
Index: linux-2.6.18/drivers/usb/musb/musb_gadget.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musb_gadget.c
+++ linux-2.6.18/drivers/usb/musb/musb_gadget.c
@@ -306,16 +306,16 @@ static void txstate(struct musb *musb, s
 			request_size = min(pRequest->length,
 						musb_ep->dma->max_len);
 			if (request_size <= musb_ep->wPacketSize)
-				musb_ep->dma->bDesiredMode = 0;
+				musb_ep->dma->desired_mode = 0;
 			else
-				musb_ep->dma->bDesiredMode = 1;
+				musb_ep->dma->desired_mode = 1;
 
 			use_dma = use_dma && c->channel_program(
 					musb_ep->dma, musb_ep->wPacketSize,
-					musb_ep->dma->bDesiredMode,
+					musb_ep->dma->desired_mode,
 					pRequest->dma, request_size);
 			if (use_dma) {
-				if (musb_ep->dma->bDesiredMode == 0) {
+				if (musb_ep->dma->desired_mode == 0) {
 					/* ASSERT: DMAENAB is clear */
 					wCsrVal &= ~(MGC_M_TXCSR_AUTOSET |
 							MGC_M_TXCSR_DMAMODE);
@@ -487,7 +487,7 @@ void musb_g_tx(struct musb *musb, u8 epn
 							== 0)
 #ifdef CONFIG_USB_INVENTRA_DMA
 					|| (is_dma &&
-						((!dma->bDesiredMode) ||
+						((!dma->desired_mode) ||
 						    (pRequest->actual &
 						    (musb_ep->wPacketSize - 1))))
 #endif
@@ -666,14 +666,14 @@ static void rxstate(struct musb *musb, s
 					transfer_size = len;
 #endif
 					if (transfer_size <= musb_ep->wPacketSize)
-						musb_ep->dma->bDesiredMode = 0;
+						musb_ep->dma->desired_mode = 0;
 					else
-						musb_ep->dma->bDesiredMode = 1;
+						musb_ep->dma->desired_mode = 1;
 
 					use_dma = c->channel_program(
 							channel,
 							musb_ep->wPacketSize,
-							channel->bDesiredMode,
+							channel->desired_mode,
 							pRequest->dma
 							+ pRequest->actual,
 							transfer_size);
@@ -701,7 +701,7 @@ static void rxstate(struct musb *musb, s
 
 				ret = c->channel_program(channel,
 						musb_ep->wPacketSize,
-						channel->bDesiredMode,
+						channel->desired_mode,
 						dma_addr,
 						fifo_count);
 				if (ret == TRUE)
@@ -805,7 +805,7 @@ void musb_g_rx(struct musb *musb, u8 epn
 
 #if defined(CONFIG_USB_INVENTRA_DMA) || defined(CONFIG_USB_TUSB_OMAP_DMA)
 		/* Autoclear doesn't clear RxPktRdy for short packets */
-		if ((dma->bDesiredMode == 0)
+		if ((dma->desired_mode == 0)
 				|| (dma->actual_len
 					& (musb_ep->wPacketSize - 1))) {
 			/* ack the read! */
Index: linux-2.6.18/drivers/usb/musb/musb_host.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musb_host.c
+++ linux-2.6.18/drivers/usb/musb/musb_host.c
@@ -774,12 +774,12 @@ static void musb_ep_program(struct musb 
 			qh->segsize = min(dwLength, pDmaChannel->max_len);
 
 			if (qh->segsize <= wPacketSize)
-				pDmaChannel->bDesiredMode = 0;
+				pDmaChannel->desired_mode = 0;
 			else
-				pDmaChannel->bDesiredMode = 1;
+				pDmaChannel->desired_mode = 1;
 
 
-			if (pDmaChannel->bDesiredMode == 0) {
+			if (pDmaChannel->desired_mode == 0) {
 				wCsr &= ~(MGC_M_TXCSR_AUTOSET
 					| MGC_M_TXCSR_DMAMODE);
 				wCsr |= (MGC_M_TXCSR_DMAENAB);
@@ -793,7 +793,7 @@ static void musb_ep_program(struct musb 
 
 			bDmaOk = dma_controller->channel_program(
 					pDmaChannel, wPacketSize,
-					pDmaChannel->bDesiredMode,
+					pDmaChannel->desired_mode,
 					pUrb->transfer_dma,
 					qh->segsize);
 			if (bDmaOk) {
@@ -1569,7 +1569,7 @@ void musb_host_rx(struct musb *musb, u8 
 
 			c = musb->dma_controller;
 
-			dma->bDesiredMode = 0;
+			dma->desired_mode = 0;
 #ifdef USE_MODE1
 			/* because of the issue below, mode 1 will
 			 * only rarely behave with correct semantics.
@@ -1579,7 +1579,7 @@ void musb_host_rx(struct musb *musb, u8 
 				&& (pUrb->transfer_buffer_length -
 						pUrb->actual_length)
 					> qh->maxpacket)
-				dma->bDesiredMode = 1;
+				dma->desired_mode = 1;
 #endif
 
 /* Disadvantage of using mode 1:
@@ -1602,7 +1602,7 @@ void musb_host_rx(struct musb *musb, u8 
 			wVal = musb_readw(epio, MGC_O_HDRC_RXCSR);
 			wVal &= ~MGC_M_RXCSR_H_REQPKT;
 
-			if (dma->bDesiredMode == 0)
+			if (dma->desired_mode == 0)
 				wVal &= ~MGC_M_RXCSR_H_AUTOREQ;
 			else
 				wVal |= MGC_M_RXCSR_H_AUTOREQ;
@@ -1617,10 +1617,10 @@ void musb_host_rx(struct musb *musb, u8 
 			 */
 			status = c->channel_program(
 				dma, qh->maxpacket,
-				dma->bDesiredMode,
+				dma->desired_mode,
 				pUrb->transfer_dma
 					+ pUrb->actual_length,
-				(dma->bDesiredMode == 0)
+				(dma->desired_mode == 0)
 					? wRxCount
 					: pUrb->transfer_buffer_length);
 
Index: linux-2.6.18/drivers/usb/musb/musbhsdma.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musbhsdma.c
+++ linux-2.6.18/drivers/usb/musb/musbhsdma.c
@@ -147,7 +147,7 @@ static struct dma_channel* dma_channel_a
 			pChannel->status = MGC_DMA_STATUS_FREE;
 			pChannel->max_len = 0x10000;
 			/* Tx => mode 1; Rx => mode 0 */
-			pChannel->bDesiredMode = bTransmit;
+			pChannel->desired_mode = bTransmit;
 			pChannel->actual_len = 0;
 			break;
 		}
@@ -348,7 +348,7 @@ static irqreturn_t dma_controller_irq(in
 				/* completed */
 				if ((devctl & MGC_M_DEVCTL_HM)
 				    && (pImplChannel->bTransmit)
-				    && ((pChannel->bDesiredMode == 0)
+				    && ((pChannel->desired_mode == 0)
 					|| (pChannel->actual_len &
 					    (pImplChannel->wMaxPacketSize - 1)))
 				   ) {
Index: linux-2.6.18/drivers/usb/musb/tusb6010_omap.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/tusb6010_omap.c
+++ linux-2.6.18/drivers/usb/musb/tusb6010_omap.c
@@ -549,7 +549,7 @@ tusb_omap_dma_allocate(struct dma_contro
 	chdat->tusb_dma = tusb_dma;
 
 	channel->max_len = 0x7fffffff;
-	channel->bDesiredMode = 0;
+	channel->desired_mode = 0;
 	channel->actual_len = 0;
 
 	if (dmareq_works()) {
Index: linux-2.6.18/mvl_patches/pro50-1698.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1698.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1698);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

