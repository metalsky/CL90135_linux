#! /usr/bin/env bash
# Patch: -pro_alsa_soc_tlv320aic3x_add_oss_mixer_controls
# Date: Thu Feb 19 14:59:34 2009
# Source: MontaVista Software, Inc. 
# MR: 31754
# Type:  Enhancement
# Disposition: needs submitting to alsa-devel
# Signed-off-by: Pavel Kiryukhin <pkiryukhin@ru.mvista.com>
# Description: 
# 1) reverts pro_arm_davinci_tlv3x_register_capture_for_oss_emulation.patch
# 2) adds oss mixer controls: mic and line capture volume and switch, common gain.
# 
#  sound/soc/codecs/tlv320aic3x.c |  155 ++++++++++++++++++++++++++++++++++++++---
#  1 files changed, 147 insertions(+), 8 deletions(-)
# 

PATCHNUM=2087
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc. 
MR: 31754
Type:  Enhancement
Disposition: needs submitting to alsa-devel
Signed-off-by: Pavel Kiryukhin <pkiryukhin@ru.mvista.com>
Description: 
1) reverts pro_arm_davinci_tlv3x_register_capture_for_oss_emulation.patch
2) adds oss mixer controls: mic and line capture volume and switch, common gain.

 mvl_patches/pro50-2087.c       |   16 ++++
 sound/soc/codecs/tlv320aic3x.c |  155 ++++++++++++++++++++++++++++++++++++++---
 2 files changed, 163 insertions(+), 8 deletions(-)

Index: linux-2.6.18/sound/soc/codecs/tlv320aic3x.c
===================================================================
--- linux-2.6.18.orig/sound/soc/codecs/tlv320aic3x.c
+++ linux-2.6.18/sound/soc/codecs/tlv320aic3x.c
@@ -202,6 +202,142 @@ static int snd_soc_dapm_put_volsw_aic3x(
 	return ret;
 }
 
+#ifdef CONFIG_SND_MIXER_OSS
+static int tlv320aic3x_gain_put(struct snd_kcontrol *kcontrol,
+				struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
+	int err;
+	int reg_l = kcontrol->private_value & 0x7f;
+	int reg_r = (kcontrol->private_value >> 7) & 0x7f;
+	int shift_l = (kcontrol->private_value >> 14) & 0x1f;
+	int shift_r = (kcontrol->private_value >> 19) & 0x1f;
+	int mask = (kcontrol->private_value >> 24) & 0x0f;
+	int nlevels = (kcontrol->private_value >> 28) & 0x0f;
+	unsigned short val_l, val_r, val_l_mask, val_r_mask;
+
+	val_l_mask = mask << shift_l;
+	val_r_mask = mask << shift_r;
+	val_r = (ucontrol->value.integer.value[0] & mask);
+	val_l = (ucontrol->value.integer.value[1] & mask);
+	val_l = nlevels - val_l;
+	val_r = nlevels - val_r;
+	if (val_l >= nlevels)
+		val_l = mask;
+	if (val_r >= nlevels)
+		val_r = mask;
+	val_l = val_l << shift_l;
+	val_r = val_r << shift_r;
+	err = snd_soc_update_bits(codec, reg_l, val_l_mask, val_l);
+	if (err < 0)
+		return err;
+	err = snd_soc_update_bits(codec, reg_r, val_r_mask, val_r);
+	return err;
+}
+static int tlv320aic3x_gain_get(struct snd_kcontrol *kcontrol,
+				struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
+	int reg_l = kcontrol->private_value & 0x7f;
+	int reg_r = (kcontrol->private_value >> 7) & 0x7f;
+	int shift_l = (kcontrol->private_value >> 14) & 0x1f;
+	int shift_r = (kcontrol->private_value >> 19) & 0x1f;
+	int mask = (kcontrol->private_value >> 24) & 0x0f;
+	int nlevels = (kcontrol->private_value >> 28) & 0x0f;
+	int val_l, val_r;
+
+	val_l = (aic3x_read_reg_cache(codec, reg_l) >> shift_l) & mask;
+	if (val_l == mask)
+		val_l = nlevels;
+	val_r = (aic3x_read_reg_cache(codec, reg_r) >> shift_r) & mask;
+	if (val_r == mask)
+		val_r = nlevels;
+	ucontrol->value.integer.value[0] = nlevels - val_r;
+	ucontrol->value.integer.value[1] = nlevels - val_l;
+	return 0;
+}
+
+static int tlv320aic3x_gain_info(struct snd_kcontrol *kcontrol,
+				 struct snd_ctl_elem_info *uinfo)
+{
+	uinfo->type = SNDRV_CTL_ELEM_TYPE_INTEGER;
+	uinfo->count = 2;
+	uinfo->value.integer.min = 0;
+	uinfo->value.integer.max = (kcontrol->private_value >> 28) & 0x0f;
+	return 0;
+}
+
+static int tlv320aic3x_switch_get(struct snd_kcontrol *kcontrol,
+				  struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
+	int reg_l = kcontrol->private_value & 0x7f;
+	int reg_r = (kcontrol->private_value >> 7) & 0x7f;
+	int shift_l = (kcontrol->private_value >> 14) & 0x1f;
+	int shift_r = (kcontrol->private_value >> 19) & 0x1f;
+	int mask = (kcontrol->private_value >> 24) & 0x0f;
+	int val_l, val_r;
+	val_l = (aic3x_read_reg_cache(codec, reg_l) >> shift_l) & mask;
+	val_r = (aic3x_read_reg_cache(codec, reg_r) >> shift_r) & mask;
+	ucontrol->value.integer.value[0] = ((val_l & val_r) == mask) ? 0 : 1;
+	return 0;
+}
+
+static int tlv320aic3x_switch_put(struct snd_kcontrol *kcontrol,
+				  struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
+	int err;
+	int reg_l = kcontrol->private_value & 0x7f;
+	int reg_r = (kcontrol->private_value >> 7) & 0x7f;
+	int shift_l = (kcontrol->private_value >> 14) & 0x1f;
+	int shift_r = (kcontrol->private_value >> 19) & 0x1f;
+	int mask = (kcontrol->private_value >> 24) & 0x0f;
+	int val_l, val_r;
+	unsigned short val_mask_l = mask << shift_l;
+	unsigned short val_mask_r = mask << shift_r;
+	if (ucontrol->value.integer.value[0])
+		val_l = val_r = 0; /*Set 0.0 dB gain*/
+	else { /*Disconnect from ADC PGA*/
+		val_l = val_mask_l;
+		val_r = val_mask_r;
+	}
+	err = snd_soc_update_bits(codec, reg_l, val_mask_l, val_l);
+	if (err < 0)
+		return err;
+	err = snd_soc_update_bits(codec, reg_r, val_mask_r, val_r);
+	return err;
+}
+
+static int tlv320aic3x_switch_info(struct snd_kcontrol *kcontrol,
+				   struct snd_ctl_elem_info *uinfo)
+{
+	uinfo->type = SNDRV_CTL_ELEM_TYPE_INTEGER;
+	uinfo->count = 1;
+	uinfo->value.integer.min = 0;
+	uinfo->value.integer.max = 1;
+	return 0;
+}
+
+#define TLV320AIC3X_GAIN_DOUBLE(xname, reg_left, reg_right, \
+		shift_left, shift_right, mask, nlevels) \
+{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = (xname), \
+	.info = tlv320aic3x_gain_info, \
+	.get = tlv320aic3x_gain_get, .put = tlv320aic3x_gain_put, \
+	.private_value = (reg_left) | ((reg_right) << 7)  | \
+		((shift_left) << 14) | ((shift_right) << 19) | \
+		((mask) << 24) | ((nlevels) << 28)}
+
+#define TLV320AIC3X_GAIN_SWITCH(xname, reg_left, reg_right, \
+		shift_left, shift_right, mask) \
+{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = (xname), \
+	.info = tlv320aic3x_switch_info, \
+	.get = tlv320aic3x_switch_get, .put = tlv320aic3x_switch_put, \
+	.private_value = (reg_left) | ((reg_right) << 7)  | \
+		((shift_left) << 14) | ((shift_right) << 19) | \
+		((mask) << 24)}
+#endif
+
 static const char *aic3x_left_dac_mux[] = { "DAC_L1", "DAC_L3", "DAC_L2" };
 static const char *aic3x_right_dac_mux[] = { "DAC_R1", "DAC_R3", "DAC_R2" };
 static const char *aic3x_left_hpcom_mux[] =
@@ -231,12 +367,6 @@ static const struct soc_enum aic3x_enum[
 	SOC_ENUM_SINGLE(LINE2R_2_RADC_CTRL, 7, 2, aic3x_linein_mode_mux),
 };
 
-static const char *capture_intfc_names[] = {"Mic", "Line"};
-static const struct soc_enum capture_intfc = {
-	.texts = capture_intfc_names,
-	.mask = ARRAY_SIZE(capture_intfc_names),
-};
-
 static const struct snd_kcontrol_new aic3x_snd_controls[] = {
 	/* Output */
 	SOC_DOUBLE_R("PCM Playback Volume", LDAC_VOL, RDAC_VOL, 0, 0x7f, 1),
@@ -313,8 +443,17 @@ static const struct snd_kcontrol_new aic
 	/* enable stereo */
 	SOC_SINGLE("Enable Stereo Switch", DAC_PWR, 6, 0x01, 0),
 
-	SOC_ENUM("Capture Source", capture_intfc),
-
+#ifdef CONFIG_SND_MIXER_OSS
+	SOC_DOUBLE_R("Capture Volume", LADC_VOL, RADC_VOL, 0, 0x7f, 0),
+	TLV320AIC3X_GAIN_DOUBLE("Mic Volume", MIC3LR_2_LADC_CTRL,
+		MIC3LR_2_RADC_CTRL, 4, 0, 0xf, 9),
+	TLV320AIC3X_GAIN_SWITCH("Mic Capture Switch", MIC3LR_2_LADC_CTRL,
+		MIC3LR_2_RADC_CTRL, 4, 0, 0xf),
+	TLV320AIC3X_GAIN_DOUBLE("Line Volume", LINE1L_2_LADC_CTRL,
+		LINE1R_2_RADC_CTRL, 3, 3, 0xf, 9),
+	TLV320AIC3X_GAIN_SWITCH("Line Capture Switch", LINE1L_2_LADC_CTRL,
+		LINE1R_2_RADC_CTRL, 3, 3, 0xf),
+#endif
 };
 
 /* add non dapm controls */
Index: linux-2.6.18/mvl_patches/pro50-2087.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-2087.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2009 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(2087);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

