#! /usr/bin/env bash
# Patch: -pro_usb_musb_host_iso_ep_reservation_fix
# Date: Thu Feb 19 14:56:32 2009
# Source: MontaVista Software, Inc.
# MR: 29116
# Type: Defect Fix
# Disposition: local
# Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
# Description:
# Prevent starting transfer from/to another ISO endpoint when one is already in
# progress.  Check that the packet size doesn't exceed the FIFO size. Allow the
# endpoint reservation with a static FIFO configuration too. Make the isochronous
# endpoint reservation available in the OTG mode and, while at it, clean up the
# corresponding Kconfig entry...
# 
#  drivers/usb/musb/Kconfig     |   17 ++++++++---------
#  drivers/usb/musb/musb_core.c |    9 +++++++--
#  drivers/usb/musb/musb_host.c |   24 ++++++++++++++++++------
#  3 files changed, 33 insertions(+), 17 deletions(-)
# 

PATCHNUM=2042
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 29116
Type: Defect Fix
Disposition: local
Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
Description:
Prevent starting transfer from/to another ISO endpoint when one is already in
progress.  Check that the packet size doesn't exceed the FIFO size. Allow the
endpoint reservation with a static FIFO configuration too. Make the isochronous
endpoint reservation available in the OTG mode and, while at it, clean up the
corresponding Kconfig entry...

 drivers/usb/musb/Kconfig     |   17 ++++++++---------
 drivers/usb/musb/musb_core.c |    9 +++++++--
 drivers/usb/musb/musb_host.c |   24 ++++++++++++++++++------
 mvl_patches/pro50-2042.c     |   16 ++++++++++++++++
 4 files changed, 49 insertions(+), 17 deletions(-)

Index: linux-2.6.18/drivers/usb/musb/Kconfig
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/Kconfig
+++ linux-2.6.18/drivers/usb/musb/Kconfig
@@ -141,15 +141,14 @@ config MUSB_PIO_ONLY
 	  you can still disable it at run time using the "use_dma=n" module
 	  parameter.
 
-config  MUSB_RESERVE_ISO_EP
-	boolean "Reserve ISO EndPoints"
-	depends on USB && USB_MUSB_HOST
-	bool
-	help
-          Say Y if your system needs to handle ISO devices such as Webcams,
-          USB audio devices etc.  If not say N.  If you select Y then a
-          Endpoint is reserved for handling ISO devices and will not be
-          available for handling other types of traffic such as BULK, INT.
+config	MUSB_RESERVE_ISO_EP
+	bool "Reserve ISO Endpoint"
+	depends on USB_MUSB_HDRC_HCD
+  	help
+	  Say Y if your system needs to handle at least 1 devices needing ISO
+	  transfers, such as webcams, USB audio devices etc.  If you select Y
+	  then an endpoint is reserved for handling ISO devices and will not be
+	  available for handling other types of traffic such as BULK/interrupt.
 
 config USB_INVENTRA_DMA
 	bool
Index: linux-2.6.18/drivers/usb/musb/musb_host.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musb_host.c
+++ linux-2.6.18/drivers/usb/musb/musb_host.c
@@ -1739,6 +1739,7 @@ static int musb_schedule(
 	int			idle;
 	int			best_diff;
 	int			best_end, epnum;
+	unsigned		maxpacket;
 	struct musb_hw_ep	*hw_ep = NULL;
 	struct list_head	*head = NULL;
 
@@ -1758,14 +1759,24 @@ static int musb_schedule(
 	case USB_ENDPOINT_XFER_ISOC:
 		hw_ep = musb->iso_ep;
 		if (hw_ep) {
-			idle = 1;
+			maxpacket = is_in ? hw_ep->max_packet_sz_rx :
+					    hw_ep->max_packet_sz_tx;
+
+			if (qh->maxpacket > maxpacket)
+				return -EMSGSIZE;
+
+			/*
+			 * Check to see if a transfer with another ISO EP is
+			 * in progress -- as we don't have a queue, we can
+			 * only have one EP served at a time...
+			 */
 			best_end = hw_ep->epnum;
-			musb->periodic[best_end] = qh;
-			DBG(4, "iso qh %p periodic slot %d\n", qh, best_end);
-			goto success;
+			if (musb->periodic[best_end] == NULL)
+				goto periodic;
+			else
+				return -EBUSY;
 		}
 		break;
-
 	}
 	if (head) {
 		idle = list_empty(head);
@@ -1816,8 +1827,9 @@ static int musb_schedule(
 	if (best_end < 0)
 		return -ENOSPC;
 
-	idle = 1;
 	hw_ep = musb->endpoints + best_end;
+periodic:
+	idle = 1;
 	musb->periodic[best_end] = qh;
 	DBG(4, "qh %p periodic slot %d\n", qh, best_end);
 success:
Index: linux-2.6.18/drivers/usb/musb/musb_core.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musb_core.c
+++ linux-2.6.18/drivers/usb/musb/musb_core.c
@@ -1344,9 +1344,14 @@ static int __init ep_config_from_hw(stru
 		/* REVISIT:  this algorithm is lazy, we should at least
 		 * try to pick a double buffered endpoint.
 		 */
-		if (musb->bulk_ep)
+		if (musb->bulk_ep == NULL) {
+			musb->bulk_ep = hw_ep;
 			continue;
-		musb->bulk_ep = hw_ep;
+		}
+#ifdef CONFIG_MUSB_RESERVE_ISO_EP
+		if (musb->iso_ep == NULL)
+			musb->iso_ep = hw_ep;
+#endif
 #endif
 	}
 
Index: linux-2.6.18/mvl_patches/pro50-2042.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-2042.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2009 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(2042);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

