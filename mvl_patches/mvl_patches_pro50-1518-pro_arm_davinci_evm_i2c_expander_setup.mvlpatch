#! /usr/bin/env bash
# Patch: -pro_arm_davinci_evm_i2c_expander_setup
# Date: Fri Sep 19 13:56:46 2008
# Source: MontaVista Software, Inc.
# MR: 23591
# Type: Enhancement
# Disposition: local
# Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
# Description:
# Introduce the hook in the I2C expander registration function allowing to do
# board specific pin setup. Implement that hook for DaVinci EVM board to set up
# the CF/ATA pin mode. Add an option to enable CF support.
# 
#  arch/arm/mach-davinci/Kconfig             |    7 +++++++
#  arch/arm/mach-davinci/board-evm.c         |   24 ++++++++++++++++++++++++
#  arch/arm/mach-davinci/i2c-client.c        |    6 ++++++
#  include/asm-arm/arch-davinci/i2c-client.h |    7 +++++++
#  4 files changed, 44 insertions(+)
# 

PATCHNUM=1518
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 23591
Type: Enhancement
Disposition: local
Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
Description:
Introduce the hook in the I2C expander registration function allowing to do
board specific pin setup. Implement that hook for DaVinci EVM board to set up
the CF/ATA pin mode. Add an option to enable CF support.

 arch/arm/mach-davinci/Kconfig             |    7 +++++++
 arch/arm/mach-davinci/board-evm.c         |   24 ++++++++++++++++++++++++
 arch/arm/mach-davinci/i2c-client.c        |    6 ++++++
 include/asm-arm/arch-davinci/i2c-client.h |    7 +++++++
 mvl_patches/pro50-1518.c                  |   16 ++++++++++++++++
 5 files changed, 60 insertions(+)

Index: linux-2.6.18/arch/arm/mach-davinci/Kconfig
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/Kconfig
+++ linux-2.6.18/arch/arm/mach-davinci/Kconfig
@@ -18,6 +18,13 @@ config MACH_DAVINCI_EVM
 	  Configure this option to specify the whether the board used
 	  for development is a DaVinci EVM
 
+config DAVINCI_EVM_CF_SUPPORT
+	bool "CF card support"
+	depends on MACH_DAVINCI_EVM
+	default y
+	help
+	  Configure this option to enable CompactFlash card support.
+
 config DAVINCI_MUX
 	bool "DAVINCI multiplexing support"
 	depends on ARCH_DAVINCI
Index: linux-2.6.18/arch/arm/mach-davinci/board-evm.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/board-evm.c
+++ linux-2.6.18/arch/arm/mach-davinci/board-evm.c
@@ -29,6 +29,7 @@
 #include <asm/mach/flash.h>
 
 #include <asm/arch/common.h>
+#include <asm/arch/i2c-client.h>
 
 /* other misc. init functions */
 void __init davinci_psc_init(void);
@@ -150,10 +151,33 @@ davinci_evm_map_io(void)
 	davinci_map_common_io();
 }
 
+static __init void davinci_evm_i2c_expander_setup(void)
+{
+#if defined(CONFIG_BLK_DEV_PALMCHIP_BK3710) || \
+    defined(CONFIG_BLK_DEV_PALMCHIP_BK3710_MODULE)
+	/*
+	 * ATA_SEL is 1 -> disable, 0 -> enable.
+	 * CF_SEL  is 1 -> disable, 0 -> enable.
+	 *
+	 * Ensure both are not enabled at once.
+	 */
+#ifdef CONFIG_DAVINCI_EVM_CF_SUPPORT
+	davinci_i2c_expander_op(0x3A, ATA_SEL,	1);
+	davinci_i2c_expander_op(0x3A, CF_RESET, 1);
+	davinci_i2c_expander_op(0x3A, CF_SEL,	0);
+#else
+	davinci_i2c_expander_op(0x3A, CF_SEL,	1);
+	davinci_i2c_expander_op(0x3A, ATA_SEL,	0);
+#endif
+#endif
+}
+
 static __init void davinci_evm_init(void)
 {
 	davinci_psc_init();
 
+	board_i2c_expander_setup = davinci_evm_i2c_expander_setup;
+
 #if defined(CONFIG_BLK_DEV_PALMCHIP_BK3710) || \
     defined(CONFIG_BLK_DEV_PALMCHIP_BK3710_MODULE)
 	printk(KERN_WARNING "WARNING: both IDE and NOR flash are enabled, "
Index: linux-2.6.18/arch/arm/mach-davinci/i2c-client.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/i2c-client.c
+++ linux-2.6.18/arch/arm/mach-davinci/i2c-client.c
@@ -2,6 +2,7 @@
  *  linux/drivers/davinci/i2c-davinci-client.c
  *
  * Copyright (C) 2006 Texas Instruments Inc
+ * Copyright (C) 2008 MontaVista Software, Inc. <source@mvista.com>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -171,6 +172,8 @@ EXPORT_SYMBOL(davinci_i2c_expander_op);
 
 static struct i2c_driver davinci_i2c_client_driver;
 
+void (*board_i2c_expander_setup)(void);
+
 static int davinci_i2c_attach_client(struct i2c_adapter *adap, int addr)
 {
 	struct i2c_client *client;
@@ -200,6 +203,9 @@ static int davinci_i2c_attach_client(str
 
 	err = davinci_i2c_write(1, &data_to_u35, 0x3A);
 
+	if (board_i2c_expander_setup)
+		board_i2c_expander_setup();
+
 	return 0;
 
  exit_kfree:
Index: linux-2.6.18/include/asm-arm/arch-davinci/i2c-client.h
===================================================================
--- linux-2.6.18.orig/include/asm-arm/arch-davinci/i2c-client.h
+++ linux-2.6.18/include/asm-arm/arch-davinci/i2c-client.h
@@ -2,6 +2,7 @@
  *  include/asm-arm/arch-davinci/i2c-client.h
  *
  * Copyright (C) 2006 Texas Instruments Inc
+ * Copyright (C) 2008 MontaVista Software, Inc. <source@mvista.com>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -31,6 +32,12 @@ typedef enum {
         CF_SEL = 6
 } u35_expander_ops;
 
+/*
+ * The board code will set this to point to its expander pin setup function
+ * to be called upon registering the I2C client.
+ */
+extern void (*board_i2c_expander_setup)(void);
+
 int davinci_i2c_expander_op (u16 client_addr, u35_expander_ops pin, u8 val);
 int davinci_i2c_write(u8 size, u8 * val, u16 client_addr);
 int davinci_i2c_read(u8 size, u8 * val, u16 client_addr);
Index: linux-2.6.18/mvl_patches/pro50-1518.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1518.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1518);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

