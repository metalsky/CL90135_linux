#! /usr/bin/env bash
# Patch: -pro_mmc_add_davinci_write_protection
# Date: Thu Feb 19 15:00:51 2009
# Source: MontaVista Software, Inc.
# MR: 30973
# Type: Enhancement
# Disposition: needs submitting to mmc community
# Signed-off-by: David A. Griego <dgriego@mvista.com>
# Signed-off-by: Mark A. Greer <mgreer@mvista.com>
# Signed-off-by: Mikhail Cherkashin <mcherkashin@ru.mvista.com>
# Description:
# 
#     MMC: Add DaVinci write-protection support
# 
#     Do the write protect detection to board files, passing in function pointer
#     via platform data.
# 

PATCHNUM=2106
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 30973
Type: Enhancement
Disposition: needs submitting to mmc community
Signed-off-by: David A. Griego <dgriego@mvista.com>
Signed-off-by: Mark A. Greer <mgreer@mvista.com>
Signed-off-by: Mikhail Cherkashin <mcherkashin@ru.mvista.com>
Description:

    MMC: Add DaVinci write-protection support

    Do the write protect detection to board files, passing in function pointer
    via platform data.

Index: linux-2.6.18/arch/arm/mach-davinci/board-dm355-evm.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/board-dm355-evm.c
+++ linux-2.6.18/arch/arm/mach-davinci/board-dm355-evm.c
@@ -50,6 +50,7 @@
 #include <asm/arch/common.h>
 #include <asm/arch/clock.h>
 #include <asm/arch/mmc.h>
+#include <asm/arch/i2c-client.h>
 
 
 #if (defined(CONFIG_DAVINCI_LOGICPD_ENCODER) || \
@@ -294,6 +295,18 @@ static void setup_ethernet(void)
 #endif
 
 #if defined(CONFIG_MMC_DAVINCI) || defined(CONFIG_MMC_DAVINCI_MODULE)
+#define MSP430_I2C_CLIENT_ADDRESS	0x25
+int dm355_mmc_get_ro(int index)
+{
+	char i2cdata[2] = { 0x06, 0 };
+
+	davinci_i2c_write(1, i2cdata, MSP430_I2C_CLIENT_ADDRESS);
+	udelay(100);
+	davinci_i2c_read(1,  i2cdata, MSP430_I2C_CLIENT_ADDRESS);
+
+	return index ? i2cdata[0] & 0x10 : i2cdata[0] & 0x04;
+}
+
 static struct resource mmc0_resources[] = {
 	[0] = {			/* registers */
 		.start	= DM355_MMC0_BASE,
@@ -318,19 +331,20 @@ static struct resource mmc0_resources[] 
 };
 
 static struct davinci_mmc_platform_data mmc0_platform_data = {
-	.mmc_clk = "MMCSDCLK0",
-	.rw_threshold = 32,
-	.use_4bit_mode = 1,
+	.mmc_clk	= "MMCSDCLK0",
+	.rw_threshold	= 32,
+	.use_4bit_mode	= 1,
+	.get_ro		= dm355_mmc_get_ro,
 };
 
 static struct platform_device mmc0_device = {
-	.name = "davinci-mmc",
-	.id = 0,
-	.dev = {
+	.name	= "davinci-mmc",
+	.id	= 0,
+	.dev	= {
 		.platform_data = &mmc0_platform_data,
-		},
-	.num_resources = ARRAY_SIZE(mmc0_resources),
-	.resource = mmc0_resources,
+	},
+	.num_resources	= ARRAY_SIZE(mmc0_resources),
+	.resource	= mmc0_resources,
 };
 
 static struct resource mmc1_resources[] = {
@@ -357,19 +371,20 @@ static struct resource mmc1_resources[] 
 };
 
 static struct davinci_mmc_platform_data mmc1_platform_data = {
-	.mmc_clk = "MMCSDCLK1",
-	.rw_threshold = 32,
-	.use_4bit_mode = 1,
+	.mmc_clk	= "MMCSDCLK1",
+	.rw_threshold	= 32,
+	.use_4bit_mode	= 1,
+	.get_ro		= dm355_mmc_get_ro,
 };
 
 static struct platform_device mmc1_device = {
-	.name = "davinci-mmc",
-	.id = 1,
-	.dev = {
+	.name	= "davinci-mmc",
+	.id	= 1,
+	.dev	= {
 		.platform_data = &mmc1_platform_data,
-		},
-	.num_resources = ARRAY_SIZE(mmc1_resources),
-	.resource = mmc1_resources,
+	},
+	.num_resources	= ARRAY_SIZE(mmc1_resources),
+	.resource	= mmc1_resources,
 };
 
 static void setup_mmc(void)
Index: linux-2.6.18/arch/arm/mach-davinci/board-evm.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/board-evm.c
+++ linux-2.6.18/arch/arm/mach-davinci/board-evm.c
@@ -23,6 +23,7 @@
 #include <linux/serial.h>
 #include <linux/serial_8250.h>
 #include <linux/kgdb.h>
+#include <linux/delay.h>
 
 #include <asm/setup.h>
 #include <asm/io.h>
@@ -216,6 +217,18 @@ static struct platform_device davinci_fb
 };
 
 #if defined(CONFIG_MMC_DAVINCI) || defined(CONFIG_MMC_DAVINCI_MODULE)
+int dm644x_mmc_get_ro(int index)
+{
+	char input_state[4] = { 2, 4, 0, 0 };
+
+	davinci_i2c_write(2, input_state, 0x23);
+	udelay(1000);
+	davinci_i2c_read(4,  input_state, 0x23);
+	udelay(1000);
+
+	return input_state[3] & 0x40;
+}
+
 static struct resource mmc0_resources[] = {
 	[0] = {			/* registers */
 		.start		= DAVINCI_MMC_SD_BASE,
@@ -243,6 +256,7 @@ static struct davinci_mmc_platform_data 
 	.mmc_clk		= "MMCSDCLK0",
 	.rw_threshold		= 32,
 	.use_4bit_mode		= 1,
+	.get_ro			= dm644x_mmc_get_ro,
 };
 
 static struct platform_device mmc0_device = {
Index: linux-2.6.18/drivers/mmc/davinci.c
===================================================================
--- linux-2.6.18.orig/drivers/mmc/davinci.c
+++ linux-2.6.18/drivers/mmc/davinci.c
@@ -171,6 +171,7 @@ struct mmc_davinci_host {
 	unsigned int		sg_len;
 	int			sg_idx;
 	unsigned int		buffer_bytes_left;
+	int 			(*get_ro) (int);
 };
 
 
@@ -1251,7 +1252,9 @@ static irqreturn_t mmc_davinci_irq(int i
 
 static int mmc_davinci_get_ro(struct mmc_host *mmc)
 {
-	return 0;
+	struct mmc_davinci_host *host = mmc_priv(mmc);
+
+	return host->get_ro ? host->get_ro(mmc->index) : 0;
 }
 
 static struct mmc_host_ops mmc_davinci_ops = {
@@ -1420,6 +1423,8 @@ static int davinci_mmc_probe(struct plat
 		dev_info(mmc->dev, "Not Supporting 4-bit mode\n");
 	}
 
+	host->get_ro = minfo->get_ro;
+
 	host->rw_threshold = minfo->rw_threshold;
 
 	mmc->ops = &mmc_davinci_ops;
Index: linux-2.6.18/include/asm-arm/arch-davinci/mmc.h
===================================================================
--- linux-2.6.18.orig/include/asm-arm/arch-davinci/mmc.h
+++ linux-2.6.18/include/asm-arm/arch-davinci/mmc.h
@@ -1,7 +1,7 @@
 /*
  * Header file for DaVinci MMC platform data.
  *
- * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * (c) 2007-2008 MontaVista Software, Inc. This file is licensed under
  * the terms of the GNU General Public License version 2. This program
  * is licensed "as is" without any warranty of any kind, whether express
  * or implied.
@@ -14,6 +14,7 @@ struct davinci_mmc_platform_data {
 	const char *mmc_clk;	/* MMC clock name for clk_get() */
 	unsigned int rw_threshold;
 	unsigned int use_4bit_mode;
+	int (*get_ro) (int);
 };
 
 #endif	/* ifndef DAVINCI_MMC_PLAT_H */
Index: linux-2.6.18/mvl_patches/pro50-2106.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-2106.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2009 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(2106);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

