#! /usr/bin/env bash
# Patch: -pro_arm_davinci_timer_multiplateform_support
# Date: Fri Sep 19 14:02:30 2008
# Source: MontaVista Software, Inc.
# MR: 28650
# Type: Enhancement
# Disposition: needs submitting to linux-arm-kernel
# Signed-off-by: Steve Chen <schen@mvista.com>
# Description:
#   Update timer code for multi-platform support.  Update include allowing
#   different timer allocation for DM6467.
# 
#  arch/arm/mach-davinci/time.c |  109 ++++++++++++++++++++++++++-----------------
#  1 file changed, 66 insertions(+), 43 deletions(-)
# 

PATCHNUM=1600
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 28650
Type: Enhancement
Disposition: needs submitting to linux-arm-kernel
Signed-off-by: Steve Chen <schen@mvista.com>
Description:
  Update timer code for multi-platform support.  Update include allowing
  different timer allocation for DM6467.

 arch/arm/mach-davinci/time.c |  109 ++++++++++++++++++++++++++-----------------
 mvl_patches/pro50-1600.c     |   16 ++++++
 2 files changed, 82 insertions(+), 43 deletions(-)

Index: linux-2.6.18/arch/arm/mach-davinci/time.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/time.c
+++ linux-2.6.18/arch/arm/mach-davinci/time.c
@@ -24,6 +24,7 @@
 #include <asm/mach/time.h>
 #include <asm/errno.h>
 #include <asm/arch/io.h>
+#include <asm/arch/cpu.h>
 
 static struct clock_event_device clockevent_davinci;
 
@@ -47,17 +48,8 @@ static int timer_irqs[NUM_TIMERS] = {
 	IRQ_TINT1_TINT34,
 };
 
-/*
- * This driver configures the 2 64-bit count-up timers as 4 independent
- * 32-bit count-up timers used as follows:
- *
- * T0_BOT: Timer 0, bottom:  clockevent source for hrtimers
- * T0_TOP: Timer 0, top   :  clocksource for generic timekeeping
- * T1_BOT: Timer 1, bottom:  (used by DSP in TI DSPLink code)
- * T1_TOP: Timer 1, top   :  <unused>
- */
-#define TID_CLOCKEVENT  T0_BOT
-#define TID_CLOCKSOURCE T0_TOP
+static int tid_system;
+static int tid_freerun;
 
 /* Timer register offsets */
 #define PID12                        0x0
@@ -105,7 +97,6 @@ struct timer_s {
 	unsigned long enamode_shift;
 	struct irqaction irqaction;
 };
-static struct timer_s timers[];
 
 /* values for 'opts' field of struct timer_s */
 #define TIMER_OPTS_DISABLED   0x00
@@ -154,33 +145,32 @@ static irqreturn_t freerun_interrupt(int
 	return IRQ_HANDLED;
 }
 
-static struct timer_s timers[] = {
-	[TID_CLOCKEVENT] = {
-		.name      = "clockevent",
-		.opts      = TIMER_OPTS_DISABLED,
-		.irqaction = {
-			.flags   = IRQF_DISABLED | IRQF_TIMER,
-			.handler = timer_interrupt,
-		}
-	},
-	[TID_CLOCKSOURCE] = {
-		.name       = "free-run counter",
-		.period     = ~0,
-		.opts       = TIMER_OPTS_PERIODIC,
-		.irqaction = {
-			.flags   = IRQF_DISABLED | IRQF_TIMER,
-			.handler = freerun_interrupt,
-		}
-	},
+static struct timer_s davinci_system_timer = {
+	.name      = "clockevent",
+	.opts      = TIMER_OPTS_DISABLED,
+	.irqaction = {
+		.flags   = IRQF_DISABLED | IRQF_TIMER,
+		.handler = timer_interrupt,
+	}
 };
 
-static void __init timer_init(void)
+static struct timer_s davinci_freerun_timer = {
+	.name       = "free-run counter",
+	.period     = ~0,
+	.opts       = TIMER_OPTS_PERIODIC,
+	.irqaction = {
+		.flags   = IRQF_DISABLED | IRQF_TIMER,
+		.handler = freerun_interrupt,
+	}
+};
+static struct timer_s *timers[NUM_TIMERS];
+
+static void __init timer_init(int num_timers, u32 *bases)
 {
-	u32 bases[] = {DAVINCI_TIMER0_BASE, DAVINCI_TIMER1_BASE};
 	int i;
 
 	/* Global init of each 64-bit timer as a whole */
-	for(i=0; i<2; i++) {
+	for (i = 0; i < num_timers; i++) {
 		u32 tgcr, base = bases[i];
 
 		/* Disabled, Internal clock source */
@@ -205,13 +195,12 @@ static void __init timer_init(void)
 	}
 
 	/* Init of each timer as a 32-bit timer */
-	for (i=0; i< ARRAY_SIZE(timers); i++) {
-		struct timer_s *t = &timers[i];
+	for (i = 0; i < NUM_TIMERS; i++) {
+		struct timer_s *t = timers[i];
 
-		if (t->name) {
+		if (t && t->name) {
 			t->id = i;
-			t->reg_base = (IS_TIMER1(t->id) ?
-			       DAVINCI_TIMER1_BASE : DAVINCI_TIMER0_BASE);
+			t->reg_base = bases[i >> 1];
 
 			if (IS_TIMER_BOT(t->id)) {
 				t->enamode_shift = 6;
@@ -230,7 +219,7 @@ static void __init timer_init(void)
 				setup_irq(timer_irqs[t->id], &t->irqaction);
 			}
 
-			timer32_config(&timers[i]);
+			timer32_config(timers[i]);
 		}
 	}
 }
@@ -240,7 +229,7 @@ static void __init timer_init(void)
  */
 static cycle_t read_cycles(void)
 {
-	struct timer_s *t = &timers[TID_CLOCKSOURCE];
+	struct timer_s *t = timers[tid_freerun];
 
 	return (cycles_t)timer32_read(t);
 }
@@ -260,7 +249,7 @@ static struct clocksource clocksource_da
 static void davinci_set_next_event(unsigned long cycles,
 				  struct clock_event_device *evt)
 {
-	struct timer_s *t = &timers[TID_CLOCKEVENT];
+	struct timer_s *t = timers[tid_system];
 
 	t->period = cycles;
 	timer32_config(t);
@@ -269,7 +258,7 @@ static void davinci_set_next_event(unsig
 static void davinci_set_mode(enum clock_event_mode mode,
 			     struct clock_event_device *evt)
 {
-	struct timer_s *t = &timers[TID_CLOCKEVENT];
+	struct timer_s *t = timers[tid_system];
 
 	switch (mode) {
 	case CLOCK_EVT_PERIODIC:
@@ -296,13 +285,47 @@ static struct clock_event_device clockev
 };
 
 
+static u32 davinci_bases[] = { DAVINCI_TIMER0_BASE, DAVINCI_TIMER1_BASE };
 static void __init davinci_timer_init(void)
 {
+	int num_timers;
+	u32 *bases;
 	static char err[] __initdata = KERN_ERR
 		"%s: can't register clocksource!\n";
 
+	num_timers = 2;
+	bases = davinci_bases;
+	if (cpu_is_davinci_dm6467()) {
+		/*
+		 * Configure the 2 64-bit timer as 4 32-bit timers with
+		 * following assignments.
+		 *
+		 * T0_BOT: Timer 0, bottom:  AV Sync
+		 * T0_TOP: Timer 0, top:  free-running counter,
+		 *                        used for cycle counter
+		 * T1_BOT: Timer 1, bottom:  reserved for DSP
+		 * T1_TOP: Timer 1, top   :  Linux system tick
+		 */
+		tid_system = T1_TOP;
+		tid_freerun = T0_TOP;
+	} else {
+		/*
+		 * Configure the 2 64-bit timer as 4 32-bit timers with
+		 * following assignments.
+		 *
+		 * T0_BOT: Timer 0, bottom:  clockevent source for hrtimers
+		 * T0_TOP: Timer 0, top   :  clocksource for generic timekeeping
+		 * T1_BOT: Timer 1, bottom:  (used by DSP in TI DSPLink code)
+		 * T1_TOP: Timer 1, top   :  <unused>
+		 */
+		tid_system = T0_BOT;
+		tid_freerun = T0_TOP;
+	}
+	timers[tid_system] = &davinci_system_timer;
+	timers[tid_freerun] = &davinci_freerun_timer;
+
 	/* init timer hw */
-	timer_init();
+	timer_init(num_timers, bases);
 
 	/* setup clocksource */
 	clocksource_davinci.mult =
Index: linux-2.6.18/mvl_patches/pro50-1600.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1600.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1600);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

