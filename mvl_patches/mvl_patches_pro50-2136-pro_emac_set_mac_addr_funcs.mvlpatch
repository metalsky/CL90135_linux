#! /usr/bin/env bash
# Patch: -pro_emac_set_mac_addr_funcs
# Date: Thu Feb 19 15:03:07 2009
# Source: MontaVista Software, Inc.
# MR: 28780
# Type: Enhancement
# Disposition: merged from DaVinci git
# Signed-off-by: Aleksey Makarov <amakarov@ru.mvista.com>
# Signed-off-by: Mikhail Cherkashin <mcherkashin@ru.mvista.com>
# Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
# Description:
# Merge MAC address setting functions from DaVinci git.
# 
#  drivers/net/davinci_emac.c |  167 +++++++++++++++++++++++----------------------
#  1 file changed, 86 insertions(+), 81 deletions(-)
# 

PATCHNUM=2136
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 28780
Type: Enhancement
Disposition: merged from DaVinci git
Signed-off-by: Aleksey Makarov <amakarov@ru.mvista.com>
Signed-off-by: Mikhail Cherkashin <mcherkashin@ru.mvista.com>
Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
Description:
Merge MAC address setting functions from DaVinci git.

 drivers/net/davinci_emac.c |  126 +++++++++++++++++++++++----------------------
 mvl_patches/pro50-2136.c   |   16 +++++
 2 files changed, 82 insertions(+), 60 deletions(-)

Index: linux-2.6.18/drivers/net/davinci_emac.c
===================================================================
--- linux-2.6.18.orig/drivers/net/davinci_emac.c
+++ linux-2.6.18/drivers/net/davinci_emac.c
@@ -1517,7 +1517,7 @@ static int emac_un_init_tx_channel(struc
 static int emac_un_init_rx_channel(struct emac_dev *dev, u32 channel,
 				   void *ch_close_args);
 
-static void emac_set_mac_address(struct emac_dev *dev, u32 channel,
+static void emac_setmac(struct emac_dev *dev, u32 channel,
 		char *mac_addr);
 
 static void emac_ddcifcnt_clear(struct emac_dev *dev);
@@ -3595,16 +3595,15 @@ static void emac_rx_uni_cast(struct emac
 }
 
 /**
- * EMAC Add Type 0 Address
- *  - set mac address for type 0 addressing (EMAC)
+ * emac_set_type0addr: Set EMAC Type0 mac address
+ * @priv: The DaVinci EMAC private adapter structure
+ * @ch: RX channel number
+ * @mac_addr: MAC address to set in device
  *
- * This is an internal function of the DDC called from channel
- * enable API which does channel number range checking and hence its
- * not required.  It is assumed that this function will get the
- * correct channel number always
+ * Called internally to set Type0 mac address of the adapter (Device)
  */
-static void emac_add_type0addr(struct emac_dev *dev, u32 channel,
-			       char *mac_address)
+static void emac_set_type0addr(struct emac_dev *dev, u32 channel,
+				char *mac_address)
 {
 	dev->regs->mac_src_addr_lo = (mac_address[0] << 8) | (mac_address[1]);
 	dev->regs->mac_src_addr_hi = (mac_address[2] << 24) |
@@ -3616,48 +3615,81 @@ static void emac_add_type0addr(struct em
 }
 
 /**
- * EMAC Add Type 1 Address
- *  - set mac address for type 1 addressing (EMAC)
+ * emac_set_type1addr: Set EMAC Type1 mac address
+ * @priv: The DaVinci EMAC private adapter structure
+ * @ch: RX channel number
+ * @mac_addr: MAC address to set in device
  *
- * This is an internal function of the DDC called from channel enable
- * API which does channel number range checking and hence its not required.
- * It is assumed that this function will get the correct channel number always
+ * Called internally to set Type1 mac address of the adapter (Device)
  */
-static void emac_add_type1addr(struct emac_dev *dev, u32 channel,
-			       char *mac_address)
+static void emac_set_type1addr(struct emac_dev *dev, u32 channel,
+				char *mac_address)
 {
 	/* set mac_index register with channel number */
 	dev->regs->mac_index = channel;
 
+	/* set mac_addr_lo register */
+	dev->regs->mac_addr_lo = ((mac_address[5] << 8) | mac_address[4]);
+
 	/* set mac_addr_hi register */
 	dev->regs->mac_addr_hi =
 	    (mac_address[3] << 24) | (mac_address[2] << 16) |
 	    (mac_address[1] << 8) | (mac_address[0]);
 
-	/* set mac_addr_lo register */
-	dev->regs->mac_addr_lo = ((mac_address[5] << 8) | mac_address[4]);
-
-	/* set mac hash */
-	dev->regs->mac_hash1 = 0;
-	dev->regs->mac_hash2 = 0;
-
 	/* As per discussion with hardware folks, it is mandatory to
 	   set the source address of the mac, else correct behaviour
 	   is not guaranteed */
-	emac_add_type0addr(dev, channel, mac_address);
+	emac_set_type0addr(dev, channel, mac_address);
+}
 
-	/* enable unicast */
-	emac_rx_uni_cast(dev, channel, TRUE);
+/**
+ * emac_set_type2addr: Set EMAC Type2 mac address
+ * @priv: The DaVinci EMAC private adapter structure
+ * @ch: RX channel number
+ * @mac_addr: MAC address to set in device
+ * @index: index into RX address entries
+ * @match: match parameter for RX address matching logic
+ *
+ * Called internally to set Type2 mac address of the adapter (Device)
+ */
+static void emac_set_type2addr(struct emac_dev *dev, u32 channel,
+			       char *mac_address, int index, int match)
+{
+	dev->regs->mac_index = index;
+
+	dev->regs->mac_addr_hi =
+	    (mac_address[3] << 24) | (mac_address[2] << 16) |
+	    (mac_address[1] << 8) | (mac_address[0]);
+
+	dev->regs->mac_addr_lo = ((mac_address[5] << 8) | mac_address[4] |
+		((channel & 0x7) << 16) | (match << 19) | (1 << 20));
+
+	emac_set_type0addr(dev, channel, mac_address);
 }
 
-/* CPGMAC CFIG 2/3 type addressing - filtering */
-static void emac_add_type2addr(struct emac_dev *dev, u32 channel,
-			       char *mac_address,
-			       int index, bool valid, int match)
+/**
+ * emac_setmac: Set mac address in the adapter (internal function)
+ * @priv: The DaVinci EMAC private adapter structure
+ * @ch: RX channel number
+ * @mac_addr: MAC address to set in device
+ *
+ * Called internally to set the mac address of the adapter (Device)
+ */
+static void emac_setmac(struct emac_dev *dev, u32 ch, char *mac_addr)
 {
-	/* not supported in DaVinci */
+	if (dev->rx_addr_type == 0) {
+		emac_set_type0addr(dev, ch, mac_addr);
+	} else if (dev->rx_addr_type == 1) {
+		u32 cnt;
+		for (cnt = 0; cnt < EMAC_MAX_TXRX_CHANNELS; cnt++)
+			emac_set_type1addr(dev, ch, mac_addr);
+	} else if (dev->rx_addr_type == 2) {
+		emac_set_type2addr(dev, ch, mac_addr, ch, 1);
+		emac_set_type0addr(dev, ch, mac_addr);
+	}
 }
 
+
 /************************ HARDWARE CONFIGURATION SUPPORT FUNCTIONS ************************/
 
 /* set RX hardware configuration */
@@ -4108,10 +4140,9 @@ emac_control(struct emac_dev *dev, int c
 
 			addr_params =
 			    (emac_type2_3_addr_filter_params *) cmd_arg;
-			emac_add_type2addr(dev, addr_params->channel,
+			emac_set_type2addr(dev, addr_params->channel,
 					   addr_params->mac_address,
 					   addr_params->index,
-					   addr_params->valid,
 					   addr_params->match);
 		}
 		break;
@@ -4145,7 +4176,7 @@ emac_control(struct emac_dev *dev, int c
 				    addr_params->mac_address[cnt];
 
 			/* set interface MAC address */
-			emac_set_mac_address(dev, addr_params->channel,
+			emac_setmac(dev, addr_params->channel,
 					     addr_params->mac_address);
 		}
 		break;
@@ -4582,31 +4613,6 @@ static int emac_un_init_rx_channel(struc
 }
 
 /**
- * Set EMAC Mac address
- * Functionality provided:
- *  - EMAC address is set in the hardware based on the address type
- *
- * 1. It is assumed that the channel is already "initialized"
- */
-static void emac_set_mac_address(struct emac_dev *dev, u32 channel,
-		char *mac_addr)
-{
-	/* enable unicast on this channel */
-	dev->regs->rx_unicast_set = (1 << channel);
-
-	/* program MAC address for the channel depending upon emac/cpgmac */
-	if (dev->rx_addr_type == RX_ADDR_TYPE0)
-		emac_add_type0addr(dev, channel, mac_addr);
-	else if (dev->rx_addr_type == RX_ADDR_TYPE1)
-		emac_add_type1addr(dev, channel, mac_addr);
-	else if (dev->rx_addr_type == RX_ADDR_TYPE2)
-		emac_add_type2addr(dev, channel, mac_addr, 0, 1, 1);
-	else
-		LOGERR
-		    ("Wrong Rx Addressing Type - (Type2) detected in hardware");
-}
-
-/**
  * Enable TX/RX Channel
  * Functionality provided:
  * - Channel is enabled in hardware. Data transfer can occur on this
@@ -4654,7 +4660,7 @@ static int emac_enable_channel(struct em
 		}
 
 		/* set interface MAC address */
-		emac_set_mac_address(dev, channel, rx_cppi->mac_addr);
+		emac_setmac(dev, channel, rx_cppi->mac_addr);
 
 		/* enable channel interrupt */
 		dev->regs->rx_int_mask_set = (1 << channel);
Index: linux-2.6.18/mvl_patches/pro50-2136.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-2136.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2009 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(2136);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

