#! /usr/bin/env bash
# Patch: -pro_arm_davinci_serial_update
# Date: Fri Sep 19 13:59:50 2008
# Source: MontaVista Software, Inc.
# MR: 27505
# Type: Integration
# Disposition: merged from Pro 4.0 DaVinci.
# Signed-off-by: Steve Chen <schen@mvista.com>
# Description:
#     Updates to serial initialization to support multiple platforms.
# 
#  arch/arm/mach-davinci/board-evm.c |   28 ++++++++++++++
#  arch/arm/mach-davinci/serial.c    |   76 ++++++++++++++++++++++++--------------
#  2 files changed, 77 insertions(+), 27 deletions(-)
# 

PATCHNUM=1563
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 27505
Type: Integration
Disposition: merged from Pro 4.0 DaVinci.
Signed-off-by: Steve Chen <schen@mvista.com>
Description:
    Updates to serial initialization to support multiple platforms.

 arch/arm/mach-davinci/board-evm.c |   28 ++++++++++++++
 arch/arm/mach-davinci/serial.c    |   76 ++++++++++++++++++++++++--------------
 mvl_patches/pro50-1563.c          |   16 ++++++++
 3 files changed, 93 insertions(+), 27 deletions(-)

Index: linux-2.6.18/arch/arm/mach-davinci/board-evm.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/board-evm.c
+++ linux-2.6.18/arch/arm/mach-davinci/board-evm.c
@@ -18,6 +18,8 @@
 #include <linux/mtd/mtd.h>
 #include <linux/mtd/partitions.h>
 #include <linux/mtd/physmap.h>
+#include <linux/serial.h>
+#include <linux/serial_8250.h>
 
 #include <asm/setup.h>
 #include <asm/io.h>
@@ -33,11 +35,35 @@
 #include <asm/arch/i2c-client.h>
 
 /* other misc. init functions */
+void __init davinci_serial_init(struct platform_device *pdev);
 void __init davinci_psc_init(void);
 void __init davinci_irq_init(void);
 void __init davinci_map_common_io(void);
 void __init davinci_init_common_hw(void);
 
+static struct plat_serial8250_port serial_platform_data[] = {
+	{
+		.membase	= (char *)IO_ADDRESS(DAVINCI_UART0_BASE),
+		.mapbase	= (unsigned long)DAVINCI_UART0_BASE,
+		.irq		= IRQ_UARTINT0,
+		.flags		= UPF_BOOT_AUTOCONF | UPF_SKIP_TEST,
+		.iotype		= UPIO_MEM,
+		.regshift	= 2,
+		.uartclk	= 27000000,
+	},
+	{
+		.flags		= 0
+	},
+};
+
+static struct platform_device serial_device = {
+	.name			= "serial8250",
+	.id			= PLAT8250_DEV_PLATFORM,
+	.dev			= {
+		.platform_data	= serial_platform_data,
+	},
+};
+
 /* NOR Flash base address set to CS0 by default */
 #define NOR_FLASH_PHYS 0x02000000
 
@@ -137,6 +163,7 @@ static struct platform_device davinci_id
 #endif
 
 static struct platform_device *davinci_evm_devices[] __initdata = {
+	&serial_device,
 	&davinci_evm_flash_device,
 	&rtc_dev,
 	&davinci_fb_device,
@@ -186,6 +213,7 @@ static __init void davinci_evm_init(void
 	       "but share pins.\n\tDisable IDE for NOR support.\n");
 #endif
 
+	davinci_serial_init(&serial_device);
 	platform_add_devices(davinci_evm_devices,
 			     ARRAY_SIZE(davinci_evm_devices));
 }
Index: linux-2.6.18/arch/arm/mach-davinci/serial.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/serial.c
+++ linux-2.6.18/arch/arm/mach-davinci/serial.c
@@ -32,6 +32,7 @@
 #include <asm/hardware.h>
 #include <asm/arch/serial.h>
 #include <asm/arch/irqs.h>
+#include <asm/arch/cpu.h>
 
 #define UART_DAVINCI_PWREMU 0x0c
 
@@ -49,29 +50,6 @@ static inline void davinci_serial_outp(s
 	__raw_writeb(value, p->membase + offset);
 }
 
-static struct plat_serial8250_port serial_platform_data[] = {
-	{
-		.membase	= (char *)IO_ADDRESS(DAVINCI_UART0_BASE),
-		.mapbase	= (unsigned long)DAVINCI_UART0_BASE,
-		.irq		= IRQ_UARTINT0,
-		.flags		= UPF_BOOT_AUTOCONF | UPF_SKIP_TEST,
-		.iotype		= UPIO_MEM,
-		.regshift	= 2,
-		.uartclk	= 27000000,
-	},
-	{
-		.flags		= 0
-	},
-};
-
-static struct platform_device serial_device = {
-	.name			= "serial8250",
-	.id			= PLAT8250_DEV_PLATFORM,
-	.dev			= {
-		.platform_data	= serial_platform_data,
-	},
-};
-
 static void __init davinci_serial_reset(struct plat_serial8250_port *p)
 {
 	/* reset both transmitter and receiver: bits 14,13 = UTRST, URRST */
@@ -87,10 +65,54 @@ static void __init davinci_serial_reset(
 	davinci_serial_outp(p, UART_DAVINCI_PWREMU, pwremu);
 }
 
-static int __init davinci_init(void)
+#define UART_DM6467_SCR		__REG(DAVINCI_UART0_BASE + 0x40)
+/*
+ * Internal UARTs need to be initialized for the 8250 autoconfig to work
+ * properly. Note that the TX watermark initialization may not be needed
+ * once the 8250.c watermark handling code is merged.
+ */
+static int __init dm646x_serial_reset(void)
 {
-	davinci_serial_reset(&serial_platform_data[0]);
-	return platform_device_register(&serial_device);
+	UART_DM6467_SCR = 0x08;
+	return 0;
 }
 
-arch_initcall(davinci_init);
+void __init davinci_serial_init(struct platform_device *pdev)
+{
+	struct clk *uart_clk;
+	struct device *dev = &pdev->dev;
+	struct plat_serial8250_port *p;
+	int uart;
+	char uart_name[6];
+
+	memset(uart_name, 0, sizeof(uart_name));
+	for (p = dev->platform_data; p && p->flags; p++) {
+		switch (p->mapbase) {
+		case DAVINCI_UART0_BASE:
+			uart = 0;
+			break;
+		case DAVINCI_UART1_BASE:
+			uart = 1;
+			break;
+		case DAVINCI_UART2_BASE:
+		case DM355_UART2_BASE:
+			uart = 2;
+			break;
+		default:
+			dev_err(dev,
+				"Unknown UART base address 0x%08lx\n",
+				p->mapbase);
+			continue;
+		}
+		sprintf(uart_name, "UART%i", uart);
+		uart_clk = clk_get(dev, uart_name);
+		if (IS_ERR(uart_clk))
+			dev_err(dev, "failed to get %s clock\n", uart_name);
+		else
+			clk_enable(uart_clk);
+
+		if (cpu_is_davinci_dm355())
+			davinci_serial_reset(p);
+	}
+}
+late_initcall(dm646x_serial_reset);
Index: linux-2.6.18/mvl_patches/pro50-1563.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1563.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1563);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

