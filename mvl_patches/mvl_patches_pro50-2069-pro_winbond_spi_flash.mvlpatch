#! /usr/bin/env bash
# Patch: -pro_winbond_spi_flash
# Date: Thu Feb 19 14:58:20 2009
# Source: MontaVista Software, Inc.
# MR: 28812
# Type: Enhancement
# Disposition: needs submitting to linux-arm-kernel
# Signed-off-by: Steve Chen <schen@mvista.com>
# Description:
#  Add W25x16/32/64 SPI client driver.  Also, include it in DA8xx platform
#  devices.
# 
#  drivers/mtd/devices/Kconfig       |    9 
#  drivers/mtd/devices/Makefile      |    1 
#  drivers/mtd/devices/spi_flash.c   |  413 ++++++++++++++++++++++++++++++++++++++
#  include/linux/spi/mtd_spi_flash.h |   86 +++++++
#  4 files changed, 509 insertions(+)
# 

PATCHNUM=2069
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 28812
Type: Enhancement
Disposition: needs submitting to linux-arm-kernel
Signed-off-by: Steve Chen <schen@mvista.com>
Description:
 Add W25x16/32/64 SPI client driver.  Also, include it in DA8xx platform
 devices.

 drivers/mtd/devices/Kconfig       |    9 
 drivers/mtd/devices/Makefile      |    1 
 drivers/mtd/devices/spi_flash.c   |  413 ++++++++++++++++++++++++++++++++++++++
 include/linux/spi/mtd_spi_flash.h |   86 +++++++
 mvl_patches/pro50-2069.c          |   16 +
 5 files changed, 525 insertions(+)

Index: linux-2.6.18/drivers/mtd/devices/Kconfig
===================================================================
--- linux-2.6.18.orig/drivers/mtd/devices/Kconfig
+++ linux-2.6.18/drivers/mtd/devices/Kconfig
@@ -68,6 +68,15 @@ config MTD_M25P80
 	  used for program and data storage.  Set up your spi devices
 	  with the right board-specific platform data.
 
+config MTD_SPI_FLASH
+        tristate "Support for Windbond W25XXX Flash"
+        depends on MTD && SPI_MASTER
+        help
+          Supports Windbond SPI FLASH.  The SPI FLASH operations are similar
+	  across various devices.  The goal is to have something that is
+	  generic enough to handle SPI FLASH from various vendors.  A goal
+	  for example is to merge the ST M25 driver into this driver.
+
 config MTD_SLRAM
 	tristate "Uncached system RAM"
 	depends on MTD
Index: linux-2.6.18/drivers/mtd/devices/Makefile
===================================================================
--- linux-2.6.18.orig/drivers/mtd/devices/Makefile
+++ linux-2.6.18/drivers/mtd/devices/Makefile
@@ -18,3 +18,4 @@ obj-$(CONFIG_MTD_BLOCK2MTD)	+= block2mtd
 obj-$(CONFIG_MTD_DATAFLASH)	+= mtd_dataflash.o
 obj-$(CONFIG_MTD_M25P80)	+= m25p80.o
 obj-$(CONFIG_DAVINCI_SPI_EEPROM)+= at25xxA_eeprom.o
+obj-$(CONFIG_MTD_SPI_FLASH)	+= spi_flash.o
Index: linux-2.6.18/drivers/mtd/devices/spi_flash.c
===================================================================
--- /dev/null
+++ linux-2.6.18/drivers/mtd/devices/spi_flash.c
@@ -0,0 +1,413 @@
+/*
+ * SPI FLASH driver
+ *
+ * Author: Steve Chen <schen@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/types.h>
+#include <linux/device.h>
+#include <linux/delay.h>
+#include <linux/spi/spi.h>
+
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/partitions.h>
+
+#include <linux/uaccess.h>
+
+#include <linux/spi/mtd_spi_flash.h>
+
+
+void spi_flash_write_enable(struct mtd_info *mtd)
+{
+	char buf;
+	struct mtd_spi_flash_info *priv_dat = mtd->priv;
+
+	/* set write enable */
+	buf = MTD_SPI_FLASH_WREN;
+	spi_write(priv_dat->spi, &buf, 1);
+}
+
+static u8 spi_flash_read_status(struct spi_device *spi)
+{
+	return spi_w8r8(spi, MTD_SPI_FLASH_RDSTAT);
+}
+
+static void spi_flash_wait_complete(void *context)
+{
+	int i;
+	struct spi_device *spi = context;
+
+	for (i = 0; i < 5000; i++) {
+		if ((spi_flash_read_status(spi) & SPI_FLASH_STAT_BUSY) == 0)
+			return;
+	}
+	printk(KERN_WARNING "SPI FLASH operation timeout\n");
+}
+
+
+static int spi_flash_read(struct mtd_info *mtd, loff_t from,
+			  size_t count, size_t *retlen, u_char *buf)
+{
+	int rx_cnt;
+	u8 *ptr;
+	unsigned int addr;
+	unsigned long flags;
+	struct spi_transfer x[2];
+	struct spi_message msg;
+	struct mtd_spi_flash_info *priv_dat = mtd->priv;
+
+	addr = (u32) from;
+	*retlen = 0;
+	if ((count <= 0) || ((addr + count) > mtd->size))
+		return -EINVAL;
+
+	memset(x, 0, sizeof x);
+	mutex_lock(&priv_dat->lock);
+	x[0].tx_buf = ptr = priv_dat->tx_buffer;
+	ptr[0] = MTD_SPI_FLASH_FRD;
+	x[0].len = SPI_FLASH_CMD_SIZE;
+
+	/* Handle data return from FLASH */
+	x[1].rx_buf = priv_dat->rx_buffer;
+
+	while (count > 0) {
+		if (likely(count > SPI_FLASH_BUFFER_SIZE))
+			rx_cnt = SPI_FLASH_BUFFER_SIZE;
+		else
+			rx_cnt = count;
+
+		spi_message_init(&msg);
+		/* setup read command */
+		ptr[1] = (addr >> 16) & 0xFF;
+		ptr[2] = (addr >> 8) & 0xFF;
+		ptr[3] = (addr & 0xFF);
+
+		local_irq_save(flags);
+		spi_message_add_tail(&x[0], &msg);
+
+		/* read the device */
+		x[1].len = rx_cnt + 1;
+		spi_message_add_tail(&x[1], &msg);
+		local_irq_restore(flags);
+
+		spi_sync(priv_dat->spi, &msg);
+
+		/* skip over the dummy byte because fast read is used */
+		memcpy(buf, x[1].rx_buf + 1, rx_cnt);
+
+		buf += rx_cnt;
+		count -= rx_cnt;
+		addr += rx_cnt;
+		*retlen += rx_cnt;
+	}
+	mutex_unlock(&priv_dat->lock);
+
+	return 0;
+}
+
+static int spi_flash_write(struct mtd_info *mtd, loff_t to,
+			   size_t count, size_t *retlen,
+			   const u_char *buf)
+{
+	char *ptr;
+	int status;
+	int tx_cnt;
+	int size_limit;
+	unsigned int addr;
+	struct spi_transfer xfer;
+	struct spi_message msg;
+	struct mtd_spi_flash_info *priv_dat = mtd->priv;
+
+	addr = (u32) (to);
+	*retlen = 0;
+	memset(&xfer, 0, sizeof xfer);
+
+	if ((count <= 0) || ((addr + count) > mtd->size))
+		return -EINVAL;
+
+	/* take the smaller of buffer size and page size */
+	/* Want to make buffer size > than page size for better performance */
+	if (priv_dat->page_size <= SPI_FLASH_BUFFER_SIZE)
+		size_limit = priv_dat->page_size;
+	else
+		size_limit = SPI_FLASH_BUFFER_SIZE;
+
+	mutex_lock(&priv_dat->lock);
+	while (count > 0) {
+		spi_flash_write_enable(mtd);
+
+		spi_message_init(&msg);
+		xfer.tx_buf = ptr = priv_dat->tx_buffer;
+
+		msg.complete = spi_flash_wait_complete;
+		msg.context = priv_dat->spi;
+
+		/* set the write command */
+		ptr[0] = MTD_SPI_FLASH_WRITE;
+		ptr[1] = (addr >> 16) & 0xFF;
+		ptr[2] = (addr >> 8) & 0xFF;
+		ptr[3] = (addr & 0xFF);
+
+		/* figure out the max data able to transfer */
+		tx_cnt = size_limit - (addr & (priv_dat->page_size - 1));
+		if (count < tx_cnt)
+			tx_cnt = count;
+
+		/* copy over the write data */
+		ptr = &ptr[SPI_FLASH_CMD_SIZE];
+		memcpy(ptr, buf, tx_cnt);
+		xfer.len = SPI_FLASH_CMD_SIZE + tx_cnt;
+
+		spi_message_add_tail(&xfer, &msg);
+		status = spi_sync(priv_dat->spi, &msg);
+
+		count -= tx_cnt;
+		buf += tx_cnt;
+		addr += tx_cnt;
+		*retlen += tx_cnt;
+	}
+	mutex_unlock(&priv_dat->lock);
+
+	return (0);
+}
+
+static int spi_flash_erase(struct mtd_info *mtd, struct erase_info *instr)
+{
+	u8 op_code;
+	char *ptr;
+	struct spi_transfer x;
+	struct spi_message msg;
+	struct mtd_spi_flash_info *priv_dat = mtd->priv;
+
+	if (((instr->addr + instr->len) > mtd->size) ||
+	    ((instr->addr % priv_dat->sector_erase_size) != 0) ||
+	    ((instr->len % priv_dat->sector_erase_size) != 0))
+		return -EINVAL;
+
+	memset(&x, 0, sizeof(x));
+	x.tx_buf = ptr = priv_dat->tx_buffer;
+
+	mutex_lock(&priv_dat->lock);
+	while (instr->len > 0) {
+		spi_flash_write_enable(mtd);
+		spi_message_init(&msg);
+
+		msg.complete = spi_flash_wait_complete;
+		msg.context = priv_dat->spi;
+
+		ptr[1] = (u8) ((instr->addr >> 16) & 0xFF);
+		ptr[2] = (u8) ((instr->addr >> 8) & 0xFF);
+		ptr[3] = (u8) (instr->addr & 0xFF);
+		x.len = 4;
+
+		if (instr->len < priv_dat->block_erase_size) {
+			op_code = MTD_SPI_FLASH_SECERA;
+			instr->addr += priv_dat->sector_erase_size;
+			instr->len -= priv_dat->sector_erase_size;
+		} else if (instr->len < mtd->size) {
+			op_code = MTD_SPI_FLASH_BKERA;
+			instr->addr += priv_dat->block_erase_size;
+			instr->len -= priv_dat->block_erase_size;
+		} else {
+			op_code = MTD_SPI_FLASH_CHPERA;
+			instr->len = 0;
+			x.len = 1;
+		}
+		ptr[0] = op_code;
+
+		spi_message_add_tail(&x, &msg);
+		spi_sync(priv_dat->spi, &msg);
+	}
+	mutex_unlock(&priv_dat->lock);
+
+	instr->state = MTD_ERASE_DONE;
+	mtd_erase_callback(instr);
+
+	return 0;
+}
+
+static int spi_flash_read_mfc_id(struct spi_device *spi, char *mfr, char *id)
+{
+	unsigned long flags;
+	char tx_buf[1];
+	char rx_buf[5];
+	struct spi_transfer x[2];
+	struct spi_message msg;
+
+	memset(x, 0, sizeof x);
+	x[0].tx_buf = tx_buf;
+	tx_buf[0] = MTD_SPI_FLASH_MFRID;
+	x[0].len = 1;
+
+	/* Send command to read manufacture and device ID */
+	spi_message_init(&msg);
+
+	msg.complete = spi_flash_wait_complete;
+	msg.context = spi;
+
+	local_irq_save(flags);
+	spi_message_add_tail(&x[0], &msg);
+
+	/* prepare the receive buffer */
+	x[1].rx_buf = rx_buf;
+	x[1].len = 5;
+	spi_message_add_tail(&x[1], &msg);
+	local_irq_restore(flags);
+
+	spi_sync(spi, &msg);
+
+	/*
+	 * Receive buffer format is
+	 * Byte0  Byte1  Byte2  Byte3  Byte4
+	 * dummy  dummy  0x0    MFC_ID DEV_ID
+	 */
+	*mfr = rx_buf[3];
+	*id = rx_buf[4];
+
+	return 0;
+}
+
+static int spi_flash_init_device(struct spi_device *spi, u32 dev_size,
+				u32 page_size, u32 sec_size, u32 blk_size)
+{
+	struct mtd_spi_flash_info *info;
+	static struct mtd_info *mtd;
+	int ret;
+
+	info = spi->dev.platform_data;
+	info->spi = spi;
+	info->spi_data = spi_master_get_devdata(spi->master);
+	info->page_size = page_size;
+	info->sector_erase_size = sec_size;
+	info->block_erase_size = blk_size;
+	mutex_init(&info->lock);
+
+	mtd = &info->mtd;
+	memset(mtd, 0, sizeof(struct mtd_info));
+
+	mtd->priv = info;
+	mtd->size = dev_size;
+	mtd->flags = MTD_CAP_NORFLASH;
+	mtd->name = info->name;
+	mtd->erasesize = sec_size;
+	mtd->writesize = 1;
+
+	mtd->type = MTD_DATAFLASH;
+	mtd->read = spi_flash_read;
+	mtd->write = spi_flash_write;
+	mtd->erase = spi_flash_erase;
+
+#ifdef CONFIG_MTD_PARTITIONS
+	if (info->nr_parts)
+		ret = add_mtd_partitions(mtd, info->parts, info->nr_parts);
+	else
+		ret = add_mtd_device(mtd);
+#else
+	ret = add_mtd_device(mtd);
+#endif
+
+	if (ret < 0)
+		pr_info("SPI FLASH device register failed\n");
+
+	return ret;
+
+}
+
+static int spi_flash_init_winbond(struct spi_device *spi, char id)
+{
+	int ret;
+
+	switch (id) {
+	case SPI_FLASH_W25X16:
+		ret = spi_flash_init_device(spi, 0x200000, 0x100, 0x1000,
+					0x10000);
+		break;
+	case SPI_FLASH_W25X32:
+		ret = spi_flash_init_device(spi, 0x400000, 0x100, 0x1000,
+					0x10000);
+		break;
+	case SPI_FLASH_W25X64:
+		ret = spi_flash_init_device(spi, 0x800000, 0x100, 0x1000,
+					0x10000);
+		break;
+	default:
+		printk(KERN_WARNING "Winbond SPI FLASH %x not supported", id);
+		ret = -1;
+	}
+	return ret;
+}
+
+static int __devinit spi_flash_probe(struct spi_device *spi)
+{
+	char mfr, id;
+	int ret;
+
+	spi_flash_read_mfc_id(spi, &mfr, &id);
+
+	switch (mfr) {
+	case SPI_FLASH_MFR_WINBOND:
+		ret = spi_flash_init_winbond(spi, id);
+		break;
+	default:
+		printk(KERN_WARNING "SPI FLASH Manufacture code %x not "
+			"supported", mfr);
+		ret = -1;
+	}
+	return ret;
+}
+
+static int __devexit spi_flash_remove(struct spi_device *spi)
+{
+	int ret;
+	struct mtd_info *mtd;
+	struct mtd_spi_flash_info *info;
+
+	info = spi->dev.platform_data;
+	mtd = &info->mtd;
+
+#ifdef CONFIG_MTD_PARTITIONS
+	if (info->nr_parts)
+		ret = del_mtd_partitions(mtd);
+	else
+		ret = del_mtd_device(mtd);
+#else
+	ret = del_mtd_device(mtd);
+#endif
+
+	return ret;
+}
+
+static struct spi_driver spi_flash_driver = {
+	.driver = {
+		.name = MTD_SPI_FLASH_NAME,
+		.bus = &spi_bus_type,
+		.owner = THIS_MODULE,
+	},
+	.probe = spi_flash_probe,
+	.remove = spi_flash_remove,
+};
+
+static int __init spi_flash_init(void)
+{
+	return spi_register_driver(&spi_flash_driver);
+}
+
+module_init(spi_flash_init);
+
+static void __exit spi_flash_exit(void)
+{
+	spi_unregister_driver(&spi_flash_driver);
+}
+
+module_exit(spi_flash_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Steve Chen");
+MODULE_DESCRIPTION("SPI FLASH driver");
Index: linux-2.6.18/include/linux/spi/mtd_spi_flash.h
===================================================================
--- /dev/null
+++ linux-2.6.18/include/linux/spi/mtd_spi_flash.h
@@ -0,0 +1,86 @@
+/*
+ * DaVinci SPI-EEPROM client driver header file
+ *
+ * Author: Steve Chen <schen@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+
+#ifndef MTD_SPI_FLASH_H
+#define MTD_SPI_FLASH_H
+
+#include <linux/cache.h>
+/*
+ *  op-codes
+ */
+#define MTD_SPI_FLASH_WREN	0x06	/* write enable */
+#define MTD_SPI_FLASH_WRDIS	0x04	/* write disable */
+#define MTD_SPI_FLASH_WRSTAT	0x01	/* write status register */
+#define MTD_SPI_FLASH_WRITE	0x02	/* write/page program */
+
+#define MTD_SPI_FLASH_RDSTAT	0x05	/* read status register */
+#define MTD_SPI_FLASH_RD	0x03	/* read data */
+#define MTD_SPI_FLASH_FRD	0x0B	/* fast read */
+#define MTD_SPI_FLASH_FRDDO	0x3B	/* fast read dual output */
+
+#define MTD_SPI_FLASH_SECERA	0x20	/* sector erase */
+#define MTD_SPI_FLASH_BKERA	0xD8	/* block erase */
+#define MTD_SPI_FLASH_CHPERA	0xC7	/* chip erase */
+
+#define MTD_SPI_FLASH_PWRDN	0xB8	/* power down */
+#define MTD_SPI_FLASH_RELPWRDN	0xAB	/* release power down/ device id */
+
+#define MTD_SPI_FLASH_MFRID	0x90	/* manufacture ID */
+#define MTD_SPI_FLASH_JEDECID	0x9F	/* JEDEC ID */
+
+/*
+ *  Manufacture ID
+ */
+#define SPI_FLASH_MFR_WINBOND	0xEF
+
+/*
+ *  Device ID
+ */
+#define SPI_FLASH_W25X16	0x14
+#define SPI_FLASH_W25X32	0x15
+#define SPI_FLASH_W25X64	0x16
+
+/*
+ * Status register definitions
+ */
+#define SPI_FLASH_STAT_BUSY	0x1	/* read/write in progress */
+#define SPI_FLASH_STAT_WEL	0x2	/* Write Enable Latch */
+
+#define SPI_FLASH_BUFFER_SIZE 256
+#define SPI_FLASH_CMD_SIZE 	4
+
+#define MTD_SPI_FLASH_NAME "spi_flash"
+
+struct mtd_partition;
+
+struct mtd_spi_flash_info {
+	char *name;
+	unsigned int page_size;
+	unsigned int page_mask;
+	unsigned int sector_erase_size;
+	unsigned int block_erase_size;
+	unsigned long chip_sel;
+	unsigned int commit_delay;
+	struct spi_device *spi;
+	struct davinci_spi *spi_data;
+	void *controller_data;
+
+	struct mtd_info mtd;
+
+	struct mtd_partition *parts;
+	unsigned int nr_parts;
+
+	struct mutex lock;
+	char tx_buffer[SPI_FLASH_BUFFER_SIZE + SPI_FLASH_CMD_SIZE];
+	char rx_buffer[SPI_FLASH_BUFFER_SIZE + 1];
+};
+
+#endif	/* MTD_SPI_FLASH_H */
Index: linux-2.6.18/mvl_patches/pro50-2069.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-2069.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2009 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(2069);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

