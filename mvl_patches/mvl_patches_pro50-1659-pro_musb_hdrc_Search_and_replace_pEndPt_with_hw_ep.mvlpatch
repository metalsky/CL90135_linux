#! /usr/bin/env bash
# Patch: -pro_musb_hdrc_Search_and_replace_pEndPt_with_hw_ep
# Date: Fri Sep 19 14:06:38 2008
# From 6944efac53ff2d2411db0021ebd3737f392637ea Mon Sep 17 00:00:00 2001
# From: Tony Lindgren <tony@atomide.com>
# Date: Mon, 13 Aug 2007 02:21:56 -0700
# Subject: [PATCH] musb_hdrc: Search and replace pEndPt with hw_ep
# 
# Search and replace pEndPt with hw_ep
# 
# Signed-off-by: Tony Lindgren <tony@atomide.com>
# (cherry picked from commit e2977f373df45aca2bf4c0e28dfcf14ef523fde4)

PATCHNUM=1659
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
From 6944efac53ff2d2411db0021ebd3737f392637ea Mon Sep 17 00:00:00 2001
From: Tony Lindgren <tony@atomide.com>
Date: Mon, 13 Aug 2007 02:21:56 -0700
Subject: [PATCH] musb_hdrc: Search and replace pEndPt with hw_ep

Search and replace pEndPt with hw_ep

Signed-off-by: Tony Lindgren <tony@atomide.com>
(cherry picked from commit e2977f373df45aca2bf4c0e28dfcf14ef523fde4)
Index: linux-2.6.18/drivers/usb/musb/cppi_dma.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/cppi_dma.c
+++ linux-2.6.18/drivers/usb/musb/cppi_dma.c
@@ -318,10 +318,10 @@ cppi_channel_allocate(struct dma_control
 	/* REVISIT make this an error later once the same driver code works
 	 * with the Mentor DMA engine too
 	 */
-	if (otgCh->pEndPt)
+	if (otgCh->hw_ep)
 		DBG(1, "re-allocating DMA%d %cX channel %p\n",
 				chNum, bTransmit ? 'T' : 'R', otgCh);
-	otgCh->pEndPt = ep;
+	otgCh->hw_ep = ep;
 	otgCh->Channel.bStatus = MGC_DMA_STATUS_FREE;
 
 	DBG(4, "Allocate CPPI%d %cX\n", chNum, bTransmit ? 'T' : 'R');
@@ -341,13 +341,13 @@ static void cppi_channel_release(struct 
 	c = container_of(channel, struct cppi_channel, Channel);
 	epnum = c->chNo + 1;
 	tibase = c->pController->pCoreBase - DAVINCI_BASE_OFFSET;
-	if (!c->pEndPt)
+	if (!c->hw_ep)
 		DBG(1, "releasing idle DMA channel %p\n", c);
 	else if (!c->bTransmit)
 		core_rxirq_enable(tibase, epnum);
 
 	/* for now, leave its cppi IRQ enabled (we won't trigger it) */
-	c->pEndPt = NULL;
+	c->hw_ep = NULL;
 	channel->bStatus = MGC_DMA_STATUS_UNKNOWN;
 }
 
@@ -366,7 +366,7 @@ cppi_dump_rx(int level, struct cppi_chan
 		c->chNo, tag,
 		musb_readl(base - DAVINCI_BASE_OFFSET,
 			DAVINCI_RXCPPI_BUFCNT0_REG + 4 *c->chNo),
-		musb_readw(c->pEndPt->regs, MGC_O_HDRC_RXCSR),
+		musb_readw(c->hw_ep->regs, MGC_O_HDRC_RXCSR),
 
 		musb_readl(c->stateRam, 0 * 4),	/* buf offset */
 		musb_readl(c->stateRam, 1 * 4),	/* head ptr */
@@ -393,7 +393,7 @@ cppi_dump_tx(int level, struct cppi_chan
 			"F%08x L%08x .. %08x"
 			"\n",
 		c->chNo, tag,
-		musb_readw(c->pEndPt->regs, MGC_O_HDRC_TXCSR),
+		musb_readw(c->hw_ep->regs, MGC_O_HDRC_TXCSR),
 
 		musb_readl(c->stateRam, 0 * 4),	/* head ptr */
 		musb_readl(c->stateRam, 1 * 4),	/* sop bd */
@@ -498,7 +498,7 @@ static inline int cppi_autoreq_update(st
 
 	/* REQPKT is turned off after each segment */
 	if (n_bds && rx->actualLen) {
-		void		*__iomem regs = rx->pEndPt->regs;
+		void		*__iomem regs = rx->hw_ep->regs;
 
 		val = musb_readw(regs, MGC_O_HDRC_RXCSR);
 		if (!(val & MGC_M_RXCSR_H_REQPKT)) {
@@ -1008,7 +1008,7 @@ static int cppi_rx_scan(struct cppi *cpp
 	int				completed = 0, acked = 0;
 	int				i;
 	dma_addr_t			safe2ack;
-	void				*__iomem regs = rx->pEndPt->regs;
+	void				*__iomem regs = rx->hw_ep->regs;
 
 	cppi_dump_rx(6, rx, "/K");
 
@@ -1116,14 +1116,14 @@ static int cppi_rx_scan(struct cppi *cpp
 		/* REVISIT seems like "autoreq all but EOP" doesn't...
 		 * setting it here "should" be racey, but seems to work
 		 */
-		csr = musb_readw(rx->pEndPt->regs, MGC_O_HDRC_RXCSR);
+		csr = musb_readw(rx->hw_ep->regs, MGC_O_HDRC_RXCSR);
 		if (is_host_active(cppi->musb)
 				&& bd
 				&& !(csr & MGC_M_RXCSR_H_REQPKT)) {
 			csr |= MGC_M_RXCSR_H_REQPKT;
 			musb_writew(regs, MGC_O_HDRC_RXCSR,
 					MGC_M_RXCSR_H_WZC_BITS | csr);
-			csr = musb_readw(rx->pEndPt->regs, MGC_O_HDRC_RXCSR);
+			csr = musb_readw(rx->hw_ep->regs, MGC_O_HDRC_RXCSR);
 		}
 	} else {
 		rx->activeQueueHead = NULL;
@@ -1227,7 +1227,7 @@ void cppi_completion(struct musb *musb, 
 					txChannel->Channel.bStatus =
 							MGC_DMA_STATUS_FREE;
 
-					pEnd = txChannel->pEndPt;
+					pEnd = txChannel->hw_ep;
 
 					txChannel->Channel.dwActualLength =
 						txChannel->actualLen;
@@ -1290,7 +1290,7 @@ void cppi_completion(struct musb *musb, 
 			/* all segments completed! */
 			rxChannel->Channel.bStatus = MGC_DMA_STATUS_FREE;
 
-			pEnd = rxChannel->pEndPt;
+			pEnd = rxChannel->hw_ep;
 
 			rxChannel->Channel.dwActualLength =
 					rxChannel->actualLen;
@@ -1381,7 +1381,7 @@ static int cppi_channel_abort(struct dma
 		/* from RX or TX fault irq handler */
 	case MGC_DMA_STATUS_BUSY:
 		/* the hardware needs shutting down */
-		regs = otgCh->pEndPt->regs;
+		regs = otgCh->hw_ep->regs;
 		break;
 	case MGC_DMA_STATUS_UNKNOWN:
 	case MGC_DMA_STATUS_FREE:
Index: linux-2.6.18/drivers/usb/musb/cppi_dma.h
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/cppi_dma.h
+++ linux-2.6.18/drivers/usb/musb/cppi_dma.h
@@ -65,7 +65,7 @@ struct cppi_channel {
 	struct cppi		*pController;
 
 	/* which direction of which endpoint? */
-	struct musb_hw_ep	*pEndPt;
+	struct musb_hw_ep	*hw_ep;
 	u8			bTransmit;
 	u8			chNo;
 
Index: linux-2.6.18/mvl_patches/pro50-1659.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1659.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1659);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

