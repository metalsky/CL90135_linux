#! /usr/bin/env bash
# Patch: -pro_musb_hdrc_small_fixes_mostly_suspend_resume
# Date: Fri Sep 19 14:03:10 2008
# From 847e5f328a0b317b2bcf0d8f4e4d006701be2f7a Mon Sep 17 00:00:00 2001
# From: David Brownell <dbrownell@users.sourceforge.net>
# Date: Thu, 9 Nov 2006 22:19:31 +0200
# Subject: [PATCH] musb_hdrc: small fixes, mostly suspend/resume
# 
# A collection of mostly orthogonal and small fixes:
# 
#  - Update various corner cases in the side suspend/resume code,
#    triggered mostly on the host side:
#      * avoid spurious gadget driver resume callbacks in B_IDLE state
#      * avoid spurious gadget driver suspend callbacks in A_HOST state
#      * cope better with some spurious resume irqs
#      * partial fix for disconnection issues in A_SUSPEND
# 
#  - Resolve some TUSB rmmod races by disabling IRQs at the proper moment,
#    and killing the idle timer.
# 
#  - Only mark TUSB device as wakeup-capable if it's connected to an
#    IRQ which allows that.
# 
#  - Don't idle the TUSB chip until khubd handles all pending port
#    status change events; dump that status in procfs.
# 
# Signed-off-by: David Brownell <dbrownell@users.sourceforge.net>
# (cherry picked from commit b659d87e222109552a0b4fdca21407981eb1372a)

PATCHNUM=1609
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
From 847e5f328a0b317b2bcf0d8f4e4d006701be2f7a Mon Sep 17 00:00:00 2001
From: David Brownell <dbrownell@users.sourceforge.net>
Date: Thu, 9 Nov 2006 22:19:31 +0200
Subject: [PATCH] musb_hdrc: small fixes, mostly suspend/resume

A collection of mostly orthogonal and small fixes:

 - Update various corner cases in the side suspend/resume code,
   triggered mostly on the host side:
     * avoid spurious gadget driver resume callbacks in B_IDLE state
     * avoid spurious gadget driver suspend callbacks in A_HOST state
     * cope better with some spurious resume irqs
     * partial fix for disconnection issues in A_SUSPEND

 - Resolve some TUSB rmmod races by disabling IRQs at the proper moment,
   and killing the idle timer.

 - Only mark TUSB device as wakeup-capable if it's connected to an
   IRQ which allows that.

 - Don't idle the TUSB chip until khubd handles all pending port
   status change events; dump that status in procfs.

Signed-off-by: David Brownell <dbrownell@users.sourceforge.net>
(cherry picked from commit b659d87e222109552a0b4fdca21407981eb1372a)
Index: linux-2.6.18/drivers/usb/musb/musb_gadget.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musb_gadget.c
+++ linux-2.6.18/drivers/usb/musb/musb_gadget.c
@@ -1903,11 +1903,21 @@ EXPORT_SYMBOL(usb_gadget_unregister_driv
 
 void musb_g_resume(struct musb *pThis)
 {
-	DBG(4, "<==\n");
-	if (pThis->pGadgetDriver && pThis->pGadgetDriver->resume) {
-		spin_unlock(&pThis->Lock);
-		pThis->pGadgetDriver->resume(&pThis->g);
-		spin_lock(&pThis->Lock);
+	switch (pThis->xceiv.state) {
+	case OTG_STATE_B_IDLE:
+		break;
+	case OTG_STATE_B_WAIT_ACON:
+	case OTG_STATE_B_PERIPHERAL:
+		pThis->is_active = 1;
+		if (pThis->pGadgetDriver && pThis->pGadgetDriver->resume) {
+			spin_unlock(&pThis->Lock);
+			pThis->pGadgetDriver->resume(&pThis->g);
+			spin_lock(&pThis->Lock);
+		}
+		break;
+	default:
+		WARN("unhandled RESUME transition (%s)\n",
+				otg_state_string(pThis));
 	}
 }
 
Index: linux-2.6.18/drivers/usb/musb/musb_procfs.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musb_procfs.c
+++ linux-2.6.18/drivers/usb/musb/musb_procfs.c
@@ -534,6 +534,15 @@ static int dump_header_stats(struct musb
 	count += code;
 	buffer += code;
 
+#ifdef	CONFIG_USB_MUSB_HDRC_HCD
+	code = sprintf(buffer, "Root port status: %08x\n",
+			pThis->port1_status);
+	if (code <= 0)
+		goto done;
+	buffer += code;
+	count += code;
+#endif
+
 #ifdef	CONFIG_ARCH_DAVINCI
 	code = sprintf(buffer,
 			"DaVinci: ctrl=%02x stat=%1x phy=%03x\n"
Index: linux-2.6.18/drivers/usb/musb/plat_uds.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/plat_uds.c
+++ linux-2.6.18/drivers/usb/musb/plat_uds.c
@@ -316,45 +316,76 @@ static irqreturn_t musb_stage0_irq(struc
 	DBG(3, "<== Power=%02x, DevCtl=%02x, bIntrUSB=0x%x\n", power, devctl,
 		bIntrUSB);
 
-	/* in host mode when a device resume me (from power save)
-	 * in device mode when the host resume me; it shold not change
-	 * "identity".
+	/* in host mode, the peripheral may issue remote wakeup.
+	 * in peripheral mode, the host may resume the link.
+	 * spurious RESUME irqs happen too, paired with SUSPEND.
 	 */
 	if (bIntrUSB & MGC_M_INTR_RESUME) {
 		handled = IRQ_HANDLED;
-		DBG(3, "RESUME\n");
-		pThis->is_active = 1;
+		DBG(3, "RESUME (%s)\n", otg_state_string(pThis));
 
 		if (devctl & MGC_M_DEVCTL_HM) {
 #ifdef CONFIG_USB_MUSB_HDRC_HCD
-			power &= ~MGC_M_POWER_SUSPENDM;
-			musb_writeb(pBase, MGC_O_HDRC_POWER,
-				power | MGC_M_POWER_RESUME);
-
-			/* later, GetPortStatus will stop RESUME signaling */
-			pThis->port1_status |= MUSB_PORT_STAT_RESUME;
-			pThis->rh_timer = jiffies + msecs_to_jiffies(20);
-
-			/* should now be A_SUSPEND */
 			switch (pThis->xceiv.state) {
 			case OTG_STATE_A_SUSPEND:
-				pThis->xceiv.state = OTG_STATE_A_HOST;
-				usb_hcd_resume_root_hub(musb_to_hcd(pThis));
+				/* remote wakeup?  later, GetPortStatus
+				 * will stop RESUME signaling
+				 */
+				if (power & MGC_M_POWER_RESUME) {
+					power &= ~MGC_M_POWER_SUSPENDM;
+					musb_writeb(pBase, MGC_O_HDRC_POWER,
+						power | MGC_M_POWER_RESUME);
+
+					pThis->port1_status |=
+						  MUSB_PORT_STAT_RESUME
+						| USB_PORT_STAT_C_SUSPEND;
+					pThis->rh_timer = jiffies
+						+ msecs_to_jiffies(20);
+
+					pThis->xceiv.state = OTG_STATE_A_HOST;
+					pThis->is_active = 1;
+					usb_hcd_resume_root_hub(
+							musb_to_hcd(pThis));
+
+				} else if (power & MGC_M_POWER_SUSPENDM) {
+					/* spurious */
+					pThis->int_usb &= ~MGC_M_INTR_SUSPEND;
+				}
 				break;
 			case OTG_STATE_B_WAIT_ACON:
 				pThis->xceiv.state = OTG_STATE_B_PERIPHERAL;
+				pThis->is_active = 1;
 				MUSB_DEV_MODE(pThis);
 				break;
 			default:
-				WARN("bogus RESUME, from  %s\n",
+				WARN("bogus %s RESUME (%s)\n",
+					"host",
 					otg_state_string(pThis));
 			}
 #endif
 		} else {
+			switch (pThis->xceiv.state) {
+#ifdef CONFIG_USB_MUSB_HDRC_HCD
+			case OTG_STATE_A_SUSPEND:
+				/* possibly DISCONNECT is upcoming */
+				pThis->xceiv.state = OTG_STATE_A_HOST;
+				usb_hcd_resume_root_hub(musb_to_hcd(pThis));
+				break;
+#endif
 #ifdef CONFIG_USB_GADGET_MUSB_HDRC
-			MUSB_DEV_MODE(pThis);	/* unnecessary */
+			case OTG_STATE_B_WAIT_ACON:
+			case OTG_STATE_B_PERIPHERAL:
+				musb_g_resume(pThis);
+				break;
+			case OTG_STATE_B_IDLE:
+				pThis->int_usb &= ~MGC_M_INTR_SUSPEND;
+				break;
 #endif
-			musb_g_resume(pThis);
+			default:
+				WARN("bogus %s RESUME (%s)\n",
+					"peripheral",
+					otg_state_string(pThis));
+			}
 		}
 	}
 
@@ -552,18 +583,33 @@ static irqreturn_t musb_stage2_irq(struc
 	}
 
 	if (bIntrUSB & MGC_M_INTR_SUSPEND) {
-		DBG(1, "SUSPEND, devctl %02x\n", devctl);
+		DBG(1, "SUSPEND (%s) devctl %02x\n",
+				otg_state_string(pThis), devctl);
 		handled = IRQ_HANDLED;
 
-		/* peripheral suspend, may trigger HNP */
-		if (!(devctl & MGC_M_DEVCTL_HM)) {
+		switch (pThis->xceiv.state) {
+		case OTG_STATE_B_PERIPHERAL:
 			musb_g_suspend(pThis);
 			pThis->is_active = is_otg_enabled(pThis)
 					&& pThis->xceiv.gadget->b_hnp_enable;
-		} else
+			if (pThis->is_active) {
+				pThis->xceiv.state = OTG_STATE_B_WAIT_ACON;
+				/* REVISIT timeout for b_ase0_brst, etc */
+			}
+			break;
+		case OTG_STATE_A_HOST:
+			pThis->xceiv.state = OTG_STATE_A_SUSPEND;
+			pThis->is_active = is_otg_enabled(pThis)
+					&& pThis->xceiv.host->b_hnp_enable;
+			break;
+		default:
+			/* "should not happen" */
 			pThis->is_active = 0;
+			break;
+		}
 	}
 
+
 	return handled;
 }
 
@@ -650,11 +696,11 @@ static void musb_generic_disable(struct 
  * with controller locked, irqs blocked
  * acts as a NOP unless some role activated the hardware
  */
-void musb_stop(struct musb * pThis)
+void musb_stop(struct musb *musb)
 {
 	/* stop IRQs, timers, ... */
-	musb_platform_disable(pThis);
-	musb_generic_disable(pThis);
+	musb_platform_disable(musb);
+	musb_generic_disable(musb);
 	DBG(3, "HDRC disabled\n");
 
 	/* FIXME
@@ -664,14 +710,7 @@ void musb_stop(struct musb * pThis)
 	 *    OTG mode, gadget driver module rmmod/modprobe cycles that
 	 *  - ...
 	 */
-
-#ifdef CONFIG_USB_MUSB_HDRC_HCD
-	if (is_host_enabled(pThis)) {
-		/* REVISIT aren't there some paths where this is wrong?  */
-		dev_warn(pThis->controller, "%s, root hub still active\n",
-				__FUNCTION__);
-	}
-#endif
+	musb_platform_try_idle(musb);
 }
 
 static void musb_shutdown(struct platform_device *pdev)
@@ -1651,9 +1690,9 @@ musb_init_controller(struct device *dev,
 		status = -ENODEV;
 		goto fail2;
 	}
-	(void) enable_irq_wake(nIrq);
 	pThis->nIrq = nIrq;
-	device_init_wakeup(dev, 1);
+	if (enable_irq_wake(nIrq) == 0)
+		device_init_wakeup(dev, 1);
 
 	pr_info("%s: USB %s mode controller at %p using %s, IRQ %d\n",
 			musb_driver_name,
Index: linux-2.6.18/drivers/usb/musb/tusb6010.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/tusb6010.c
+++ linux-2.6.18/drivers/usb/musb/tusb6010.c
@@ -277,6 +277,12 @@ static void musb_do_idle(unsigned long _
 	if (!musb->is_active) {
 		u32	wakeups;
 
+#ifdef CONFIG_USB_MUSB_HDRC_HCD
+		/* wait until khubd handles port change status */
+		if (is_host_active(musb) && (musb->port1_status >> 16))
+			goto done;
+#endif
+
 #ifdef CONFIG_USB_GADGET_MUSB_HDRC
 		if (is_peripheral_enabled(musb) && !musb->pGadgetDriver)
 			wakeups = 0;
@@ -292,6 +298,7 @@ static void musb_do_idle(unsigned long _
 #endif
 		tusb_allow_idle(musb, wakeups);
 	}
+done:
 	spin_unlock_irqrestore(&musb->Lock, flags);
 }
 
@@ -636,8 +643,18 @@ void musb_platform_enable(struct musb * 
  */
 void musb_platform_disable(struct musb *musb)
 {
+	void __iomem	*base = musb->ctrl_base;
+
 	/* FIXME stop DMA, IRQs, timers, ... */
 
+	/* disable all IRQs */
+	musb_writel(base, TUSB_INT_MASK, ~TUSB_INT_MASK_RESERVED_BITS);
+	musb_writel(base, TUSB_USBIP_INT_MASK, 0);
+	musb_writel(base, TUSB_DMA_INT_MASK, 0x7fffffff);
+	musb_writel(base, TUSB_GPIO_INT_MASK, 0x1ff);
+
+	del_timer(&musb_idle_timer);
+
 	if (is_dma_capable() && !dma_off) {
 		printk(KERN_WARNING "%s %s: dma still active\n",
 				__FILE__, __FUNCTION__);
@@ -811,6 +828,8 @@ int __devinit musb_platform_init(struct 
 
 int musb_platform_exit(struct musb *musb)
 {
+	del_timer_sync(&musb_idle_timer);
+
 	if (musb->board_set_power)
 		musb->board_set_power(0);
 
Index: linux-2.6.18/drivers/usb/musb/virthub.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/virthub.c
+++ linux-2.6.18/drivers/usb/musb/virthub.c
@@ -105,8 +105,7 @@ static void musb_port_reset(struct musb 
 	u8 devctl = musb_readb(pBase, MGC_O_HDRC_DEVCTL);
 
 	if (musb->bDelayPortPowerOff || !(devctl & MGC_M_DEVCTL_HM)) {
-//		return;
-		DBG(1, "what?\n");
+		return;
 	}
 #endif
 
@@ -158,13 +157,14 @@ void musb_root_disconnect(struct musb *m
 
 	switch (musb->xceiv.state) {
 	case OTG_STATE_A_HOST:
+	case OTG_STATE_A_SUSPEND:
 		musb->xceiv.state = OTG_STATE_A_WAIT_BCON;
 		break;
 	case OTG_STATE_A_WAIT_VFALL:
 		musb->xceiv.state = OTG_STATE_B_IDLE;
 		break;
 	default:
-		DBG(1, "host disconnect, state %d\n", musb->xceiv.state);
+		DBG(1, "host disconnect (%s)\n", otg_state_string(musb));
 	}
 }
 
Index: linux-2.6.18/mvl_patches/pro50-1609.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1609.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1609);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

