#! /usr/bin/env bash
# Patch: -pro_emac_remove_periodic_timer
# Date: Thu Feb 19 15:02:51 2009
# Source: MontaVista Software, Inc.
# MR: 28780	
# Type: Enhancement
# Disposition: needs submitting to
# Signed-off-by: Aleksey Makarov <amakarov@ru.mvista.com>
# Signed-off-by: Mikhail Cherkashin <mcherkashin@ru.mvista.com>
# Description:
# Periodic timer is now deleted.
# 
#  drivers/net/davinci_emac.c |   72 ---------------------------------------------
#  1 file changed, 72 deletions(-)
# 

PATCHNUM=2132
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 28780	
Type: Enhancement
Disposition: needs submitting to
Signed-off-by: Aleksey Makarov <amakarov@ru.mvista.com>
Signed-off-by: Mikhail Cherkashin <mcherkashin@ru.mvista.com>
Description:
Periodic timer is now deleted.

 drivers/net/davinci_emac.c |   72 ---------------------------------------------
 mvl_patches/pro50-2132.c   |   16 ++++++++++
 2 files changed, 16 insertions(+), 72 deletions(-)

Index: linux-2.6.18/drivers/net/davinci_emac.c
===================================================================
--- linux-2.6.18.orig/drivers/net/davinci_emac.c
+++ linux-2.6.18/drivers/net/davinci_emac.c
@@ -1250,10 +1250,6 @@ struct emac_dev {
 	emac_ch_info tx_ch_info[EMAC_MAX_TX_CHANNELS];
 	emac_ch_info rx_ch_info[EMAC_MAX_RX_CHANNELS];
 
-	/* periodic timer required for MDIO polling */
-	struct timer_list periodic_timer;
-	u32 periodic_ticks;	/* ticks for this timer */
-	bool timer_active;	/* periodic timer active ??? */
 	struct timer_list mib_timer;	/* for 64 bit MIB counter  */
 	u32 mib_ticks;		/* ticks for this timer */
 	bool mib_timer_active;	/* periodic timer active ??? */
@@ -1397,8 +1393,6 @@ static int emac_p_reset_statistics(struc
 static int emac_p_read_rfc2665_stats(char *buf, char **start, off_t offset,
 				     int count, int *eof, void *data);
 
-static void emac_p_tick_timer_expiry(struct emac_dev *dev);
-
 static int emac_dev_set_mac_addr(struct net_device *netdev, void *addr);
 
 static void emac_disable_interrupt(struct emac_dev *edev);
@@ -1413,8 +1407,6 @@ typedef void (*timer_tick_func) (unsigne
 static int emac_send(struct emac_dev *dev, net_pkt_obj *pkt,
 		     int channel, bool send_args);
 
-static int emac_tick(struct emac_dev *dev, void *tick_args);
-
 static int emac_pkt_process(struct emac_dev *dev, int *pkts_pending,
 			    void *pkt_args);
 
@@ -2474,24 +2466,6 @@ static int emac_p_get_version(char *buf,
 	return len;
 }
 
-/* tick timer */
-static void emac_p_tick_timer_expiry(struct emac_dev *dev)
-{
-	struct timer_list *p_timer = &dev->periodic_timer;
-
-	if (test_bit(0, &dev->set_to_close)) {
-		return;
-	}
-
-	if (dev->timer_active == TRUE) {
-		emac_tick(dev, NULL);
-
-		/* restart the timer */
-		p_timer->expires = jiffies + dev->periodic_ticks;
-		add_timer(p_timer);
-	}
-}
-
 /* mib timer */
 static void emac_p_mib_timer_expiry(struct emac_dev *dev)
 {
@@ -2819,15 +2793,6 @@ static int emac_dev_init(struct net_devi
 
 	dev->drv_state = DRV_CREATED;
 
-	/* initialize the timers for the net device - the timer will
-	   be started by DDC calling the ioctl on DDA */
-	init_timer(&dev->periodic_timer);
-	dev->periodic_ticks = 0;
-	dev->periodic_timer.expires = 0;
-	dev->timer_active = FALSE;
-	dev->periodic_timer.data = (unsigned long)dev;
-	dev->periodic_timer.function =
-	    (timer_tick_func) emac_p_tick_timer_expiry;
 	init_timer(&dev->mib_timer);
 	dev->mib_timer_active = FALSE;
 	dev->mib_timer.data = (unsigned long)dev;
@@ -2979,12 +2944,6 @@ static int emac_dev_close(struct net_dev
 		    netdev->name, ret_code);
 		return -EIO;
 	} else {
-		/* DDC should turn off the timer, but just in case */
-		if (dev->timer_active != FALSE) {
-			del_timer_sync(&dev->periodic_timer);
-			dev->timer_active = FALSE;
-		}
-
 		pr_debug("Device %s Closed.\n", netdev->name);
 		dev->device_stats.start_tick = jiffies;
 		dev->link_speed = 100000000;
@@ -5217,37 +5176,6 @@ static char *emac_rx_host_error_codes[16
 #endif				/* EMAC_DEBUG */
 
 /**
- * EMAC DDC Periodic Timer (Tick) Function
- *  - calls PHY polling function
- *  - If status changed, invokes DDA callback to propogate PHY / Devicestatus
- *
- * "tickArgs" is not used in this implementation
- */
-static int emac_tick(struct emac_dev *dev, void *tick_args)
-{
-	/* verify proper device state */
-	if (dev->drv_state != DRV_OPENED) {
-		return (EMAC_ERR_DEV_NOT_OPEN);
-	}
-
-	if (!(dev->init_cfg.phy_mode & SNWAY_NOPHY)) {
-		/* opened and phy available */
-		int tick_change;
-
-		tick_change = emac_mdio_tick();
-		if (tick_change == 1) {	/*  MDIO indicated a change  */
-			emac_update_phy_status(dev);
-			emac_status_update (dev, &dev->status);
-		} else if ((dev->init_cfg.phy_mode & SNWAY_AUTOMDIX)
-			   && (tick_change & _MIIMDIO_MDIXFLIP)) {
-			/* DaVinci does not have MDI/MDIX on chip facility */
-		}
-	}
-
-	return (EMAC_SUCCESS);
-}
-
-/**
  * EMAC DDC Packet processing function
  *  - Detects if there are host errors and invokes the DDA callback to inform
  *    the DDA layer about the hardware error.
Index: linux-2.6.18/mvl_patches/pro50-2132.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-2132.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2009 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(2132);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

