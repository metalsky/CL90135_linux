#! /usr/bin/env bash
# Patch: -pro_arm_davinci_ti_msp430
# Date: Fri Sep 19 14:00:12 2008
# Source: MontaVista Software, Inc. 
# MR: 27818
# Type: Enhancement 
# Disposition: local 
# Signed-off-by: Aleksey Makarov <amakarov@ru.mvista.com> 
# Description: 
#     Support for MSP430 on TI Davinci development boards
# 

PATCHNUM=1568
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc. 
MR: 27818
Type: Enhancement 
Disposition: local 
Signed-off-by: Aleksey Makarov <amakarov@ru.mvista.com> 
Description: 
    Support for MSP430 on TI Davinci development boards

Index: linux-2.6.18/drivers/i2c/chips/Kconfig
===================================================================
--- linux-2.6.18.orig/drivers/i2c/chips/Kconfig
+++ linux-2.6.18/drivers/i2c/chips/Kconfig
@@ -156,4 +156,13 @@ config MCU_MPC8349EMITX
 	  MCU GPIOs as a generic GPIO API chip, so you'll able to use some MCU
 	  pins as a GPIOs and LEDs.
 
+config TI_MSP430
+	tristate "MSP430 on TI Davinci"
+	depends on I2C && MACH_DAVINCI_DM355_EVM
+	help
+	  Support for the MSP430 controller on the TI Davinci boards.
+	  MSP430 is a microprocessor that is programmed on the Davinci
+	  development boards so that it can be used as RTC, infrared remote
+	  control and controller for some of the onboard periferials.
+
 endmenu
Index: linux-2.6.18/drivers/i2c/chips/Makefile
===================================================================
--- linux-2.6.18.orig/drivers/i2c/chips/Makefile
+++ linux-2.6.18/drivers/i2c/chips/Makefile
@@ -17,6 +17,7 @@ obj-$(CONFIG_GPIOEXPANDER_OMAP)	+= gpio_
 obj-$(CONFIG_MENELAUS)		+= menelaus.o
 obj-$(CONFIG_RTC_X1205_I2C)	+= x1205.o
 obj-$(CONFIG_MCU_MPC8349EMITX)	+= mcu_mpc8349emitx.o
+obj-$(CONFIG_TI_MSP430)		+= ti_msp430.o
 
 ifeq ($(CONFIG_I2C_DEBUG_CHIP),y)
 EXTRA_CFLAGS += -DDEBUG
Index: linux-2.6.18/include/linux/i2c-id.h
===================================================================
--- linux-2.6.18.orig/include/linux/i2c-id.h
+++ linux-2.6.18/include/linux/i2c-id.h
@@ -120,8 +120,8 @@
 #define I2C_DRIVERID_WM8750	90	/* Wolfson WM8750 audio codec */
 #define I2C_DRIVERID_WM8753	91	/* Wolfson WM8753 audio codec */
 #define I2C_DRIVERID_CS4270	94	/* Cirrus Logic 4270 audio codec */
-
 #define I2C_DRIVERID_MCU_MPC8349EMITX	95	/* MPC8349E-mITX onboard MCU */
+#define I2C_DRIVERID_TI_MSP430	97	/* MSP430 on TI boards          */
 #define I2C_DRIVERID_M41T80	96	/* ST Micro M41T80 RTC          */
 
 #define I2C_DRIVERID_MISC	99	/* Whatever until sorted out	*/
Index: linux-2.6.18/arch/arm/mach-davinci/devices.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/devices.c
+++ linux-2.6.18/arch/arm/mach-davinci/devices.c
@@ -47,8 +47,8 @@ static struct davinci_i2c_platform_data 
 };
 
 static struct davinci_i2c_platform_data dm355_i2c_data = {
-	.bus_freq	= 400,
-	.bus_delay	= 0,
+	.bus_freq	= 20,
+	.bus_delay	= 100,
 };
 
 static struct davinci_i2c_platform_data dm646x_i2c_data = {
Index: linux-2.6.18/drivers/i2c/chips/ti_msp430.c
===================================================================
--- /dev/null
+++ linux-2.6.18/drivers/i2c/chips/ti_msp430.c
@@ -0,0 +1,133 @@
+/*
+ * I2C client/driver for the MSP430 chip on the TI development boards
+ * Author: Aleksey Makarov, MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/mutex.h>
+#include <linux/i2c.h>
+
+#include <asm/mach-types.h>
+
+#define	DRIVER_NAME "ti_msp430"
+
+static struct i2c_driver ti_msp430_driver;
+static struct i2c_client *client;
+static DEFINE_MUTEX(lock);
+
+int
+ti_msp430_read(u16 reg, u8 * value)
+{
+	s32 err;
+
+	if (!client)
+		return -ENODEV;
+
+	mutex_lock(&lock);
+
+	err = i2c_smbus_read_byte_data(client, reg);
+
+	mutex_unlock(&lock);
+
+	if (err == -1)
+		return -EIO;
+
+	*value = err;
+
+	return 0;
+}
+
+EXPORT_SYMBOL(ti_msp430_read);
+
+int
+ti_msp430_write(u16 reg, u8 value)
+{
+	s32 err;
+
+	if (!client)
+		return -ENODEV;
+
+	mutex_lock(&lock);
+
+	err = i2c_smbus_write_byte_data(client, reg, value);
+
+	mutex_unlock(&lock);
+
+	return err;
+}
+
+EXPORT_SYMBOL(ti_msp430_write);
+
+static int
+ti_msp430_attach(struct i2c_adapter *adap)
+{
+	int err = -ENODEV;
+
+	client = kzalloc(sizeof(struct i2c_client), GFP_KERNEL);
+	if (!client)
+		return -ENOMEM;
+
+	strncpy(client->name, DRIVER_NAME, I2C_NAME_SIZE);
+
+	if (machine_is_davinci_dm355_evm())
+		client->addr = 0x25;
+	else if(machine_is_davinci_evm())
+		client->addr = 0x23;
+	else
+		goto err;
+
+	client->adapter = adap;
+	client->driver = &ti_msp430_driver;
+
+	err = i2c_attach_client(client);
+	if (err)
+		goto err;
+
+	return 0;
+err:
+	kfree(client);
+	client = 0;
+	return err;
+}
+
+static int
+ti_msp430_detach(struct i2c_client *client)
+{
+	i2c_detach_client(client);
+	client = 0;
+	return 0;
+}
+
+static struct i2c_driver ti_msp430_driver = {
+	.driver = {
+		.name	= DRIVER_NAME,
+	},
+	.id = I2C_DRIVERID_TI_MSP430,
+	.attach_adapter = ti_msp430_attach,
+	.detach_client = ti_msp430_detach,
+};
+
+static int __init
+ti_msp430_init(void)
+{
+	return i2c_add_driver(&ti_msp430_driver);
+}
+
+static void __exit
+ti_msp430_exit(void)
+{
+	i2c_del_driver(&ti_msp430_driver);
+}
+
+module_init(ti_msp430_init);
+module_exit(ti_msp430_exit);
+
+MODULE_AUTHOR("Aleksey Makarov <amakarov@ru.mvista.com>");
+MODULE_DESCRIPTION("Driver for the MSP430 chip on the TI development boards");
+MODULE_LICENSE("GPL");
Index: linux-2.6.18/include/asm-arm/arch-davinci/ti_msp430.h
===================================================================
--- /dev/null
+++ linux-2.6.18/include/asm-arm/arch-davinci/ti_msp430.h
@@ -0,0 +1,18 @@
+/*
+ * Access to the registers of the MSP430 controller on the TI DaVinci boards
+ *
+ * Author: Aleksey Makarov, MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+*/
+
+#ifndef __ASM_ARCH_TI_MSP430_H
+#define __ASM_ARCH_TI_MSP430_H
+
+int ti_msp430_read(u16 reg, u8 * value);
+int ti_msp430_write(u16 reg, u8 value);
+
+#endif /* __ASM_ARCH_TI_MSP430_H */
Index: linux-2.6.18/mvl_patches/pro50-1568.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1568.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1568);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

