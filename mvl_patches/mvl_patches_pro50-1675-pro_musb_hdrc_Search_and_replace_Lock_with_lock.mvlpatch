#! /usr/bin/env bash
# Patch: -pro_musb_hdrc_Search_and_replace_Lock_with_lock
# Date: Fri Sep 19 14:07:44 2008
# From 7dcdf5064a38614029dad6a11e3fb3088088c522 Mon Sep 17 00:00:00 2001
# From: Tony Lindgren <tony@atomide.com>
# Date: Mon, 13 Aug 2007 04:04:23 -0700
# Subject: [PATCH] musb_hdrc: Search and replace Lock with lock
# 
# Search and replace Lock with lock
# 
# Signed-off-by: Tony Lindgren <tony@atomide.com>
# (cherry picked from commit 329a54034abdb3b5d32843a4034fd3bb13c1aa23)

PATCHNUM=1675
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
From 7dcdf5064a38614029dad6a11e3fb3088088c522 Mon Sep 17 00:00:00 2001
From: Tony Lindgren <tony@atomide.com>
Date: Mon, 13 Aug 2007 04:04:23 -0700
Subject: [PATCH] musb_hdrc: Search and replace Lock with lock

Search and replace Lock with lock

Signed-off-by: Tony Lindgren <tony@atomide.com>
(cherry picked from commit 329a54034abdb3b5d32843a4034fd3bb13c1aa23)
Index: linux-2.6.18/drivers/usb/musb/davinci.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/davinci.c
+++ linux-2.6.18/drivers/usb/musb/davinci.c
@@ -210,7 +210,7 @@ static void otg_timer(unsigned long _mus
 	devctl = musb_readb(mregs, MGC_O_HDRC_DEVCTL);
 	DBG(7, "poll devctl %02x (%s)\n", devctl, otg_state_string(musb));
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 	switch (musb->xceiv.state) {
 	case OTG_STATE_A_WAIT_VFALL:
 		/* Wait till VBUS falls below SessionEnd (~0.2V); the 1.3 RTL
@@ -252,7 +252,7 @@ static void otg_timer(unsigned long _mus
 	default:
 		break;
 	}
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 }
 
 static irqreturn_t davinci_interrupt(int irq, void *__hci)
@@ -263,7 +263,7 @@ static irqreturn_t davinci_interrupt(int
 	void		*__iomem tibase = musb->ctrl_base;
 	u32		tmp;
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 
 	/* NOTE: DaVinci shadows the Mentor IRQs.  Don't manage them through
 	 * the Mentor registers (except for setup), use the TI ones and EOI.
@@ -366,7 +366,7 @@ static irqreturn_t davinci_interrupt(int
 			&& musb->xceiv.state == OTG_STATE_B_IDLE)
 		mod_timer(&otg_workaround, jiffies + POLL_SECONDS * HZ);
 
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 
 	/* REVISIT we sometimes get unhandled IRQs
 	 * (e.g. ep0).  not clear why...
Index: linux-2.6.18/drivers/usb/musb/g_ep0.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/g_ep0.c
+++ linux-2.6.18/drivers/usb/musb/g_ep0.c
@@ -45,7 +45,7 @@
 #define	next_ep0_request(musb)	next_in_request(&(musb)->endpoints[0])
 
 /*
- * Locking note:  we use only the controller lock, for simpler correctness.
+ * locking note:  we use only the controller lock, for simpler correctness.
  * It's always held with IRQs blocked.
  *
  * It protects the ep0 request queue as well as ep0_state, not just the
@@ -226,8 +226,8 @@ static inline void musb_try_b_hnp_enable
 static int
 service_zero_data_request(struct musb *musb,
 		struct usb_ctrlrequest *pControlRequest)
-__releases(musb->Lock)
-__acquires(musb->Lock)
+__releases(musb->lock)
+__acquires(musb->lock)
 {
 	int handled = -EINVAL;
 	void __iomem *mbase = musb->mregs;
@@ -273,9 +273,9 @@ __acquires(musb->Lock)
 					break;
 
 				/* REVISIT do it directly, no locking games */
-				spin_unlock(&musb->Lock);
+				spin_unlock(&musb->lock);
 				musb_gadget_set_halt(&musb_ep->end_point, 0);
-				spin_lock(&musb->Lock);
+				spin_lock(&musb->lock);
 
 				/* select ep0 again */
 				MGC_SelectEnd(mbase, 0);
@@ -579,15 +579,15 @@ musb_read_setup(struct musb *musb, struc
 static int
 forward_to_driver(struct musb *musb,
 		const struct usb_ctrlrequest *pControlRequest)
-__releases(musb->Lock)
-__acquires(musb->Lock)
+__releases(musb->lock)
+__acquires(musb->lock)
 {
 	int retval;
 	if (!musb->pGadgetDriver)
 		return -EOPNOTSUPP;
-	spin_unlock(&musb->Lock);
+	spin_unlock(&musb->lock);
 	retval = musb->pGadgetDriver->setup(&musb->g, pControlRequest);
-	spin_lock(&musb->Lock);
+	spin_lock(&musb->lock);
 	return retval;
 }
 
@@ -850,7 +850,7 @@ musb_g_ep0_queue(struct usb_ep *e, struc
 	req->request.status = -EINPROGRESS;
 	req->bTx = ep->is_in;
 
-	spin_lock_irqsave(&musb->Lock, lockflags);
+	spin_lock_irqsave(&musb->lock, lockflags);
 
 	if (!list_empty(&ep->req_list)) {
 		status = -EBUSY;
@@ -905,7 +905,7 @@ musb_g_ep0_queue(struct usb_ep *e, struc
 	}
 
 cleanup:
-	spin_unlock_irqrestore(&musb->Lock, lockflags);
+	spin_unlock_irqrestore(&musb->lock, lockflags);
 	return status;
 }
 
@@ -933,7 +933,7 @@ static int musb_g_ep0_halt(struct usb_ep
 	base = musb->mregs;
 	regs = musb->control_ep->regs;
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 
 	if (!list_empty(&ep->req_list)) {
 		status = -EBUSY;
@@ -958,7 +958,7 @@ static int musb_g_ep0_halt(struct usb_ep
 	}
 
 cleanup:
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 	return status;
 }
 
Index: linux-2.6.18/drivers/usb/musb/musb_gadget.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musb_gadget.c
+++ linux-2.6.18/drivers/usb/musb/musb_gadget.c
@@ -102,8 +102,8 @@ void musb_g_giveback(
 	struct musb_ep		*ep,
 	struct usb_request	*pRequest,
 	int status)
-__releases(ep->musb->Lock)
-__acquires(ep->musb->Lock)
+__releases(ep->musb->lock)
+__acquires(ep->musb->lock)
 {
 	struct musb_request	*req;
 	struct musb		*musb;
@@ -117,7 +117,7 @@ __acquires(ep->musb->Lock)
 	musb = req->musb;
 
 	ep->busy = 1;
-	spin_unlock(&musb->Lock);
+	spin_unlock(&musb->lock);
 	if (is_dma_capable()) {
 		if (req->mapped) {
 			dma_unmap_single(musb->controller,
@@ -146,7 +146,7 @@ __acquires(ep->musb->Lock)
 				req->request.actual, req->request.length,
 				pRequest->status);
 	req->request.complete(&req->ep->end_point, &req->request);
-	spin_lock(&musb->Lock);
+	spin_lock(&musb->lock);
 	ep->busy = busy;
 }
 
@@ -871,7 +871,7 @@ static int musb_gadget_enable(struct usb
 	mbase = musb->mregs;
 	epnum = musb_ep->current_epnum;
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 
 	if (musb_ep->desc) {
 		status = -EBUSY;
@@ -988,7 +988,7 @@ static int musb_gadget_enable(struct usb
 	schedule_work(&musb->irq_work);
 
 fail:
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 	return status;
 }
 
@@ -1009,7 +1009,7 @@ static int musb_gadget_disable(struct us
 	epnum = musb_ep->current_epnum;
 	epio = musb->endpoints[epnum].regs;
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 	MGC_SelectEnd(musb->mregs, epnum);
 
 	/* zero the endpoint sizes */
@@ -1032,7 +1032,7 @@ static int musb_gadget_disable(struct us
 
 	schedule_work(&musb->irq_work);
 
-	spin_unlock_irqrestore(&(musb->Lock), flags);
+	spin_unlock_irqrestore(&(musb->lock), flags);
 
 	DBG(2, "%s\n", musb_ep->end_point.name);
 
@@ -1201,7 +1201,7 @@ static int musb_gadget_queue(struct usb_
 	} else
 		pRequest->mapped = 0;
 
-	spin_lock_irqsave(&musb->Lock, lockflags);
+	spin_lock_irqsave(&musb->lock, lockflags);
 
 	/* don't queue if the ep is down */
 	if (!musb_ep->desc) {
@@ -1219,7 +1219,7 @@ static int musb_gadget_queue(struct usb_
 		musb_ep_restart(musb, pRequest);
 
 cleanup:
-	spin_unlock_irqrestore(&musb->Lock, lockflags);
+	spin_unlock_irqrestore(&musb->lock, lockflags);
 	return status;
 }
 
@@ -1234,7 +1234,7 @@ static int musb_gadget_dequeue(struct us
 	if (!ep || !pRequest || to_musb_request(pRequest)->ep != musb_ep)
 		return -EINVAL;
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 
 	list_for_each_entry(r, &musb_ep->req_list, list) {
 		if (r == pRequest)
@@ -1269,7 +1269,7 @@ static int musb_gadget_dequeue(struct us
 	}
 
 done:
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 	return status;
 }
 
@@ -1295,7 +1295,7 @@ int musb_gadget_set_halt(struct usb_ep *
 		return -EINVAL;
 	mbase = musb->mregs;
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 
 	if ((USB_ENDPOINT_XFER_ISOC == musb_ep->type)) {
 		status = -EINVAL;
@@ -1310,7 +1310,7 @@ int musb_gadget_set_halt(struct usb_ep *
 		wCsr = musb_readw(epio, MGC_O_HDRC_TXCSR);
 		if (wCsr & MGC_M_TXCSR_FIFONOTEMPTY) {
 			DBG(3, "%s fifo busy, cannot halt\n", ep->name);
-			spin_unlock_irqrestore(&musb->Lock, flags);
+			spin_unlock_irqrestore(&musb->lock, flags);
 			return -EAGAIN;
 		}
 
@@ -1352,7 +1352,7 @@ done:
 		musb_ep_restart(musb, pRequest);
 	}
 
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 	return status;
 }
 
@@ -1368,13 +1368,13 @@ static int musb_gadget_fifo_status(struc
 		void __iomem		*mbase = musb->mregs;
 		unsigned long		flags;
 
-		spin_lock_irqsave(&musb->Lock, flags);
+		spin_lock_irqsave(&musb->lock, flags);
 
 		MGC_SelectEnd(mbase, epnum);
 		/* FIXME return zero unless RXPKTRDY is set */
 		retval = musb_readw(epio, MGC_O_HDRC_RXCOUNT);
 
-		spin_unlock_irqrestore(&musb->Lock, flags);
+		spin_unlock_irqrestore(&musb->lock, flags);
 	}
 	return retval;
 }
@@ -1391,7 +1391,7 @@ static void musb_gadget_fifo_flush(struc
 
 	mbase = musb->mregs;
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 	MGC_SelectEnd(mbase, (u8) nEnd);
 
 	/* disable interrupts */
@@ -1415,7 +1415,7 @@ static void musb_gadget_fifo_flush(struc
 
 	/* re-enable interrupt */
 	musb_writew(mbase, MGC_O_HDRC_INTRTXE, wIntrTxE);
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 }
 
 static const struct usb_ep_ops musb_ep_ops = {
@@ -1450,7 +1450,7 @@ static int musb_gadget_wakeup(struct usb
 	u8		power, devctl;
 	int		retries;
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 
 	switch (musb->xceiv.state) {
 	case OTG_STATE_B_PERIPHERAL:
@@ -1505,7 +1505,7 @@ static int musb_gadget_wakeup(struct usb
 	power &= ~MGC_M_POWER_RESUME;
 	musb_writeb(mregs, MGC_O_HDRC_POWER, power);
 done:
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 	return status;
 }
 
@@ -1574,12 +1574,12 @@ static int musb_gadget_pullup(struct usb
 	/* NOTE: this assumes we are sensing vbus; we'd rather
 	 * not pullup unless the B-session is active.
 	 */
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 	if (is_on != musb->softconnect) {
 		musb->softconnect = is_on;
 		musb_pullup(musb, is_on);
 	}
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 	return 0;
 }
 
@@ -1756,7 +1756,7 @@ int usb_gadget_register_driver(struct us
 	}
 
 	DBG(3, "registering driver %s\n", driver->function);
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 
 	if (musb->pGadgetDriver) {
 		DBG(1, "%s is already bound to %s\n",
@@ -1771,7 +1771,7 @@ int usb_gadget_register_driver(struct us
 		retval = 0;
 	}
 
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 
 	if (retval == 0)
 		retval = driver->bind(&musb->g);
@@ -1784,7 +1784,7 @@ int usb_gadget_register_driver(struct us
 
 	/* start peripheral and/or OTG engines */
 	if (retval == 0) {
-		spin_lock_irqsave(&musb->Lock, flags);
+		spin_lock_irqsave(&musb->lock, flags);
 
 		/* REVISIT always use otg_set_peripheral(), handling
 		 * issues including the root hub one below ...
@@ -1802,7 +1802,7 @@ int usb_gadget_register_driver(struct us
 		if (!is_otg_enabled(musb))
 			musb_start(musb);
 
-		spin_unlock_irqrestore(&musb->Lock, flags);
+		spin_unlock_irqrestore(&musb->lock, flags);
 
 		if (is_otg_enabled(musb)) {
 			DBG(3, "OTG startup...\n");
@@ -1814,12 +1814,12 @@ int usb_gadget_register_driver(struct us
 			retval = usb_add_hcd(musb_to_hcd(musb), -1, 0);
 			if (retval < 0) {
 				DBG(1, "add_hcd failed, %d\n", retval);
-				spin_lock_irqsave(&musb->Lock, flags);
+				spin_lock_irqsave(&musb->lock, flags);
 				musb->xceiv.gadget = NULL;
 				musb->xceiv.state = OTG_STATE_UNDEFINED;
 				musb->pGadgetDriver = NULL;
 				musb->g.dev.driver = NULL;
-				spin_unlock_irqrestore(&musb->Lock, flags);
+				spin_unlock_irqrestore(&musb->lock, flags);
 			}
 		}
 	}
@@ -1865,9 +1865,9 @@ stop_activity(struct musb *musb, struct 
 			}
 		}
 
-		spin_unlock(&musb->Lock);
+		spin_unlock(&musb->lock);
 		driver->disconnect (&musb->g);
-		spin_lock(&musb->Lock);
+		spin_lock(&musb->lock);
 	}
 }
 
@@ -1890,7 +1890,7 @@ int usb_gadget_unregister_driver(struct 
 	 * this needs to shut down the OTG engine.
 	 */
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 
 #ifdef	CONFIG_USB_MUSB_OTG
 	musb_hnp_stop(musb);
@@ -1901,9 +1901,9 @@ int usb_gadget_unregister_driver(struct 
 		stop_activity(musb, driver);
 
 		DBG(3, "unregistering driver %s\n", driver->function);
-		spin_unlock_irqrestore(&musb->Lock, flags);
+		spin_unlock_irqrestore(&musb->lock, flags);
 		driver->unbind(&musb->g);
-		spin_lock_irqsave(&musb->Lock, flags);
+		spin_lock_irqsave(&musb->lock, flags);
 
 		musb->pGadgetDriver = NULL;
 		musb->g.dev.driver = NULL;
@@ -1912,7 +1912,7 @@ int usb_gadget_unregister_driver(struct 
 		musb_platform_try_idle(musb, 0);
 	} else
 		retval = -EINVAL;
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 
 	if (is_otg_enabled(musb) && retval == 0) {
 		usb_remove_hcd(musb_to_hcd(musb));
@@ -1941,9 +1941,9 @@ void musb_g_resume(struct musb *musb)
 	case OTG_STATE_B_PERIPHERAL:
 		musb->is_active = 1;
 		if (musb->pGadgetDriver && musb->pGadgetDriver->resume) {
-			spin_unlock(&musb->Lock);
+			spin_unlock(&musb->lock);
 			musb->pGadgetDriver->resume(&musb->g);
-			spin_lock(&musb->Lock);
+			spin_lock(&musb->lock);
 		}
 		break;
 	default:
@@ -1968,9 +1968,9 @@ void musb_g_suspend(struct musb *musb)
 	case OTG_STATE_B_PERIPHERAL:
 		musb->is_suspended = 1;
 		if (musb->pGadgetDriver && musb->pGadgetDriver->suspend) {
-			spin_unlock(&musb->Lock);
+			spin_unlock(&musb->lock);
 			musb->pGadgetDriver->suspend(&musb->g);
-			spin_lock(&musb->Lock);
+			spin_lock(&musb->lock);
 		}
 		break;
 	default:
@@ -2004,9 +2004,9 @@ void musb_g_disconnect(struct musb *musb
 
 	musb->g.speed = USB_SPEED_UNKNOWN;
 	if (musb->pGadgetDriver && musb->pGadgetDriver->disconnect) {
-		spin_unlock(&musb->Lock);
+		spin_unlock(&musb->lock);
 		musb->pGadgetDriver->disconnect(&musb->g);
-		spin_lock(&musb->Lock);
+		spin_lock(&musb->lock);
 	}
 
 	switch (musb->xceiv.state) {
@@ -2031,8 +2031,8 @@ void musb_g_disconnect(struct musb *musb
 }
 
 void musb_g_reset(struct musb *musb)
-__releases(musb->Lock)
-__acquires(musb->Lock)
+__releases(musb->lock)
+__acquires(musb->lock)
 {
 	void __iomem	*mbase = musb->mregs;
 	u8		devctl = musb_readb(mbase, MGC_O_HDRC_DEVCTL);
Index: linux-2.6.18/drivers/usb/musb/musb_host.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musb_host.c
+++ linux-2.6.18/drivers/usb/musb/musb_host.c
@@ -267,8 +267,8 @@ start:
 /* caller owns controller lock, irqs are blocked */
 static void
 __musb_giveback(struct musb *musb, struct urb *urb, int status)
-__releases(musb->Lock)
-__acquires(musb->Lock)
+__releases(musb->lock)
+__acquires(musb->lock)
 {
 	if ((urb->transfer_flags & URB_SHORT_NOT_OK)
 			&& (urb->actual_length < urb->transfer_buffer_length)
@@ -305,9 +305,9 @@ __acquires(musb->Lock)
 			urb->actual_length, urb->transfer_buffer_length
 			);
 
-	spin_unlock(&musb->Lock);
+	spin_unlock(&musb->lock);
 	usb_hcd_giveback_urb(musb_to_hcd(musb), urb);
-	spin_lock(&musb->Lock);
+	spin_lock(&musb->lock);
 }
 
 /* for bulk/interrupt endpoints only */
@@ -1868,7 +1868,7 @@ static int musb_urb_enqueue(
 	 * until we get real dma queues (with an entry for each urb/buffer),
 	 * we only have work to do in the former case.
 	 */
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 	if (hep->hcpriv) {
 		/* some concurrent activity submitted another urb to hep...
 		 * odd, rare, error prone, but legal.
@@ -1885,7 +1885,7 @@ static int musb_urb_enqueue(
 		 * musb_start_urb(), but otherwise only konicawc cares ...
 		 */
 	}
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 
 done:
 	if (status != 0)
@@ -1968,7 +1968,7 @@ static int musb_urb_dequeue(struct usb_h
 			usb_pipeendpoint(urb->pipe),
 			usb_pipein(urb->pipe) ? "in" : "out");
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 
 	/* make sure the urb is still queued and not completed */
 	spin_lock(&urb->lock);
@@ -2039,7 +2039,7 @@ static int musb_urb_dequeue(struct usb_h
 	} else
 		status = musb_cleanup_urb(urb, qh, urb->pipe & USB_DIR_IN);
 done:
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 	return status;
 }
 
@@ -2058,7 +2058,7 @@ musb_h_disable(struct usb_hcd *hcd, stru
 	if (!qh)
 		return;
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 
 	switch (qh->type) {
 	case USB_ENDPOINT_XFER_CONTROL:
@@ -2100,7 +2100,7 @@ musb_h_disable(struct usb_hcd *hcd, stru
 	list_for_each_entry_safe_from(urb, tmp, &hep->urb_list, urb_list)
 		musb_giveback(qh, urb, -ESHUTDOWN);
 
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 }
 
 static int musb_h_get_frame_number(struct usb_hcd *hcd)
Index: linux-2.6.18/drivers/usb/musb/musb_procfs.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musb_procfs.c
+++ linux-2.6.18/drivers/usb/musb/musb_procfs.c
@@ -792,7 +792,7 @@ static int musb_proc_read(char *page, ch
 	if (count <= 0)
 		return -EINVAL;
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 
 	code = dump_header_stats(musb, buffer);
 	if (code > 0) {
@@ -813,7 +813,7 @@ static int musb_proc_read(char *page, ch
 
 	musb_platform_try_idle(musb, 0);
 
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 	*eof = 1;
 
 	return buffer - page;
Index: linux-2.6.18/drivers/usb/musb/musbdefs.h
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musbdefs.h
+++ linux-2.6.18/drivers/usb/musb/musbdefs.h
@@ -342,7 +342,7 @@ static inline struct usb_request *next_o
  * struct musb - Driver instance data.
  */
 struct musb {
-	spinlock_t		Lock;
+	spinlock_t		lock;
 	struct clk		*clock;
 	irqreturn_t		(*isr)(int, void *);
 	struct work_struct	irq_work;
Index: linux-2.6.18/drivers/usb/musb/plat_uds.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/plat_uds.c
+++ linux-2.6.18/drivers/usb/musb/plat_uds.c
@@ -297,14 +297,14 @@ void musb_otg_timer_func(unsigned long d
 	struct musb	*musb = (struct musb *)data;
 	unsigned long	flags;
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 	if (musb->xceiv.state == OTG_STATE_B_WAIT_ACON) {
 		DBG(1, "HNP: B_WAIT_ACON timeout, going back to B_PERIPHERAL\n");
 		musb_g_disconnect(musb);
 		musb->xceiv.state = OTG_STATE_B_PERIPHERAL;
 		musb->is_active = 0;
 	}
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 }
 
 static DEFINE_TIMER(musb_otg_timer, musb_otg_timer_func, 0, 0);
@@ -882,14 +882,14 @@ static void musb_shutdown(struct platfor
 	struct musb	*musb = dev_to_musb(&pdev->dev);
 	unsigned long	flags;
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 	musb_platform_disable(musb);
 	musb_generic_disable(musb);
 	if (musb->clock) {
 		clk_put(musb->clock);
 		musb->clock = NULL;
 	}
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 
 	/* FIXME power down */
 }
@@ -1419,7 +1419,7 @@ static irqreturn_t generic_interrupt(int
 	irqreturn_t	retval = IRQ_NONE;
 	struct musb	*musb = __hci;
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 
 	musb->int_usb = musb_readb(musb->mregs, MGC_O_HDRC_INTRUSB);
 	musb->int_tx = musb_readw(musb->mregs, MGC_O_HDRC_INTRTX);
@@ -1428,7 +1428,7 @@ static irqreturn_t generic_interrupt(int
 	if (musb->int_usb || musb->int_tx || musb->int_rx)
 		retval = musb_interrupt(musb);
 
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 
 	/* REVISIT we sometimes get spurious IRQs on g_ep0
 	 * not clear why...
@@ -1592,9 +1592,9 @@ musb_mode_show(struct device *dev, struc
 	unsigned long flags;
 	int ret = -EINVAL;
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 	ret = sprintf(buf, "%s\n", otg_state_string(musb));
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 
 	return ret;
 }
@@ -1606,14 +1606,14 @@ musb_mode_store(struct device *dev, stru
 	struct musb	*musb = dev_to_musb(dev);
 	unsigned long	flags;
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 	if (!strncmp(buf, "host", 4))
 		musb_platform_set_mode(musb, MUSB_HOST);
 	if (!strncmp(buf, "peripheral", 10))
 		musb_platform_set_mode(musb, MUSB_PERIPHERAL);
 	if (!strncmp(buf, "otg", 3))
 		musb_platform_set_mode(musb, MUSB_OTG);
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 
 	return n;
 }
@@ -1627,7 +1627,7 @@ musb_cable_show(struct device *dev, stru
 	unsigned long flags;
 	int vbus;
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 #if defined(CONFIG_USB_TUSB6010) && !defined(CONFIG_USB_MUSB_OTG)
 	/* REVISIT: connect-A != connect-B ... */
 	vbus = musb_platform_get_vbus_status(musb);
@@ -1659,7 +1659,7 @@ musb_cable_show(struct device *dev, stru
 		v2 = "disconnected";
 #endif
 	musb_platform_try_idle(musb, 0);
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 
 	return sprintf(buf, "%s%s\n", v1, v2);
 }
@@ -1673,7 +1673,7 @@ musb_vbus_store(struct device *dev, stru
 	unsigned long	flags;
 	unsigned long	val;
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 	if (sscanf(buf, "%lu", &val) < 1) {
 		printk(KERN_ERR "Invalid VBUS timeout ms value\n");
 		return -EINVAL;
@@ -1682,7 +1682,7 @@ musb_vbus_store(struct device *dev, stru
 	if (musb->xceiv.state == OTG_STATE_A_WAIT_BCON)
 		musb->is_active = 0;
 	musb_platform_try_idle(musb, jiffies + msecs_to_jiffies(val));
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 
 	return n;
 }
@@ -1694,9 +1694,9 @@ musb_vbus_show(struct device *dev, struc
 	unsigned long	flags;
 	unsigned long	val;
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 	val = musb->a_wait_bcon;
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 
 	return sprintf(buf, "%lu\n", val);
 }
@@ -1716,10 +1716,10 @@ musb_srp_store(struct device *dev, struc
 		return -EINVAL;
 	}
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 	if (srp == 1)
 		musb_g_wakeup(musb);
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 
 	return n;
 }
@@ -1881,7 +1881,7 @@ musb_init_controller(struct device *dev,
 	if (!musb)
 		return -ENOMEM;
 
-	spin_lock_init(&musb->Lock);
+	spin_lock_init(&musb->lock);
 	musb->board_mode = plat->mode;
 	musb->board_set_power = plat->set_power;
 	musb->set_clock = plat->set_clock;
@@ -2108,7 +2108,7 @@ static int musb_suspend(struct platform_
 	if (!musb->clock)
 		return 0;
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 
 	if (is_peripheral_active(musb)) {
 		/* FIXME force disconnect unless we know USB will wake
@@ -2124,7 +2124,7 @@ static int musb_suspend(struct platform_
 		musb->set_clock(musb->clock, 0);
 	else
 		clk_disable(musb->clock);
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 	return 0;
 }
 
@@ -2136,7 +2136,7 @@ static int musb_resume(struct platform_d
 	if (!musb->clock)
 		return 0;
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 
 	if (musb->set_clock)
 		musb->set_clock(musb->clock, 1);
@@ -2147,7 +2147,7 @@ static int musb_resume(struct platform_d
 	 * unless for some reason the whole soc powered down and we're
 	 * not treating that as a whole-system restart (e.g. swsusp)
 	 */
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 	return 0;
 }
 
Index: linux-2.6.18/drivers/usb/musb/tusb6010.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/tusb6010.c
+++ linux-2.6.18/drivers/usb/musb/tusb6010.c
@@ -394,7 +394,7 @@ static void musb_do_idle(unsigned long _
 	struct musb	*musb = (void *)_musb;
 	unsigned long	flags;
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 
 	switch (musb->xceiv.state) {
 	case OTG_STATE_A_WAIT_BCON:
@@ -437,7 +437,7 @@ static void musb_do_idle(unsigned long _
 		tusb_allow_idle(musb, wakeups);
 	}
 done:
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 }
 
 /*
@@ -771,7 +771,7 @@ static irqreturn_t tusb_interrupt(int ir
 	unsigned long	flags, idle_timeout = 0;
 	u32		int_mask, int_src;
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 
 	/* Mask all interrupts to allow using both edge and level GPIO irq */
 	int_mask = musb_readl(base, TUSB_INT_MASK);
@@ -869,7 +869,7 @@ static irqreturn_t tusb_interrupt(int ir
 	musb_platform_try_idle(musb, idle_timeout);
 
 	musb_writel(base, TUSB_INT_MASK, int_mask);
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 
 	return IRQ_HANDLED;
 }
@@ -991,7 +991,7 @@ static int __init tusb_start(struct musb
 		return ret;
 	}
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 
 	if (musb_readl(base, TUSB_PROD_TEST_RESET) !=
 		TUSB_PROD_TEST_RESET_VAL) {
@@ -1033,12 +1033,12 @@ static int __init tusb_start(struct musb
 	reg |= TUSB_PHY_OTG_CTRL_WRPROTECT | TUSB_PHY_OTG_CTRL_OTG_ID_PULLUP;
 	musb_writel(base, TUSB_PHY_OTG_CTRL, reg);
 
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 
 	return 0;
 
 err:
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 
 	if (musb->board_set_power)
 		musb->board_set_power(0);
Index: linux-2.6.18/drivers/usb/musb/tusb6010_omap.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/tusb6010_omap.c
+++ linux-2.6.18/drivers/usb/musb/tusb6010_omap.c
@@ -149,7 +149,7 @@ static void tusb_omap_dma_cb(int lch, u1
 	unsigned long		remaining, flags, pio;
 	int			ch;
 
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 
 	if (dmareq_works())
 		ch = chdat->ch;
@@ -230,7 +230,7 @@ static void tusb_omap_dma_cb(int lch, u1
 		}
 	}
 
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 }
 
 static int tusb_omap_dma_program(struct dma_channel *channel, u16 packet_sz,
Index: linux-2.6.18/drivers/usb/musb/virthub.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/virthub.c
+++ linux-2.6.18/drivers/usb/musb/virthub.c
@@ -233,7 +233,7 @@ int musb_hub_control(
 	 * port features: reported, sometimes updated when host is active
 	 * no indicators
 	 */
-	spin_lock_irqsave(&musb->Lock, flags);
+	spin_lock_irqsave(&musb->lock, flags);
 	switch (typeReq) {
 	case ClearHubFeature:
 	case SetHubFeature:
@@ -411,6 +411,6 @@ error:
 		/* "protocol stall" on error */
 		retval = -EPIPE;
 	}
-	spin_unlock_irqrestore(&musb->Lock, flags);
+	spin_unlock_irqrestore(&musb->lock, flags);
 	return retval;
 }
Index: linux-2.6.18/mvl_patches/pro50-1675.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1675.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1675);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

