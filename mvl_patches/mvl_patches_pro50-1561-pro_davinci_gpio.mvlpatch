#! /usr/bin/env bash
# Patch: -pro_davinci_gpio
# Date: Fri Sep 19 13:59:42 2008
# Source: MontaVista Software, Inc.
# MR: 27507
# Type: Enhancement
# Disposition: needs submitting to upstream
# Signed-off-by: Steve Chen <schen@mvista.com>
# Description:
#  Enhance gpio to support multiple DaVinci variants.
# 
#  arch/arm/mach-davinci/board-dm355-evm.c |    1 
#  arch/arm/mach-davinci/board-evm.c       |    2 
#  arch/arm/mach-davinci/gpio.c            |  147 +++++++++++++++++++++++++++++---
#  include/asm-arm/arch-davinci/gpio.h     |   64 +++----------
#  include/asm-arm/arch-davinci/irqs.h     |    4 
#  5 files changed, 157 insertions(+), 61 deletions(-)
# 

PATCHNUM=1561
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 27507
Type: Enhancement
Disposition: needs submitting to upstream
Signed-off-by: Steve Chen <schen@mvista.com>
Description:
 Enhance gpio to support multiple DaVinci variants.

 arch/arm/mach-davinci/board-dm355-evm.c |    1 
 arch/arm/mach-davinci/board-evm.c       |    2 
 arch/arm/mach-davinci/gpio.c            |  147 +++++++++++++++++++++++++++++---
 include/asm-arm/arch-davinci/gpio.h     |   64 +++----------
 include/asm-arm/arch-davinci/irqs.h     |    4 
 mvl_patches/pro50-1561.c                |   16 +++
 6 files changed, 173 insertions(+), 61 deletions(-)

Index: linux-2.6.18/arch/arm/mach-davinci/board-dm355-evm.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/board-dm355-evm.c
+++ linux-2.6.18/arch/arm/mach-davinci/board-dm355-evm.c
@@ -537,6 +537,7 @@ static void __init davinci_map_io(void)
 
 static __init void davinci_init(void)
 {
+	davinci_gpio_init();
 	setup_ethernet();
 	setup_mmc();
 	setup_nand();
Index: linux-2.6.18/arch/arm/mach-davinci/board-evm.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/board-evm.c
+++ linux-2.6.18/arch/arm/mach-davinci/board-evm.c
@@ -29,6 +29,7 @@
 #include <asm/mach/flash.h>
 
 #include <asm/arch/common.h>
+#include <asm/arch/gpio.h>
 #include <asm/arch/i2c-client.h>
 
 /* other misc. init functions */
@@ -174,6 +175,7 @@ static __init void davinci_evm_i2c_expan
 
 static __init void davinci_evm_init(void)
 {
+	davinci_gpio_init();
 	davinci_psc_init();
 
 	board_i2c_expander_setup = davinci_evm_i2c_expander_setup;
Index: linux-2.6.18/arch/arm/mach-davinci/gpio.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/gpio.c
+++ linux-2.6.18/arch/arm/mach-davinci/gpio.c
@@ -22,19 +22,57 @@
 
 #include <asm/arch/irqs.h>
 #include <asm/arch/hardware.h>
+#include <asm/arch/cpu.h>
 #include <asm/arch/gpio.h>
 
 #include <asm/mach/irq.h>
 
+/* If a new chip is added with number of GPIO greater than 104, please
+   update DAVINCI_MAX_N_GPIO in include/asm-arm/arch-davinci/irqs.h */
+#define DM646x_N_GPIO	48
+#define DM644x_N_GPIO	71
+#define DM355_N_GPIO	104
+
 static DEFINE_SPINLOCK(gpio_lock);
-static DECLARE_BITMAP(gpio_in_use, DAVINCI_N_GPIO);
+static struct gpio_bank *gpio_bank;
+
+#ifdef CONFIG_ARCH_DAVINCI644x
+static DECLARE_BITMAP(dm644x_gpio_in_use, DM644x_N_GPIO);
+struct gpio_bank gpio_bank_dm6446 = {
+	.base		= DAVINCI_GPIO_BASE,
+	.num_gpio	= DM644x_N_GPIO,
+	.irq_num	= IRQ_DM644X_GPIOBNK0,
+	.irq_mask	= 0x1f,
+	.in_use		= dm644x_gpio_in_use,
+};
+#endif
+#ifdef CONFIG_ARCH_DAVINCI_DM355
+static DECLARE_BITMAP(dm355_gpio_in_use, DM355_N_GPIO);
+struct gpio_bank gpio_bank_dm355 = {
+	.base		= DAVINCI_GPIO_BASE,
+	.num_gpio	= DM355_N_GPIO,
+	.irq_num	= IRQ_DM355_GPIOBNK0,
+	.irq_mask	= 0x3f,
+	.in_use		= dm355_gpio_in_use,
+};
+#endif
 
+#ifdef CONFIG_ARCH_DAVINCI_DM646x
+static DECLARE_BITMAP(dm646x_gpio_in_use, DM646x_N_GPIO);
+struct gpio_bank gpio_bank_dm646x = {
+	.base		= DAVINCI_GPIO_BASE,
+	.num_gpio	= DM646x_N_GPIO,
+	.irq_num	= IRQ_DM646X_GPIOBNK0,
+	.irq_mask	= 0x1f,
+	.in_use		= dm646x_gpio_in_use,
+};
+#endif
 int gpio_request(unsigned gpio, const char *tag)
 {
-	if (gpio >= DAVINCI_N_GPIO)
+	if (gpio >= gpio_bank->num_gpio)
 		return -EINVAL;
 
-	if (test_and_set_bit(gpio, gpio_in_use))
+	if (test_and_set_bit(gpio, gpio_bank->in_use))
 		return -EBUSY;
 
 	return 0;
@@ -43,13 +81,84 @@ EXPORT_SYMBOL(gpio_request);
 
 void gpio_free(unsigned gpio)
 {
-	if (gpio >= DAVINCI_N_GPIO)
+	if (gpio >= gpio_bank->num_gpio)
 		return;
 
-	clear_bit(gpio, gpio_in_use);
+	clear_bit(gpio, gpio_bank->in_use);
 }
 EXPORT_SYMBOL(gpio_free);
 
+/* The __gpio_to_controller() and __gpio_mask() functions inline to constants
+ * with constant parameters; or in outlined code they execute at runtime.
+ *
+ * You'd access the controller directly when reading or writing more than
+ * one gpio value at a time, and to support wired logic where the value
+ * being driven by the cpu need not match the value read back.
+ *
+ * These are NOT part of the cross-platform GPIO interface
+ */
+struct gpio_controller *__iomem __gpio_to_controller(unsigned gpio)
+{
+	void *__iomem ptr;
+
+	if (gpio >= gpio_bank->num_gpio)
+		return NULL;
+
+	if (gpio < 32)
+		ptr = (void *__iomem)IO_ADDRESS(gpio_bank->base + 0x10);
+	else if (gpio < 64)
+		ptr = (void *__iomem)IO_ADDRESS(gpio_bank->base + 0x38);
+	else if (gpio < 96)
+		ptr = (void *__iomem)IO_ADDRESS(gpio_bank->base + 0x60);
+	else
+		ptr = (void *__iomem)IO_ADDRESS(gpio_bank->base + 0x88);
+	return ptr;
+}
+
+void gpio_set_value(unsigned gpio, int value)
+{
+	if (__builtin_constant_p(value)) {
+		struct gpio_controller	*__iomem g;
+		u32			mask;
+
+		if (gpio >= gpio_bank->num_gpio)
+			__error_inval_gpio();
+
+		g = __gpio_to_controller(gpio);
+		mask = __gpio_mask(gpio);
+		if (value)
+			__raw_writel(mask, &g->set_data);
+		else
+			__raw_writel(mask, &g->clr_data);
+		return;
+	}
+
+	__gpio_set(gpio, value);
+}
+
+/* Returns zero or nonzero; works for gpios configured as inputs OR
+ * as outputs.
+ *
+ * NOTE: changes in reported values are synchronized to the GPIO clock.
+ * This is most easily seen after calling gpio_set_value() and then immediatly
+ * gpio_get_value(), where the gpio_get_value() would return the old value
+ * until the GPIO clock ticks and the new value gets latched.
+ */
+
+int gpio_get_value(unsigned gpio)
+{
+	struct gpio_controller *__iomem g;
+
+	if (!__builtin_constant_p(gpio))
+		return __gpio_get(gpio);
+
+	if (gpio >= gpio_bank->num_gpio)
+		return __error_inval_gpio();
+
+	g = __gpio_to_controller(gpio);
+	return !!(__gpio_mask(gpio) & __raw_readl(&g->in_data));
+}
+
 /* create a non-inlined version */
 static struct gpio_controller *__iomem gpio2controller(unsigned gpio)
 {
@@ -250,8 +359,8 @@ static int __init davinci_gpio_irq_setup
 
 	clk_enable(clk);
 
-	for (gpio = 0, irq = gpio_to_irq(0), bank = IRQ_GPIOBNK0;
-	     gpio < DAVINCI_N_GPIO; bank++) {
+	for (gpio = 0, irq = gpio_to_irq(0), bank = gpio_bank->irq_num;
+	     gpio < gpio_bank->num_gpio; bank++) {
 		struct gpio_controller	*__iomem g = gpio2controller(gpio);
 		unsigned		i;
 
@@ -263,7 +372,7 @@ static int __init davinci_gpio_irq_setup
 		set_irq_chip_data(bank, g);
 		set_irq_data(bank, (void *)irq);
 
-		for (i = 0; i < 16 && gpio < DAVINCI_N_GPIO;
+		for (i = 0; i < 16 && gpio < gpio_bank->num_gpio;
 		     i++, irq++, gpio++) {
 			set_irq_chip(irq, &gpio_irqchip);
 			set_irq_chip_data(irq, g);
@@ -275,12 +384,28 @@ static int __init davinci_gpio_irq_setup
 	/* BINTEN -- per-bank interrupt enable. genirq would also let these
 	 * bits be set/cleared dynamically.
 	 */
-	__raw_writel(0x1f, (void *__iomem)
-		     IO_ADDRESS(DAVINCI_GPIO_BASE + 0x08));
+	__raw_writel(gpio_bank->irq_mask, (void *__iomem)
+		     IO_ADDRESS(gpio_bank->base + 0x08));
 
 	printk(KERN_INFO "DaVinci: %d gpio irqs\n", irq - gpio_to_irq(0));
 
 	return 0;
 }
 
-arch_initcall(davinci_gpio_irq_setup);
+void davinci_gpio_init(void)
+{
+
+#ifdef CONFIG_ARCH_DAVINCI644x
+	if (cpu_is_davinci_dm644x())
+		gpio_bank = &gpio_bank_dm6446;
+#endif
+#ifdef CONFIG_ARCH_DAVINCI_DM355
+	if (cpu_is_davinci_dm355())
+		gpio_bank = &gpio_bank_dm355;
+#endif
+#ifdef CONFIG_ARCH_DAVINCI_DM646x
+	if (cpu_is_davinci_dm6467())
+		gpio_bank = &gpio_bank_dm646x;
+#endif
+	davinci_gpio_irq_setup();
+}
Index: linux-2.6.18/include/asm-arm/arch-davinci/gpio.h
===================================================================
--- linux-2.6.18.orig/include/asm-arm/arch-davinci/gpio.h
+++ linux-2.6.18/include/asm-arm/arch-davinci/gpio.h
@@ -24,8 +24,8 @@
  * need to pay attention to PINMUX0 and PINMUX1 to be sure those pins are
  * used as gpios, not with other peripherals.
  *
- * GPIOs are numbered 0..(DAVINCI_N_GPIO-1).  For documentation, and maybe
- * for later updates, code should write GPIO(N) or:
+ * GPIOs are numbered 0..(gpio_bank->num_gpio-1).  For documentation,
+ * and maybe for later updates, code should write GPIO(N) or:
  *  - GPIOV18(N) for 1.8V pins, N in 0..53; same as GPIO(0)..GPIO(53)
  *  - GPIOV33(N) for 3.3V pins, N in 0..17; same as GPIO(54)..GPIO(70)
  *
@@ -49,6 +49,14 @@ struct gpio_controller {
 	u32	intstat;
 };
 
+struct gpio_bank {
+	int num_gpio;
+	unsigned int irq_num;
+	unsigned int irq_mask;
+	unsigned long *in_use;
+	unsigned long base;
+};
+
 /* The __gpio_to_controller() and __gpio_mask() functions inline to constants
  * with constant parameters; or in outlined code they execute at runtime.
  *
@@ -58,21 +66,7 @@ struct gpio_controller {
  *
  * These are NOT part of the cross-platform GPIO interface
  */
-static inline struct gpio_controller *__iomem
-__gpio_to_controller(unsigned gpio)
-{
-	void *__iomem ptr;
-
-	if (gpio < 32)
-		ptr = (void *__iomem)IO_ADDRESS(DAVINCI_GPIO_BASE + 0x10);
-	else if (gpio < 64)
-		ptr = (void *__iomem)IO_ADDRESS(DAVINCI_GPIO_BASE + 0x38);
-	else if (gpio < DAVINCI_N_GPIO)
-		ptr = (void *__iomem)IO_ADDRESS(DAVINCI_GPIO_BASE + 0x60);
-	else
-		ptr = NULL;
-	return ptr;
-}
+extern struct gpio_controller *__iomem __gpio_to_controller(unsigned gpio);
 
 static inline u32 __gpio_mask(unsigned gpio)
 {
@@ -90,26 +84,7 @@ extern int __error_inval_gpio(void);
 extern void __gpio_set(unsigned gpio, int value);
 extern int __gpio_get(unsigned gpio);
 
-static inline void gpio_set_value(unsigned gpio, int value)
-{
-	if (__builtin_constant_p(value)) {
-		struct gpio_controller	*__iomem g;
-		u32			mask;
-
-		if (gpio >= DAVINCI_N_GPIO)
-			__error_inval_gpio();
-
-		g = __gpio_to_controller(gpio);
-		mask = __gpio_mask(gpio);
-		if (value)
-			__raw_writel(mask, &g->set_data);
-		else
-			__raw_writel(mask, &g->clr_data);
-		return;
-	}
-
-	__gpio_set(gpio, value);
-}
+extern void gpio_set_value(unsigned gpio, int value);
 
 /* Returns zero or nonzero; works for gpios configured as inputs OR
  * as outputs.
@@ -120,19 +95,7 @@ static inline void gpio_set_value(unsign
  * until the GPIO clock ticks and the new value gets latched.
  */
 
-static inline int gpio_get_value(unsigned gpio)
-{
-	struct gpio_controller *__iomem g;
-
-	if (!__builtin_constant_p(gpio))
-		return __gpio_get(gpio);
-
-	if (gpio >= DAVINCI_N_GPIO)
-		return __error_inval_gpio();
-
-	g = __gpio_to_controller(gpio);
-	return !!(__gpio_mask(gpio) & __raw_readl(&g->in_data));
-}
+extern int gpio_get_value(unsigned gpio);
 
 /* powerup default direction is IN */
 extern int gpio_direction_input(unsigned gpio);
@@ -153,4 +116,5 @@ static inline int irq_to_gpio(unsigned i
 	return irq - DAVINCI_N_AINTC_IRQ;
 }
 
+extern void davinci_gpio_init(void);
 #endif				/* __DAVINCI_GPIO_H */
Index: linux-2.6.18/include/asm-arm/arch-davinci/irqs.h
===================================================================
--- linux-2.6.18.orig/include/asm-arm/arch-davinci/irqs.h
+++ linux-2.6.18/include/asm-arm/arch-davinci/irqs.h
@@ -233,4 +233,8 @@
 
 #define ARCH_TIMER_IRQ IRQ_TINT1_TINT34
 
+#define DAVINCI_MAX_N_GPIO	104
+
+#define NR_IRQS			(DAVINCI_N_AINTC_IRQ + DAVINCI_MAX_N_GPIO)
+
 #endif /* __ASM_ARCH_IRQS_H */
Index: linux-2.6.18/mvl_patches/pro50-1561.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1561.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1561);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

