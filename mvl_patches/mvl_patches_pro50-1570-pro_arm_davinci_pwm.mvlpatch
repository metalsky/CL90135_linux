#! /usr/bin/env bash
# Patch: -pro_arm_davinci_pwm
# Date: Fri Sep 19 14:00:19 2008
# Source: MontaVista Software, Inc.
# MR: 27805
# Type: Enhancement
# Disposition: local
# Signed-off-by: Pavel Kiryukhin <pliryukhin@ru.mvista.com>
# Description: Adds TI DaVinci Pulse-Width Modulator support 
# for pro 50. Boards affected: dm6446, dm355, dm6467.
# 
#  drivers/char/Kconfig                       |    6 
#  drivers/char/Makefile                      |    2 
#  drivers/char/davinci_pwm.c                 |  498 +++++++++++++++++++++++++++++
#  include/asm-arm/arch-davinci/davinci_pwm.h |   69 ++++
#  4 files changed, 575 insertions(+)
# 

PATCHNUM=1570
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 27805
Type: Enhancement
Disposition: local
Signed-off-by: Pavel Kiryukhin <pliryukhin@ru.mvista.com>
Description: Adds TI DaVinci Pulse-Width Modulator support 
for pro 50. Boards affected: dm6446, dm355, dm6467.

 drivers/char/Kconfig                       |    6 
 drivers/char/Makefile                      |    2 
 drivers/char/davinci_pwm.c                 |  498 +++++++++++++++++++++++++++++
 include/asm-arm/arch-davinci/davinci_pwm.h |   69 ++++
 mvl_patches/pro50-1570.c                   |   16 
 5 files changed, 591 insertions(+)

Index: linux-2.6.18/drivers/char/Kconfig
===================================================================
--- linux-2.6.18.orig/drivers/char/Kconfig
+++ linux-2.6.18/drivers/char/Kconfig
@@ -1155,5 +1155,11 @@ config TELCLOCK
 	  sysfs directory, /sys/devices/platform/telco_clock, with a number of
 	  files for controlling the behavior of this hardware.
 
+config DAVINCI_PWM
+        tristate "DaVinci PWM Driver Support"
+        default n
+        help
+                DaVinci PWM Driver
+
 endmenu
 
Index: linux-2.6.18/drivers/char/Makefile
===================================================================
--- linux-2.6.18.orig/drivers/char/Makefile
+++ linux-2.6.18/drivers/char/Makefile
@@ -107,6 +107,8 @@ obj-$(CONFIG_IPMI_HANDLER)	+= ipmi/
 obj-$(CONFIG_HANGCHECK_TIMER)	+= hangcheck-timer.o
 obj-$(CONFIG_TCG_TPM)		+= tpm/
 
+obj-$(CONFIG_DAVINCI_PWM) += davinci_pwm.o
+
 # Files generated that shall be removed upon make clean
 clean-files := consolemap_deftbl.c defkeymap.c qtronixmap.c
 
Index: linux-2.6.18/drivers/char/davinci_pwm.c
===================================================================
--- /dev/null
+++ linux-2.6.18/drivers/char/davinci_pwm.c
@@ -0,0 +1,498 @@
+/*
+ * Copyright (C) 2006 Texas Instruments Inc
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+/* include Linux files */
+#include <linux/config.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/kernel.h>	/* printk() */
+#include <linux/slab.h>		/* kmalloc() */
+#include <linux/fs.h>		/* everything... */
+#include <linux/errno.h>	/* error codes */
+#include <linux/types.h>	/* size_t */
+#include <linux/cdev.h>		/* Used for struct cdev */
+#include <linux/interrupt.h>	/* For IRQ_HANDLED and irqreturn_t */
+#include <asm/uaccess.h>	/* for VERIFY_READ/VERIFY_WRITE/copy_from_user */
+#include <linux/clk.h>
+#include <linux/wait.h>
+#include <linux/platform_device.h>
+#include <asm/arch/hardware.h>
+#include <asm/arch/davinci_pwm.h>
+#include <asm/arch/cpu.h>
+#include <asm/semaphore.h>
+#include <asm/arch/irqs.h>
+
+#define	DRIVER_NAME		"PWM"
+#define	DAVINCI_PWM_TIMEOUT	(1*HZ)
+
+struct pwm_davinci_device {
+	char name[20];
+	int intr_complete;
+	dev_t devno;
+	davinci_pwmregsovly regs;
+	wait_queue_head_t intr_wait;
+	struct clk *pwm_clk;
+};
+
+char *dm644x_name[] = { "PWM0_CLK", "PWM1_CLK", "PWM2_CLK" };
+char *dm646x_name[] = { "PWM0_CLK", "PWM1_CLK" };
+char *dm355_name[] = { "PWM0_CLK", "PWM1_CLK", "PWM2_CLK", "PWM3_CLK" };
+
+/* Instance of the private WDT device structure */
+static struct pwm_davinci_device *pwm_dev_array[DAVINCI_PWM_MINORS];
+static DEFINE_SPINLOCK(pwm_dev_array_lock);
+
+static unsigned int pwm_major = 0;
+static unsigned int pwm_minor_start = 0;
+static unsigned int pwm_minor_count = DM644X_PWM_MINORS;
+
+static unsigned int pwm_device_count = 1;
+
+/* For registeration of charatcer device*/
+static struct cdev c_dev;
+
+struct pwm_davinci_device *pwm_dev_get_by_minor(unsigned index)
+{
+	struct pwm_davinci_device *pwm_dev;
+
+	spin_lock(&pwm_dev_array_lock);
+	pwm_dev = pwm_dev_array[index];
+	spin_unlock(&pwm_dev_array_lock);
+	return pwm_dev;
+}
+
+static loff_t pwm_llseek(struct file *file, loff_t offset, int whence)
+{
+	return -ESPIPE;		/* Not seekable */
+}
+
+static int pwm_open(struct inode *inode, struct file *file)
+{
+	unsigned int minor = iminor(inode);
+	struct pwm_davinci_device *pwm_dev;
+
+	pwm_dev = pwm_dev_get_by_minor(minor);
+
+	/* sample configuration */
+	pwm_dev->regs->per = 0xf;
+	pwm_dev->regs->ph1d = 0xf;
+	pwm_dev->regs->rpt = 1;
+	pwm_dev->regs->cfg |= 0x1;
+
+	pwm_dev->intr_complete = 0;
+
+	return 0;
+}
+
+static int pwm_release(struct inode *inode, struct file *file)
+{
+	unsigned int minor = iminor(inode);
+	struct pwm_davinci_device *pwm_dev;
+
+	pwm_dev = pwm_dev_get_by_minor(minor);
+
+	pwm_dev->regs->cfg &= 0xFFFFFFFC;
+	/* This is called when the reference count goes to zero */
+	return 0;
+}
+
+int pwm_ioctl(struct inode *inode, struct file *file, unsigned int cmd,
+	      unsigned long arg)
+{
+	int mode;
+	unsigned int minor = iminor(inode);
+	struct pwm_davinci_device *pwm_dev;
+
+	pwm_dev = pwm_dev_get_by_minor(minor);
+
+	switch (cmd) {
+	case PWMIOC_SET_MODE:
+		if (pwm_dev->regs->cfg & 0x20000)
+			return -EBUSY;
+
+		get_user(mode, (int *)arg);
+		if (mode == PWM_ONESHOT_MODE) {
+			pwm_dev->regs->cfg &= 0xFFFFFFFC;
+			pwm_dev->regs->cfg |= 0x1;
+		} else if (mode == PWM_CONTINUOUS_MODE) {
+			pwm_dev->regs->cfg &= 0xFFFFFFFC;
+			pwm_dev->regs->cfg |= 0x2;
+		} else
+			return -EINVAL;
+		break;
+	case PWMIOC_SET_PERIOD:
+		get_user(mode, (int *)arg);
+
+		if (mode < 0 || mode > 0xffffffff)
+			return -EINVAL;
+
+		if (pwm_dev->regs->cfg & 0x2 && pwm_dev->regs->cfg & 0x20000) {
+			if (mode < 7)
+				return -EINVAL;
+
+			/* Enable PWM interrupts */
+			pwm_dev->regs->cfg |= 0x40;
+
+			/* wait for the transaction to complete */
+			wait_event_timeout(pwm_dev->intr_wait,
+					   pwm_dev->intr_complete,
+					   DAVINCI_PWM_TIMEOUT);
+
+			if (pwm_dev->intr_complete)
+				pwm_dev->regs->per = mode;
+			else
+				return -1;
+		} else
+			pwm_dev->regs->per = mode;
+		break;
+	case PWMIOC_SET_DURATION:
+		get_user(mode, (int *)arg);
+
+		if (mode < 0 || mode > 0xffffffff)
+			return -EINVAL;
+
+		if (pwm_dev->regs->cfg & 0x2 && pwm_dev->regs->cfg & 0x20000) {
+			/* Enable PWM interrupts */
+			pwm_dev->regs->cfg |= 0x40;
+
+			/* wait for the transaction to complete */
+			wait_event_timeout(pwm_dev->intr_wait,
+					   pwm_dev->intr_complete,
+					   DAVINCI_PWM_TIMEOUT);
+
+			if (pwm_dev->intr_complete)
+				pwm_dev->regs->ph1d = mode;
+			else
+				return -1;
+		} else
+			pwm_dev->regs->ph1d = mode;
+		break;
+	case PWMIOC_SET_RPT_VAL:
+		get_user(mode, (int *)arg);
+
+		if (mode < 0 || mode > 0xff)
+			return -EINVAL;
+
+		pwm_dev->regs->rpt = mode;
+		break;
+	case PWMIOC_SET_FIRST_PHASE_STATE:
+		get_user(mode, (int *)arg);
+
+		if (pwm_dev->regs->cfg & 0x20000)
+			return -EBUSY;
+		if (mode == 1)
+			pwm_dev->regs->cfg |= 0x10;
+		else if (mode == 0)
+			pwm_dev->regs->cfg &= ~0x10;
+		else
+			return -EINVAL;
+		break;
+	case PWMIOC_SET_INACT_OUT_STATE:
+		get_user(mode, (int *)arg);
+
+		if (pwm_dev->regs->cfg & 0x20000)
+			return -EBUSY;
+		if (mode == 1)
+			pwm_dev->regs->cfg |= 0x20;
+		else if (mode == 0)
+			pwm_dev->regs->cfg &= ~0x20;
+		else
+			return -EINVAL;
+		break;
+	case PWMIOC_START:
+		pwm_dev->regs->start = 0x1;
+		break;
+	case PWMIOC_STOP:
+		if (pwm_dev->regs->cfg & 0x1 && pwm_dev->regs->cfg & 0x20000)
+			pwm_dev->regs->cfg &= 0xFFFFFFFC;
+		if (pwm_dev->regs->cfg & 0x2 && pwm_dev->regs->cfg & 0x20000) {
+			unsigned long temp;
+			temp = pwm_dev->regs->cfg;
+			temp &= 0xFFFFFFFC;
+			temp |= 0x1;
+
+			/* Enable PWM interrupts */
+			pwm_dev->regs->cfg |= 0x40;
+
+			/* wait for the transaction to complete */
+			wait_event_timeout(pwm_dev->intr_wait,
+					   pwm_dev->intr_complete,
+					   DAVINCI_PWM_TIMEOUT);
+
+			if (pwm_dev->intr_complete)
+				pwm_dev->regs->cfg = temp;
+			else
+				return -1;
+		}
+		break;
+	}
+
+	return 0;
+}
+
+static int pwm_remove(struct device *device)
+{
+	return 0;
+}
+
+static void pwm_platform_release(struct device *device)
+{
+	/* this function does nothing */
+}
+
+static struct file_operations pwm_fops = {
+	.owner = THIS_MODULE,
+	.llseek = pwm_llseek,
+	.open = pwm_open,
+	.release = pwm_release,
+	.ioctl = pwm_ioctl,
+};
+
+static struct class *pwm_class;
+
+static struct platform_device pwm_device[] = {
+	[0] = {
+		.name = "davinci_pwm0",
+		.id = 0,
+		.dev = {
+			.release = pwm_platform_release,
+		}
+	},
+	[1] = {
+		.name = "davinci_pwm1",
+		.id = 1,
+		.dev = {
+			.release = pwm_platform_release,
+		}
+	},
+	[2] = {
+		.name = "davinci_pwm2",
+		.id = 2,
+		.dev = {
+			.release = pwm_platform_release,
+		}
+	},
+	[3] = {.name = "davinci_pwm3",
+	       .id = 3,
+	       .dev =  {
+			.release = pwm_platform_release,
+		}
+	}
+};
+
+static struct device_driver pwm_driver[] = {
+	[0] = {
+		.name = "davinci_pwm0",
+		.bus = &platform_bus_type,
+		.remove = pwm_remove
+	},
+	[1] = {
+		.name = "davinci_pwm1",
+		.bus = &platform_bus_type,
+		.remove = pwm_remove
+	},
+	[2] = {
+		.name = "davinci_pwm2",
+		.bus = &platform_bus_type,
+		.remove = pwm_remove
+	},
+	[3] = {
+		.name = "davinci_pwm3",
+		.bus = &platform_bus_type,
+		.remove = pwm_remove
+	},
+};
+
+/*
+ * This function marks a transaction as complete.
+ */
+static inline void pwm_davinci_complete_intr(struct pwm_davinci_device *dev)
+{
+	dev->intr_complete = 1;
+	wake_up(&dev->intr_wait);
+}
+
+static irqreturn_t pwm_isr(int irq, void *dev_id, struct pt_regs *regs)
+{
+	struct pwm_davinci_device *dev = dev_id;
+
+	/* Disable PWM interrupts */
+	dev->regs->cfg &= ~0x40;
+
+	pwm_davinci_complete_intr(dev);
+	return IRQ_HANDLED;
+}
+
+static int __init pwm_init(void)
+{
+	int result;
+	dev_t devno;
+	unsigned int size, i, j;
+	char *name[DAVINCI_PWM_MINORS];
+
+	if (cpu_is_davinci_dm6467()) {
+		pwm_minor_count = DM646X_PWM_MINORS;
+		for (i = 0; i < pwm_minor_count; i++)
+			name[i] = dm646x_name[i];
+	} else if (cpu_is_davinci_dm355()) {
+		pwm_minor_count = DM355_PWM_MINORS;
+		for (i = 0; i < pwm_minor_count; i++)
+			name[i] = dm355_name[i];
+	} else {
+		pwm_minor_count = DM644X_PWM_MINORS;
+		for (i = 0; i < pwm_minor_count; i++)
+			name[i] = dm644x_name[i];
+	}
+
+	size = pwm_device_count * pwm_minor_count;
+	/* Register the driver in the kernel */
+	result = alloc_chrdev_region(&devno, 0, size, DRIVER_NAME);
+	if (result < 0) {
+		printk("DaVinciPWM: Module intialization failed.\
+                        could not register character device\n");
+		return -ENODEV;
+	}
+	pwm_major = MAJOR(devno);
+
+	/* Initialize of character device */
+	cdev_init(&c_dev, &pwm_fops);
+	c_dev.owner = THIS_MODULE;
+	c_dev.ops = &pwm_fops;
+
+	/* addding character device */
+	result = cdev_add(&c_dev, devno, pwm_minor_count);
+	if (result) {
+		printk("DaVinciPWM:Error adding DavinciPWM\n");
+		unregister_chrdev_region(devno, size);
+		return result;
+	}
+
+	pwm_class = class_create(THIS_MODULE, "davinci_pwm");
+	if (!pwm_class) {
+		cdev_del(&c_dev);
+		return -EIO;
+	}
+
+	for (i = 0; i < pwm_device_count; i++) {
+		for (j = 0; j < pwm_minor_count; j++) {
+			pwm_dev_array[j] =
+			    kmalloc(sizeof(struct pwm_davinci_device),
+				    GFP_KERNEL);
+			pwm_dev_array[j]->devno = devno;
+			init_waitqueue_head(&pwm_dev_array[j]->intr_wait);
+			sprintf(pwm_dev_array[j]->name, "davinci_pwm%d", j);
+
+			/* register driver as a platform driver */
+			if (driver_register(&pwm_driver[j]) != 0) {
+				unregister_chrdev_region(devno, size);
+				cdev_del(&c_dev);
+				kfree(pwm_dev_array[j]);
+				return -EINVAL;
+			}
+
+			/* Register the drive as a platform device */
+			if (platform_device_register(&pwm_device[j]) != 0) {
+				driver_unregister(&pwm_driver[j]);
+				unregister_chrdev_region(devno, size);
+				cdev_del(&c_dev);
+				kfree(pwm_dev_array[j]);
+				return -EINVAL;
+			}
+
+			devno =
+			    MKDEV(pwm_major,
+				  pwm_minor_start + i * pwm_minor_count + j);
+			class_device_create(pwm_class, NULL, devno, NULL,
+						"davinci_pwm%d", j);
+
+			/*
+			 * DM355 has PWM3 IRQ at #28
+			 */
+			if (j == 3) {
+				result =
+					request_irq(IRQ_DM355_PWMINT3, pwm_isr,
+						SA_INTERRUPT,
+						pwm_dev_array[j]->name,
+						pwm_dev_array[j]);
+			} else {
+				result = request_irq(IRQ_PWMINT0 + j,
+						pwm_isr, SA_INTERRUPT,
+						pwm_dev_array[j]->name,
+						pwm_dev_array[j]);
+			}
+
+			if (result < 0) {
+				printk("Cannot initialize IRQ \n");
+				platform_device_unregister(&pwm_device[j]);
+				driver_unregister(&pwm_driver[j]);
+				kfree(pwm_dev_array[j]);
+				return result;
+			}
+
+			pwm_dev_array[j]->pwm_clk = clk_get(NULL, *(name + j));
+			if (IS_ERR(pwm_dev_array[j]->pwm_clk)) {
+				printk("Cannot get clock\n");
+				return -1;
+			}
+
+			clk_enable(pwm_dev_array[j]->pwm_clk);
+			pwm_dev_array[j]->regs =
+			    (davinci_pwmregsovly) IO_ADDRESS(DAVINCI_PWM0_BASE +
+							     j * 0x400);
+		}
+	}
+	return 0;
+}
+
+static void __exit pwm_exit(void)
+{
+	dev_t devno;
+	unsigned int size, i;
+
+	if (pwm_class != NULL) {
+		size = pwm_device_count * pwm_minor_count;
+		for (i = 0; i < size; i++) {
+			platform_device_unregister(&pwm_device[i]);
+			driver_unregister(&pwm_driver[i]);
+			devno = MKDEV(pwm_major, pwm_minor_start + i);
+			class_device_destroy(pwm_class,devno);
+			if ((i == 3) && (cpu_is_davinci_dm355()))
+				free_irq(IRQ_DM355_PWMINT3, pwm_dev_array[i]);
+			else
+				free_irq(IRQ_PWMINT0 + i, pwm_dev_array[i]);
+			clk_disable(pwm_dev_array[i]->pwm_clk);
+			kfree(pwm_dev_array[i]);
+		}
+		class_destroy(pwm_class);
+	}
+
+	cdev_del(&c_dev);
+
+	/* Release major/minor numbers */
+	if (pwm_major != 0) {
+		devno = MKDEV(pwm_major, pwm_minor_start);
+		size = pwm_device_count * pwm_minor_count;
+		unregister_chrdev_region(devno, size);
+	}
+}
+
+module_init(pwm_init);
+module_exit(pwm_exit);
+
+MODULE_AUTHOR("Texas Instruments");
+MODULE_LICENSE("GPL");
Index: linux-2.6.18/include/asm-arm/arch-davinci/davinci_pwm.h
===================================================================
--- /dev/null
+++ linux-2.6.18/include/asm-arm/arch-davinci/davinci_pwm.h
@@ -0,0 +1,69 @@
+/*
+ *  linux/drivers/char/davinci_pwm.h
+ *
+ *  BRIEF MODULE DESCRIPTION
+ *      DaVinci PWM register definitions
+ *
+ *  Copyright (C) 2006 Texas Instruments.
+ *
+ *  This program is free software; you can redistribute  it and/or modify it
+ *  under  the terms of  the GNU General  Public License as published by the
+ *  Free Software Foundation;  either version 2 of the  License, or (at your
+ *  option) any later version.
+ *
+ *  THIS  SOFTWARE  IS PROVIDED   ``AS  IS'' AND   ANY  EXPRESS OR IMPLIED
+ *  WARRANTIES,   INCLUDING, BUT NOT  LIMITED  TO, THE IMPLIED WARRANTIES OF
+ *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN
+ *  NO  EVENT  SHALL   THE AUTHOR  BE    LIABLE FOR ANY   DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ *  NOT LIMITED   TO, PROCUREMENT OF  SUBSTITUTE GOODS  OR SERVICES; LOSS OF
+ *  USE, DATA,  OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ *  ANY THEORY OF LIABILITY, WHETHER IN  CONTRACT, STRICT LIABILITY, OR TORT
+ *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  You should have received a copy of the  GNU General Public License along
+ *  with this program; if not, write  to the Free Software Foundation, Inc.,
+ *  675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#ifndef _DAVINCI_PWM_H
+#define _DAVINCI_PWM_H
+
+/**************************************************************************\
+* Register Overlay Structure
+\**************************************************************************/
+typedef struct {
+	unsigned int pid;
+	unsigned int pcr;
+	unsigned int cfg;
+	unsigned int start;
+	unsigned int rpt;
+	unsigned int per;
+	unsigned int ph1d;
+} davinci_pwmregs;
+
+/**************************************************************************\
+* Overlay structure typedef definition
+\**************************************************************************/
+typedef volatile davinci_pwmregs *davinci_pwmregsovly;
+
+#define PWM_MINORS		3
+#define DM646X_PWM_MINORS	2
+#define DM644X_PWM_MINORS	3
+#define DM355_PWM_MINORS	4
+#define DAVINCI_PWM_MINORS	DM355_PWM_MINORS /* MAX of all PWM_MINORS */
+
+#define	PWMIOC_SET_MODE			0x01
+#define	PWMIOC_SET_PERIOD		0x02
+#define	PWMIOC_SET_DURATION		0x03
+#define	PWMIOC_SET_RPT_VAL		0x04
+#define	PWMIOC_START			0x05
+#define	PWMIOC_STOP			0x06
+#define	PWMIOC_SET_FIRST_PHASE_STATE	0x07
+#define	PWMIOC_SET_INACT_OUT_STATE	0x08
+
+#define	PWM_ONESHOT_MODE	0
+#define	PWM_CONTINUOUS_MODE	1
+
+#endif				/* _DAVINCI_PWM_H */
Index: linux-2.6.18/mvl_patches/pro50-1570.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1570.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1570);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

