#! /usr/bin/env bash
# Patch: -pro_arm_davinci_musb_dm6467_support
# Date: Fri Sep 19 14:26:29 2008
# Source: MontaVista Software, Inc. 
# MR: 28051
# Type: Integration
# Disposition: local
# Signed-off-by: Dmitry Krivoschekov <dkrivoschekov@ru.mvista.com>
# Description:
#     Adds support for DM6467 cpu and DM6467EVM board to MUSB driver
# 

PATCHNUM=1863
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc. 
MR: 28051
Type: Integration
Disposition: local
Signed-off-by: Dmitry Krivoschekov <dkrivoschekov@ru.mvista.com>
Description:
    Adds support for DM6467 cpu and DM6467EVM board to MUSB driver

Index: linux-2.6.18/drivers/usb/musb/davinci.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/davinci.c
+++ linux-2.6.18/drivers/usb/musb/davinci.c
@@ -31,14 +31,16 @@
 #include <linux/clk.h>
 #include <linux/io.h>
 
+#include <asm/arch/cpu.h>
 #include <asm/arch/hardware.h>
 #include <asm/arch/memory.h>
+#include <asm/arch/mux.h>
 #include <asm/arch/gpio.h>
 #include <asm/mach-types.h>
 
 #include "musb_core.h"
 
-#ifdef CONFIG_MACH_DAVINCI_EVM
+#if defined(CONFIG_MACH_DAVINCI_EVM) || defined(CONFIG_MACH_DAVINCI_DM6467_EVM)
 #include <asm/arch/i2c-client.h>
 #endif
 
@@ -63,6 +65,9 @@ static inline void phy_on(void)
 		__raw_writel(USBPHY_SESNDEN | USBPHY_VBDTCTEN | USBPHY_PHYPLLON
 		    | USBPHY_DATAPOL, IO_ADDRESS(USBPHY_CTL_PADDR));
 
+	else if (cpu_is_davinci_dm6467())
+		__raw_writel(0, IO_ADDRESS(USBPHY_CTL_PADDR));
+
 	while ((__raw_readl((void __force __iomem *)
 				IO_ADDRESS(USBPHY_CTL_PADDR))
 			& USBPHY_PHYCLKGD) == 0)
@@ -75,6 +80,9 @@ static inline void phy_off(void)
 	if (cpu_is_davinci_dm644x() || cpu_is_davinci_dm355())
 		__raw_writel(USBPHY_OSCPDWN | USBPHY_PHYPDWN,
 			(void __force __iomem *) IO_ADDRESS(USBPHY_CTL_PADDR));
+
+	else if (cpu_is_davinci_dm6467())
+		__raw_writel(USBPHY_PHYPDWN, IO_ADDRESS(USBPHY_CTL_PADDR));
 }
 
 static int dma_off = 1;
@@ -144,16 +152,24 @@ static int vbus_state = -1;
 
 /* VBUS SWITCHING IS BOARD-SPECIFIC */
 
-#ifdef CONFIG_MACH_DAVINCI_EVM
+#if defined(CONFIG_MACH_DAVINCI_EVM) || defined(CONFIG_MACH_DAVINCI_DM6467_EVM)
 #ifndef CONFIG_MACH_DAVINCI_EVM_OTG
 
+static inline void davinci_i2c_drvvbus(int is_on)
+{
+	if (machine_is_davinci_evm())
+		davinci_i2c_expander_op(0x3a, USB_DRVVBUS, !is_on);
+	else if (machine_is_davinci_dm6467_evm())
+		davinci_i2c_expander_op(0x3a, USB_FB_DM646X, !is_on);
+}
+
 /* I2C operations are always synchronous, and require a task context.
  * With unloaded systems, using the shared workqueue seems to suffice
  * to satisfy the 100msec A_WAIT_VRISE timeout...
  */
 static void evm_deferred_drvvbus(void *_musb)
 {
-	davinci_i2c_expander_op(0x3a, USB_DRVVBUS, vbus_state);
+	davinci_i2c_drvvbus(vbus_state);
 	vbus_state = !vbus_state;
 }
 DECLARE_WORK(evm_vbus_work, evm_deferred_drvvbus, 0);
@@ -170,20 +186,17 @@ static void davinci_source_power(struct 
 		return;
 	vbus_state = !is_on;		/* 0/1 vs "-1 == unknown/init" */
 
-#ifdef CONFIG_MACH_DAVINCI_EVM
-	if (machine_is_davinci_evm()) {
-#ifdef CONFIG_MACH_DAVINCI_EVM_OTG
+#if defined(CONFIG_MACH_DAVINCI_EVM) || defined(CONFIG_MACH_DAVINCI_DM6467_EVM)
+	if (machine_is_davinci_evm() || machine_is_davinci_dm6467_evm()) {
+#ifdef CONFIG_USB_MUSB_OTG
 		/* modified EVM board switching VBUS with GPIO(6) not I2C
 		 * NOTE:  PINMUX0.RGB888 (bit23) must be clear
 		 */
-		if (is_on)
-			gpio_set(GPIO(6));
-		else
-			gpio_clear(GPIO(6));
+		gpio_set_value(GPIO(6), is_on);
 		immediate = 1;
 #else
 		if (immediate)
-			davinci_i2c_expander_op(0x3a, USB_DRVVBUS, !is_on);
+			davinci_i2c_drvvbus(is_on);
 		else
 			schedule_work(&evm_vbus_work);
 #endif
@@ -394,7 +407,7 @@ void musb_platform_set_mode(struct musb 
 int __init musb_platform_init(struct musb *musb)
 {
 	void __iomem	*tibase = musb->ctrl_base;
-	u32		revision;
+	u32		revision, phystatus;
 
 	musb->mregs += DAVINCI_BASE_OFFSET;
 #if 0
@@ -418,6 +431,21 @@ int __init musb_platform_init(struct mus
 	if (is_host_enabled(musb))
 		setup_timer(&otg_workaround, otg_timer, (unsigned long) musb);
 
+#if defined(CONFIG_MACH_DAVINCI_EVM) || defined(CONFIG_MACH_DAVINCI_DM6467_EVM)
+	evm_vbus_work.data = musb;
+#ifdef CONFIG_USB_MUSB_OTG
+	{
+		u32 tmp;
+
+		/* clear EMACEN to enble OTG GPIO 16 for VBus power control */
+		/* Set GPIO Direction */
+		tmp = davinci_readl(DVEVM_GPIO45_DIR & ~DVEVM_GPIO45_DIR_OUT);
+		davinci_writel(tmp, DVEVM_GPIO45_DIR);
+
+		davinci_cfg_reg(DM644X_GPIO3V);
+	}
+#endif
+#endif
 	musb->board_set_vbus = davinci_set_vbus;
 	davinci_source_power(musb, 0, 1);
 
@@ -443,6 +471,17 @@ int __init musb_platform_init(struct mus
 
 	msleep(5);
 
+	if (cpu_is_davinci_dm6467()) {
+		phystatus = davinci_readl(USBPHY_CTL_PADDR);
+		if (is_host_enabled(musb))
+			davinci_writel(phystatus | USBPHY_SESSION_VBUS |
+					    USBPHY_NDATAPOL, USBPHY_CTL_PADDR);
+		else
+			davinci_writel(phystatus | USBPHY_SESSION_VBUS |
+					USBPHY_NDATAPOL | USBPHY_PERI_USBID,
+							    USBPHY_CTL_PADDR);
+	}
+
 	/* NOTE:  irqs are in mixed mode, not bypass to pure-musb */
 	pr_debug("DaVinci OTG revision %08x phy %03x control %02x\n",
 		revision, __raw_readl((void __force __iomem *)
@@ -455,6 +494,12 @@ int __init musb_platform_init(struct mus
 
 int musb_platform_exit(struct musb *musb)
 {
+#if defined(CONFIG_MACH_DAVINCI_EVM) && defined(CONFIG_USB_MUSB_OTG)
+	/* Set EMACEN to enable OTG GPIO 16 for Emac control */
+	/* Set GPIO Direction */
+	davinci_cfg_reg(DM644X_EMACEN);
+#endif
+
 	if (is_host_enabled(musb))
 		del_timer_sync(&otg_workaround);
 
Index: linux-2.6.18/drivers/usb/musb/davinci.h
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/davinci.h
+++ linux-2.6.18/drivers/usb/musb/davinci.h
@@ -16,6 +16,9 @@
 
 /* Integrated highspeed/otg PHY */
 #define	USBPHY_CTL_PADDR	(DAVINCI_SYSTEM_MODULE_BASE + 0x34)
+#define USBPHY_NDATAPOL		(1 << 18)
+#define USBPHY_SESSION_VBUS	(1 << 17)
+#define USBPHY_PERI_USBID	(1 << 16)
 #define USBPHY_DATAPOL          (1 << 11)
 #define	USBPHY_PHYCLKGD		(1 << 8)
 #define	USBPHY_SESNDEN		(1 << 7)	/* v(sess_end) comparator */
@@ -23,6 +26,7 @@
 #define	USBPHY_PHYPLLON		(1 << 4)	/* override pll suspend */
 #define	USBPHY_CLKO1SEL		(1 << 3)
 #define	USBPHY_OSCPDWN		(1 << 2)
+#define USBPHY_OTGPWDN		(1 << 1)
 #define	USBPHY_PHYPDWN		(1 << 0)
 
 /* On DM355 VBUS is controlled through DEEPSLEEP reg,
@@ -103,4 +107,7 @@
 
 #define DAVINCI_BASE_OFFSET		0x400
 
+#define DVEVM_GPIO45_DIR		(0x01C67060)
+#define DVEVM_GPIO45_DIR_OUT		(0x00000040)
+
 #endif	/* __MUSB_HDRDF_H__ */
Index: linux-2.6.18/arch/arm/mach-davinci/devices.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/devices.c
+++ linux-2.6.18/arch/arm/mach-davinci/devices.c
@@ -140,9 +140,22 @@ static void __init davinci_init_cpu_i2c(
 
 	/* all others default to use dm355 because dm355 uses the max speed */
 }
+
+static void __init davinci_init_cpu_usb(void)
+{
+	if (cpu_is_davinci_dm6467()) {
+		/*
+		 * overwrite default settings
+		 * as DM6467 uses different irq lines
+		 */
+		usb_device.resource[1].start = IRQ_DM646X_USBINT;
+	}
+}
+
 static int __init davinci_init_devices(void)
 {
 	davinci_init_cpu_i2c();
+	davinci_init_cpu_usb();
 	platform_add_devices(devices, ARRAY_SIZE(devices));
 	return 0;
 }
Index: linux-2.6.18/drivers/usb/musb/Kconfig
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/Kconfig
+++ linux-2.6.18/drivers/usb/musb/Kconfig
@@ -87,7 +87,7 @@ config USB_MUSB_PERIPHERAL
 	  (With a "Mini-AB" connector, you should enable USB OTG.)
 
 config USB_MUSB_OTG
-	depends on USB && USB_GADGET && EXPERIMENTAL
+	depends on USB && USB_GADGET && EXPERIMENTAL && !ARCH_DAVINCI_DM646x
 	bool "Both host and peripheral:  USB OTG (On The Go) Device"
 	select USB_GADGET_MUSB_HDRC
 	select USB_OTG
Index: linux-2.6.18/mvl_patches/pro50-1863.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1863.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1863);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

