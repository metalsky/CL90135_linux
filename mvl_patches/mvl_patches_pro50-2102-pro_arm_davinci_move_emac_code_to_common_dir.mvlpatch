#! /usr/bin/env bash
# Patch: -pro_arm_davinci_move_emac_code_to_common_dir
# Date: Thu Feb 19 15:00:35 2009
# Source: MontaVista Software, Inc.
# MR: 30941
# Type: Enhancement
# Disposition: local
# Signed-off-by: Mark A. Greer <mgreer@mvista.com>
# Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
# Description:
# 
#     DaVinci EMAC: move the driver platform code to arch/arm/plat-davinci/
# 
#     Move the i2c-emac code used by the davinci emac driver to plat-davinci
#     so all davinci-like platforms can use it.
# 
#  arch/arm/mach-davinci/i2c-emac.c |  106 ---------------------------------------
#  arch/arm/mach-davinci/Makefile   |    5 -
#  arch/arm/plat-davinci/Makefile   |    1 
#  arch/arm/plat-davinci/i2c-emac.c |  100 ++++++++++++++++++++++++++++++++++++
#  4 files changed, 103 insertions(+), 109 deletions(-)
# 

PATCHNUM=2102
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 30941
Type: Enhancement
Disposition: local
Signed-off-by: Mark A. Greer <mgreer@mvista.com>
Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
Description:

    DaVinci EMAC: move the driver platform code to arch/arm/plat-davinci/

    Move the i2c-emac code used by the davinci emac driver to plat-davinci
    so all davinci-like platforms can use it.

 arch/arm/mach-davinci/Makefile   |    5 -
 arch/arm/mach-davinci/i2c-emac.c |  106 ---------------------------------------
 arch/arm/plat-davinci/Makefile   |    1 
 arch/arm/plat-davinci/i2c-emac.c |  100 ++++++++++++++++++++++++++++++++++++
 mvl_patches/pro50-2102.c         |   16 +++++
 5 files changed, 119 insertions(+), 109 deletions(-)

Index: linux-2.6.18/arch/arm/mach-davinci/Makefile
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/Makefile
+++ linux-2.6.18/arch/arm/mach-davinci/Makefile
@@ -7,11 +7,10 @@
 obj-y := time.o irq.o clock.o io.o id.o mux_cfg.o dma.o devices.o
 
 # Board specific
-obj-$(CONFIG_MACH_DAVINCI_EVM)		+= board-evm.o i2c-emac.o
+obj-$(CONFIG_MACH_DAVINCI_EVM)		+= board-evm.o
 obj-$(CONFIG_MACH_DAVINCI_DM355_EVM)	+= board-dm355-evm.o
 obj-$(CONFIG_I2C_DAVINCI)		+= i2c-client.o
-obj-$(CONFIG_MACH_DAVINCI_DM6467_EVM)	+= board-dm6467-evm.o i2c-emac.o \
-					   video_hdevm.o
+obj-$(CONFIG_MACH_DAVINCI_DM6467_EVM)	+= board-dm6467-evm.o video_hdevm.o
 obj-$(CONFIG_SPI_DAVINCI)		+= davinci_spi_platform.o
 obj-$(CONFIG_GENERIC_GPIO)		+= gpio.o
 
Index: linux-2.6.18/arch/arm/mach-davinci/i2c-emac.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/i2c-emac.c
+++ /dev/null
@@ -1,106 +0,0 @@
-/*
- * <arch/arm/mach-davinci/i2c-emac.c
- *
- * Read MAC address from i2c-attached EEPROM
- * FIXME: Move into network driver once stabilized
- *
- * Author: Texas Instruments
- *
- * 2006 (c) Texas Instruments, Inc. This file is licensed under
- * the terms of the GNU General Public License version 2. This program
- * is licensed "as is" without any warranty of any kind, whether express
- * or implied.
- */
-
-#include <linux/kernel.h>
-#include <linux/module.h>
-#include <linux/string.h>
-#include <linux/errno.h>
-
-#include <asm/arch/i2c-client.h>
-
-/* Get Ethernet address from kernel boot params */
-static unsigned char cpmac_eth_string[20] = "deadbeaf";
-
-/* This function gets the Ethernet MAC address from EEPROM
- * Input buffer to be of atlease 20 bytes in length
- */
-int davinci_get_macaddr (char *ptr)
-{
-#ifndef CONFIG_I2C_DAVINCI
-	printk(KERN_INFO "DaVinci EMAC: Unable to read MAC from EEPROM, "
-	       "no i2c support in kernel.\n");
-#else
-	char data[2] = { 0x7f, 0 };
-        char temp[20];
-	int  ret, i = 0;
-
-	if (ptr == NULL) {
-		return -EFAULT;
-	}
-
-	ret = davinci_i2c_write(2, data, 0x50);
-	if (!ret)
-		davinci_i2c_write(2, data, 0x50);
-	davinci_i2c_read(8, temp, 0x50);
-
-	/* check whether MAC address is available in ERPROM else try to
-	 * to get it from bootparams for now.  From Delta EVM MAC address
-	 * should be available from I2C EEPROM.
-	 */
-	if ((temp [0] != 0xFF) |
-	    (temp [1] != 0xFF) |
-	    (temp [2] != 0xFF) |
-	    (temp [3] != 0xFF) |
-	    (temp [4] != 0xFF) |
-	    (temp [5] != 0xFF) |
-	    (temp [6] != 0xFF) )
-	{
-		ptr[0] = (*(temp+0) & 0xF0) >> 4;
-		ptr[1] = (*(temp+0) & 0x0F);
-		ptr[2] = ':';
-		ptr[3] = (*(temp+1) & 0xF0) >> 4;
-		ptr[4] = (*(temp+1) & 0x0F);
-		ptr[5] = ':';
-		ptr[6] = (*(temp+2) & 0xF0) >> 4;
-		ptr[7] = (*(temp+2) & 0x0F);
-		ptr[8] = ':';
-		ptr[9] = (*(temp+3) & 0xF0) >> 4;
-		ptr[10]= (*(temp+3) & 0x0F);
-		ptr[11]= ':';
-		ptr[12]= (*(temp+4) & 0xF0) >> 4;
-		ptr[13]= (*(temp+4) & 0x0F);
-		ptr[14]= ':';
-		ptr[15]= (*(temp+5) & 0xF0) >> 4;
-		ptr[16]= (*(temp+5) & 0x0F);
-
-		for (i = 0; i < 17; i++)
-		{
-			if (ptr[i] == ':')
-				continue;
-			else if (ptr[i] <= 9)
-				ptr[i] = ptr[i] + 48;
-			else
-				ptr[i] = ptr[i] + 87;
-		}
-	} else
-#endif
-	{
-		strcpy (ptr, cpmac_eth_string);
-	}
-	return 0;
-}
-EXPORT_SYMBOL(davinci_get_macaddr);
-
-static int davinci_cpmac_eth_setup(char *str)
-{
-	/* The first char passed from the bootloader is '=', so ignore it */
-        strcpy(&cpmac_eth_string[0], &str[1]);
-
-        printk("TI DaVinci EMAC: Kernel Boot params Eth address: %s\n",
-               cpmac_eth_string);
-
-        return (1);
-}
-__setup("eth", davinci_cpmac_eth_setup);
-
Index: linux-2.6.18/arch/arm/plat-davinci/Makefile
===================================================================
--- linux-2.6.18.orig/arch/arm/plat-davinci/Makefile
+++ linux-2.6.18/arch/arm/plat-davinci/Makefile
@@ -9,3 +9,4 @@ obj-$(CONFIG_GENERIC_GPIO)	+= gpio.o
 obj-$(CONFIG_SERIAL_8250)	+= serial.o
 obj-$(CONFIG_USB_OTG)		+= usb.o
 obj-$(CONFIG_DAVINCI_MUX)	+= mux.o
+obj-$(CONFIG_TI_DAVINCI_EMAC)	+= i2c-emac.o
Index: linux-2.6.18/arch/arm/plat-davinci/i2c-emac.c
===================================================================
--- /dev/null
+++ linux-2.6.18/arch/arm/plat-davinci/i2c-emac.c
@@ -0,0 +1,100 @@
+/*
+ * arch/arm/plat-davinci/i2c-emac.c
+ *
+ * Read MAC address from I2C-attached EEPROM
+ *
+ * Author: Texas Instruments
+ * Copyright (C) 2006 Texas Instruments, Inc.
+ * Copyright (C) 2008 MontaVista Software, Inc. <source@mvista.com>
+ *
+ * This file is licensed under the terms of the GNU General Public License
+ * version 2. This program is licensed "as is" without any warranty of any
+ * kind, whether express or implied.
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/string.h>
+#include <linux/errno.h>
+
+#include <asm/arch/i2c-client.h>
+
+/* Get Ethernet address from kernel boot params */
+static unsigned char cpmac_eth_string[20] = "deadbeaf";
+
+/*
+ * This function gets the Ethernet MAC address from EEPROM
+ * input buffer to be of at least 20 bytes in length.
+ */
+int davinci_get_macaddr(char *ptr)
+{
+#ifndef CONFIG_I2C_DAVINCI
+	printk(KERN_INFO "DaVinci EMAC: unable to read MAC address from "
+	       "EEPROM, no I2C support in kernel.\n");
+#else
+	char data[2] = { 0x7f, 0 };
+	char temp[20];
+	int  ret, i = 0;
+
+	if (ptr == NULL)
+		return -EFAULT;
+
+	ret = davinci_i2c_write(2, data, 0x50);
+	if (!ret)
+		davinci_i2c_write(2, data, 0x50);
+	davinci_i2c_read(8, temp, 0x50);
+
+	/*
+	 * Check whether MAC address is available in ERPROM; else try to
+	 * to get it from bootparams for now.  From Delta EVM MAC address
+	 * should be available from I2C EEPROM.
+	 */
+	if (temp[0] != 0xFF || temp[1] != 0xFF || temp[2] != 0xFF ||
+	    temp[3] != 0xFF || temp[4] != 0xFF || temp[5] != 0xFF ||
+	    temp[6] != 0xFF) {
+		ptr[0] = (temp[0] & 0xF0) >> 4;
+		ptr[1] = (temp[0] & 0x0F);
+		ptr[2] = ':';
+		ptr[3] = (temp[1] & 0xF0) >> 4;
+		ptr[4] = (temp[1] & 0x0F);
+		ptr[5] = ':';
+		ptr[6] = (temp[2] & 0xF0) >> 4;
+		ptr[7] = (temp[2] & 0x0F);
+		ptr[8] = ':';
+		ptr[9] = (temp[3] & 0xF0) >> 4;
+		ptr[10] = (temp[3] & 0x0F);
+		ptr[11] = ':';
+		ptr[12] = (temp[4] & 0xF0) >> 4;
+		ptr[13] = (temp[4] & 0x0F);
+		ptr[14] = ':';
+		ptr[15] = (temp[5] & 0xF0) >> 4;
+		ptr[16] = (temp[5] & 0x0F);
+
+		for (i = 0; i < 17; i++) {
+			if (ptr[i] == ':')
+				continue;
+			else if (ptr[i] <= 9)
+				ptr[i] = ptr[i] + '0';
+			else
+				ptr[i] = ptr[i] + 'a' - 10;
+		}
+	} else
+#endif
+	{
+		strcpy(ptr, cpmac_eth_string);
+	}
+	return 0;
+}
+EXPORT_SYMBOL(davinci_get_macaddr);
+
+static int davinci_cpmac_eth_setup(char *str)
+{
+	/* The first char passed from the bootloader is '=', so ignore it */
+	strcpy(cpmac_eth_string, str + 1);
+
+	printk("TI DaVinci EMAC: kernel boot params Ethernet address: %s\n",
+		cpmac_eth_string);
+
+	return 1;
+}
+__setup("eth", davinci_cpmac_eth_setup);
Index: linux-2.6.18/mvl_patches/pro50-2102.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-2102.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2009 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(2102);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

