#! /usr/bin/env bash
# Patch: -pro_musb_hdrc_Search_and_replace_pDmaController_with_dm
# Date: Fri Sep 19 14:08:18 2008
# From e718e75f6d11cc559c9011aad11568a9bd88dedc Mon Sep 17 00:00:00 2001
# From: Tony Lindgren <tony@atomide.com>
# Date: Mon, 13 Aug 2007 04:18:58 -0700
# Subject: [PATCH] musb_hdrc: Search and replace pDmaController with dma_controller
# 
# Search and replace pDmaController with dma_controller
# 
# Signed-off-by: Tony Lindgren <tony@atomide.com>
# (cherry picked from commit 470aec129cde5d82cf8b2595bd45fb4f58cbfdcc)

PATCHNUM=1683
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
From e718e75f6d11cc559c9011aad11568a9bd88dedc Mon Sep 17 00:00:00 2001
From: Tony Lindgren <tony@atomide.com>
Date: Mon, 13 Aug 2007 04:18:58 -0700
Subject: [PATCH] musb_hdrc: Search and replace pDmaController with dma_controller

Search and replace pDmaController with dma_controller

Signed-off-by: Tony Lindgren <tony@atomide.com>
(cherry picked from commit 470aec129cde5d82cf8b2595bd45fb4f58cbfdcc)
Index: linux-2.6.18/drivers/usb/musb/cppi_dma.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/cppi_dma.c
+++ linux-2.6.18/drivers/usb/musb/cppi_dma.c
@@ -1143,7 +1143,7 @@ void cppi_completion(struct musb *musb, 
 	struct cppi_descriptor	*bdPtr;
 	struct musb_hw_ep	*hw_ep = NULL;
 
-	cppi = container_of(musb->pDmaController, struct cppi, Controller);
+	cppi = container_of(musb->dma_controller, struct cppi, Controller);
 
 	regBase = musb->ctrl_base;
 
Index: linux-2.6.18/drivers/usb/musb/musb_gadget.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musb_gadget.c
+++ linux-2.6.18/drivers/usb/musb/musb_gadget.c
@@ -164,7 +164,7 @@ static void nuke(struct musb_ep *ep, con
 	ep->busy = 1;
 
 	if (is_dma_capable() && ep->dma) {
-		struct dma_controller	*c = ep->musb->pDmaController;
+		struct dma_controller	*c = ep->musb->dma_controller;
 		int value;
 		if (ep->is_in) {
 			musb_writew(epio, MGC_O_HDRC_TXCSR,
@@ -292,7 +292,7 @@ static void txstate(struct musb *musb, s
 
 #ifndef	CONFIG_USB_INVENTRA_FIFO
 	if (is_dma_capable() && musb_ep->dma) {
-		struct dma_controller	*c = musb->pDmaController;
+		struct dma_controller	*c = musb->dma_controller;
 
 		use_dma = (pRequest->dma != DMA_ADDR_INVALID);
 
@@ -428,7 +428,7 @@ void musb_g_tx(struct musb *musb, u8 epn
 			musb_writew(epio, MGC_O_HDRC_TXCSR, wCsrVal);
 			if (dma_channel_status(dma) == MGC_DMA_STATUS_BUSY) {
 				dma->bStatus = MGC_DMA_STATUS_CORE_ABORT;
-				musb->pDmaController->channel_abort(dma);
+				musb->dma_controller->channel_abort(dma);
 			}
 
 			if (pRequest)
@@ -583,7 +583,7 @@ static void rxstate(struct musb *musb, s
 	wCsrVal = musb_readw(epio, MGC_O_HDRC_RXCSR);
 
 	if (is_cppi_enabled() && musb_ep->dma) {
-		struct dma_controller	*c = musb->pDmaController;
+		struct dma_controller	*c = musb->dma_controller;
 		struct dma_channel	*channel = musb_ep->dma;
 
 		/* NOTE:  CPPI won't actually stop advancing the DMA
@@ -618,7 +618,7 @@ static void rxstate(struct musb *musb, s
 				struct dma_channel	*channel;
 				int			use_dma = 0;
 
-				c = musb->pDmaController;
+				c = musb->dma_controller;
 				channel = musb_ep->dma;
 
 	/* We use DMA Req mode 0 in RxCsr, and DMA controller operates in
@@ -694,7 +694,7 @@ static void rxstate(struct musb *musb, s
 
 #ifdef	CONFIG_USB_TUSB_OMAP_DMA
 			if (tusb_dma_omap() && musb_ep->dma) {
-				struct dma_controller *c = musb->pDmaController;
+				struct dma_controller *c = musb->dma_controller;
 				struct dma_channel *channel = musb_ep->dma;
 				u32 dma_addr = pRequest->dma + pRequest->actual;
 				int ret;
@@ -754,7 +754,7 @@ void musb_g_rx(struct musb *musb, u8 epn
 	if (wCsrVal & MGC_M_RXCSR_P_SENTSTALL) {
 		if (dma_channel_status(dma) == MGC_DMA_STATUS_BUSY) {
 			dma->bStatus = MGC_DMA_STATUS_CORE_ABORT;
-			(void) musb->pDmaController->channel_abort(dma);
+			(void) musb->dma_controller->channel_abort(dma);
 			pRequest->actual += musb_ep->dma->dwActualLength;
 		}
 
@@ -962,8 +962,8 @@ static int musb_gadget_enable(struct usb
 	/* NOTE:  all the I/O code _should_ work fine without DMA, in case
 	 * for some reason you run out of channels here.
 	 */
-	if (is_dma_capable() && musb->pDmaController) {
-		struct dma_controller	*c = musb->pDmaController;
+	if (is_dma_capable() && musb->dma_controller) {
+		struct dma_controller	*c = musb->dma_controller;
 
 		musb_ep->dma = c->channel_alloc(c, hw_ep,
 				(desc->bEndpointAddress & USB_DIR_IN));
@@ -1252,7 +1252,7 @@ static int musb_gadget_dequeue(struct us
 
 	/* ... else abort the dma transfer ... */
 	else if (is_dma_capable() && musb_ep->dma) {
-		struct dma_controller	*c = musb->pDmaController;
+		struct dma_controller	*c = musb->dma_controller;
 
 		musb_ep_select(musb->mregs, musb_ep->current_epnum);
 		if (c->channel_abort)
Index: linux-2.6.18/drivers/usb/musb/musb_host.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musb_host.c
+++ linux-2.6.18/drivers/usb/musb/musb_host.c
@@ -627,7 +627,7 @@ static void musb_ep_program(struct musb 
 			struct urb *pUrb, unsigned int is_out,
 			u8 * pBuffer, u32 dwLength)
 {
-	struct dma_controller	*pDmaController;
+	struct dma_controller	*dma_controller;
 	struct dma_channel	*pDmaChannel;
 	u8			bDmaOk;
 	void __iomem		*mbase = musb->mregs;
@@ -654,12 +654,12 @@ static void musb_ep_program(struct musb 
 	musb_ep_select(mbase, epnum);
 
 	/* candidate for DMA? */
-	pDmaController = musb->pDmaController;
-	if (is_dma_capable() && epnum && pDmaController) {
+	dma_controller = musb->dma_controller;
+	if (is_dma_capable() && epnum && dma_controller) {
 		pDmaChannel = is_out ? hw_ep->tx_channel : hw_ep->rx_channel;
 		if (!pDmaChannel) {
-			pDmaChannel = pDmaController->channel_alloc(
-					pDmaController, hw_ep, is_out);
+			pDmaChannel = dma_controller->channel_alloc(
+					dma_controller, hw_ep, is_out);
 			if (is_out)
 				hw_ep->tx_channel = pDmaChannel;
 			else
@@ -791,7 +791,7 @@ static void musb_ep_program(struct musb 
 
 			musb_writew(epio, MGC_O_HDRC_TXCSR, wCsr);
 
-			bDmaOk = pDmaController->channel_program(
+			bDmaOk = dma_controller->channel_program(
 					pDmaChannel, wPacketSize,
 					pDmaChannel->bDesiredMode,
 					pUrb->transfer_dma,
@@ -799,7 +799,7 @@ static void musb_ep_program(struct musb 
 			if (bDmaOk) {
 				wLoadCount = 0;
 			} else {
-				pDmaController->channel_release(pDmaChannel);
+				dma_controller->channel_release(pDmaChannel);
 				if (is_out)
 					hw_ep->tx_channel = NULL;
 				else
@@ -830,7 +830,7 @@ static void musb_ep_program(struct musb 
 			/* TX uses "rndis" mode automatically, but needs help
 			 * to identify the zero-length-final-packet case.
 			 */
-			bDmaOk = pDmaController->channel_program(
+			bDmaOk = dma_controller->channel_program(
 					pDmaChannel, wPacketSize,
 					(pUrb->transfer_flags
 							& URB_ZERO_PACKET)
@@ -840,7 +840,7 @@ static void musb_ep_program(struct musb 
 			if (bDmaOk) {
 				wLoadCount = 0;
 			} else {
-				pDmaController->channel_release(pDmaChannel);
+				dma_controller->channel_release(pDmaChannel);
 				pDmaChannel = hw_ep->tx_channel = NULL;
 
 				/* REVISIT there's an error path here that
@@ -915,14 +915,14 @@ static void musb_ep_program(struct musb 
 				/* unless caller treats short rx transfers as
 				 * errors, we dare not queue multiple transfers.
 				 */
-				bDmaOk = pDmaController->channel_program(
+				bDmaOk = dma_controller->channel_program(
 						pDmaChannel, wPacketSize,
 						!(pUrb->transfer_flags
 							& URB_SHORT_NOT_OK),
 						pUrb->transfer_dma,
 						qh->segsize);
 				if (!bDmaOk) {
-					pDmaController->channel_release(
+					dma_controller->channel_release(
 							pDmaChannel);
 					pDmaChannel = hw_ep->rx_channel = NULL;
 				} else
@@ -1227,7 +1227,7 @@ void musb_host_tx(struct musb *musb, u8 
 	if (status) {
 		if (dma_channel_status(dma) == MGC_DMA_STATUS_BUSY) {
 			dma->bStatus = MGC_DMA_STATUS_CORE_ABORT;
-			(void) musb->pDmaController->channel_abort(dma);
+			(void) musb->dma_controller->channel_abort(dma);
 		}
 
 		/* do the proper sequence to abort the transfer in the
@@ -1461,7 +1461,7 @@ void musb_host_rx(struct musb *musb, u8 
 		/* clean up dma and collect transfer count */
 		if (dma_channel_status(dma) == MGC_DMA_STATUS_BUSY) {
 			dma->bStatus = MGC_DMA_STATUS_CORE_ABORT;
-			(void) musb->pDmaController->channel_abort(dma);
+			(void) musb->dma_controller->channel_abort(dma);
 			xfer_len = dma->dwActualLength;
 		}
 		musb_h_flush_rxfifo(hw_ep, 0);
@@ -1492,7 +1492,7 @@ void musb_host_rx(struct musb *musb, u8 
 		 */
 		if (dma_channel_status(dma) == MGC_DMA_STATUS_BUSY) {
 			dma->bStatus = MGC_DMA_STATUS_CORE_ABORT;
-			(void) musb->pDmaController->channel_abort(dma);
+			(void) musb->dma_controller->channel_abort(dma);
 			xfer_len = dma->dwActualLength;
 			bDone = TRUE;
 		}
@@ -1567,7 +1567,7 @@ void musb_host_rx(struct musb *musb, u8 
 					qh->offset,
 					pUrb->transfer_buffer_length);
 
-			c = musb->pDmaController;
+			c = musb->dma_controller;
 
 			dma->bDesiredMode = 0;
 #ifdef USE_MODE1
@@ -1915,7 +1915,7 @@ static int musb_cleanup_urb(struct urb *
 
 		dma = is_in ? ep->rx_channel : ep->tx_channel;
 		if (dma) {
-			status = ep->musb->pDmaController->channel_abort(dma);
+			status = ep->musb->dma_controller->channel_abort(dma);
 			DBG(status ? 1 : 3,
 				"abort %cX%d DMA for urb %p --> %d\n",
 				is_in ? 'R' : 'T', ep->epnum,
Index: linux-2.6.18/drivers/usb/musb/musb_procfs.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musb_procfs.c
+++ linux-2.6.18/drivers/usb/musb/musb_procfs.c
@@ -593,7 +593,7 @@ static int dump_header_stats(struct musb
 	buffer += code;
 #endif	/* DAVINCI */
 
-	if (is_cppi_enabled() && musb->pDmaController) {
+	if (is_cppi_enabled() && musb->dma_controller) {
 		code = sprintf(buffer,
 				"CPPI: txcr=%d txsrc=%01x txena=%01x; "
 				"rxcr=%d rxsrc=%01x rxena=%01x "
Index: linux-2.6.18/drivers/usb/musb/musbdefs.h
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musbdefs.h
+++ linux-2.6.18/drivers/usb/musb/musbdefs.h
@@ -356,7 +356,7 @@ struct musb {
 	 */
 	void			(*board_set_vbus)(struct musb *, int is_on);
 
-	struct dma_controller	*pDmaController;
+	struct dma_controller	*dma_controller;
 
 	struct device		*controller;
 	void __iomem		*ctrl_base;
Index: linux-2.6.18/drivers/usb/musb/plat_uds.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/plat_uds.c
+++ linux-2.6.18/drivers/usb/musb/plat_uds.c
@@ -1807,8 +1807,8 @@ static void musb_free(struct musb *musb)
 		disable_irq_wake(musb->nIrq);
 		free_irq(musb->nIrq, musb);
 	}
-	if (is_dma_capable() && musb->pDmaController) {
-		struct dma_controller	*c = musb->pDmaController;
+	if (is_dma_capable() && musb->dma_controller) {
+		struct dma_controller	*c = musb->dma_controller;
 
 		(void) c->stop(c->pPrivateData);
 		dma_controller_destroy(c);
@@ -1921,13 +1921,13 @@ musb_init_controller(struct device *dev,
 		struct dma_controller	*c;
 
 		c = dma_controller_create(musb, musb->mregs);
-		musb->pDmaController = c;
+		musb->dma_controller = c;
 		if (c)
 			(void) c->start(c->pPrivateData);
 	}
 #endif
 	/* ideally this would be abstracted in platform setup */
-	if (!is_dma_capable() || !musb->pDmaController)
+	if (!is_dma_capable() || !musb->dma_controller)
 		dev->dma_mask = NULL;
 
 	/* be sure interrupts are disabled before connecting ISR */
@@ -1961,7 +1961,7 @@ musb_init_controller(struct device *dev,
 			default:		s = "OTG"; break;
 			}; s; }),
 			ctrl,
-			(is_dma_capable() && musb->pDmaController)
+			(is_dma_capable() && musb->dma_controller)
 				? "DMA" : "PIO",
 			musb->nIrq);
 
Index: linux-2.6.18/mvl_patches/pro50-1683.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1683.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1683);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

