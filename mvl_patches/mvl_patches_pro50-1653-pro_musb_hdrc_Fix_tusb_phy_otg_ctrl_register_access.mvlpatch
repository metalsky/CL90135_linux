#! /usr/bin/env bash
# Patch: -pro_musb_hdrc_Fix_tusb_phy_otg_ctrl_register_access
# Date: Fri Sep 19 14:06:14 2008
# From 057f357011959ef6ed384facd1bea1501d74b29e Mon Sep 17 00:00:00 2001
# From: Tony Lindgren <tony@atomide.com>
# Date: Wed, 27 Jun 2007 07:38:37 -0700
# Subject: [PATCH] musb_hdrc: Fix tusb phy_otg_ctrl register access
# 
# In some places OTG_CTRL and OTG_CTRL_ENABLE registers were
# accessed the wrong way causing extra ID status interrupts.
# 
# OTG_CTRL register muxes the lines, OTG_CTRL_ENABLE sets the
# values.
# 
# Signed-off-by: Tony Lindgren <tony@atomide.com>
# (cherry picked from commit 36c8d6577dfb487a1264aebebfca13f3a4ead511)

PATCHNUM=1653
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
From 057f357011959ef6ed384facd1bea1501d74b29e Mon Sep 17 00:00:00 2001
From: Tony Lindgren <tony@atomide.com>
Date: Wed, 27 Jun 2007 07:38:37 -0700
Subject: [PATCH] musb_hdrc: Fix tusb phy_otg_ctrl register access

In some places OTG_CTRL and OTG_CTRL_ENABLE registers were
accessed the wrong way causing extra ID status interrupts.

OTG_CTRL register muxes the lines, OTG_CTRL_ENABLE sets the
values.

Signed-off-by: Tony Lindgren <tony@atomide.com>
(cherry picked from commit 36c8d6577dfb487a1264aebebfca13f3a4ead511)
Index: linux-2.6.18/drivers/usb/musb/tusb6010.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/tusb6010.c
+++ linux-2.6.18/drivers/usb/musb/tusb6010.c
@@ -70,41 +70,33 @@ static int __init tusb_print_revision(st
 static void tusb_wbus_quirk(struct musb *musb, int enabled)
 {
 	void __iomem	*base = musb->ctrl_base;
-	static u32	phy_otg_ena = 0, phy_otg_ctrl = 0;
+	static u32	phy_otg_ctrl = 0, phy_otg_ena = 0;
 	u32		int_src, tmp;
 
 	if (enabled) {
-		phy_otg_ena = musb_readl(base, TUSB_PHY_OTG_CTRL_ENABLE);
 		phy_otg_ctrl = musb_readl(base, TUSB_PHY_OTG_CTRL);
+		phy_otg_ena = musb_readl(base, TUSB_PHY_OTG_CTRL_ENABLE);
 		tmp = TUSB_PHY_OTG_CTRL_WRPROTECT
 				| phy_otg_ena | WBUS_QUIRK_MASK;
-		musb_writel(base, TUSB_PHY_OTG_CTRL_ENABLE, tmp);
-		tmp = phy_otg_ctrl & ~WBUS_QUIRK_MASK;
-		tmp |= TUSB_PHY_OTG_CTRL_WRPROTECT | TUSB_PHY_OTG_CTRL_TESTM2;
 		musb_writel(base, TUSB_PHY_OTG_CTRL, tmp);
-		DBG(2, "Enabled tusb wbus quirk ena %08x ctrl %08x\n",
-			musb_readl(base, TUSB_PHY_OTG_CTRL_ENABLE),
-			musb_readl(base, TUSB_PHY_OTG_CTRL));
+		tmp = phy_otg_ena & ~WBUS_QUIRK_MASK;
+		tmp |= TUSB_PHY_OTG_CTRL_WRPROTECT | TUSB_PHY_OTG_CTRL_TESTM2;
+		musb_writel(base, TUSB_PHY_OTG_CTRL_ENABLE, tmp);
+		DBG(2, "Enabled tusb wbus quirk ctrl %08x ena %08x\n",
+			musb_readl(base, TUSB_PHY_OTG_CTRL),
+			musb_readl(base, TUSB_PHY_OTG_CTRL_ENABLE));
 	} else if (musb_readl(base, TUSB_PHY_OTG_CTRL_ENABLE)
 					& TUSB_PHY_OTG_CTRL_TESTM2) {
-		tmp = TUSB_PHY_OTG_CTRL_WRPROTECT
-				| phy_otg_ena | WBUS_QUIRK_MASK;
-		musb_writel(base, TUSB_PHY_OTG_CTRL_ENABLE, tmp);
 		tmp = TUSB_PHY_OTG_CTRL_WRPROTECT | phy_otg_ctrl;
 		musb_writel(base, TUSB_PHY_OTG_CTRL, tmp);
 		tmp = TUSB_PHY_OTG_CTRL_WRPROTECT | phy_otg_ena;
 		musb_writel(base, TUSB_PHY_OTG_CTRL_ENABLE, tmp);
-		DBG(2, "Disabled tusb wbus quirk ena %08x ctrl %08x\n",
-			musb_readl(base, TUSB_PHY_OTG_CTRL_ENABLE),
-			musb_readl(base, TUSB_PHY_OTG_CTRL));
-		phy_otg_ena = 0;
+		DBG(2, "Disabled tusb wbus quirk ctrl %08x ena %08x\n",
+			musb_readl(base, TUSB_PHY_OTG_CTRL),
+			musb_readl(base, TUSB_PHY_OTG_CTRL_ENABLE));
 		phy_otg_ctrl = 0;
+		phy_otg_ena = 0;
 	}
-
-	int_src = musb_readl(base, TUSB_INT_SRC);
-	if (int_src & TUSB_INT_SRC_ID_STATUS_CHNG)
-		musb_writel(base, TUSB_INT_SRC_CLEAR,
-				TUSB_INT_SRC_ID_STATUS_CHNG);
 }
 
 /*
@@ -525,7 +517,7 @@ static void tusb_source_power(struct mus
 void musb_platform_set_mode(struct musb *musb, u8 musb_mode)
 {
 	void __iomem	*base = musb->ctrl_base;
-	u32		otg_stat, phy_otg_ena, phy_otg_ctrl, dev_conf;
+	u32		otg_stat, phy_otg_ctrl, phy_otg_ena, dev_conf;
 	int		vbus = 0;
 
 	if (musb->board_mode != MUSB_OTG) {
@@ -534,16 +526,16 @@ void musb_platform_set_mode(struct musb 
 	}
 
 	otg_stat = musb_readl(base, TUSB_DEV_OTG_STAT);
-	phy_otg_ena = musb_readl(base, TUSB_PHY_OTG_CTRL_ENABLE);
 	phy_otg_ctrl = musb_readl(base, TUSB_PHY_OTG_CTRL);
+	phy_otg_ena = musb_readl(base, TUSB_PHY_OTG_CTRL_ENABLE);
 	dev_conf = musb_readl(base, TUSB_DEV_CONF);
 
 	switch (musb_mode) {
 
 #ifdef CONFIG_USB_MUSB_HDRC_HCD
 	case MUSB_HOST:		/* Disable PHY ID detect, ground ID */
-		phy_otg_ena |= TUSB_PHY_OTG_CTRL_OTG_ID_PULLUP;
 		phy_otg_ctrl &= ~TUSB_PHY_OTG_CTRL_OTG_ID_PULLUP;
+		phy_otg_ena |= TUSB_PHY_OTG_CTRL_OTG_ID_PULLUP;
 		dev_conf |= TUSB_DEV_CONF_ID_SEL;
 		dev_conf &= ~TUSB_DEV_CONF_SOFT_ID;
 		vbus = 1;
@@ -552,16 +544,16 @@ void musb_platform_set_mode(struct musb 
 
 #ifdef CONFIG_USB_GADGET_MUSB_HDRC
 	case MUSB_PERIPHERAL:	/* Disable PHY ID detect, keep ID pull-up on */
-		phy_otg_ena |= TUSB_PHY_OTG_CTRL_OTG_ID_PULLUP;
 		phy_otg_ctrl |= TUSB_PHY_OTG_CTRL_OTG_ID_PULLUP;
+		phy_otg_ena |= TUSB_PHY_OTG_CTRL_OTG_ID_PULLUP;
 		dev_conf |= (TUSB_DEV_CONF_ID_SEL | TUSB_DEV_CONF_SOFT_ID);
 		break;
 #endif
 
 #ifdef CONFIG_USB_MUSB_OTG
 	case MUSB_OTG:		/* Use PHY ID detection */
-		phy_otg_ena |= TUSB_PHY_OTG_CTRL_OTG_ID_PULLUP;
 		phy_otg_ctrl |= TUSB_PHY_OTG_CTRL_OTG_ID_PULLUP;
+		phy_otg_ena |= TUSB_PHY_OTG_CTRL_OTG_ID_PULLUP;
 		dev_conf &= ~(TUSB_DEV_CONF_ID_SEL | TUSB_DEV_CONF_SOFT_ID);
 		break;
 #endif
@@ -570,10 +562,10 @@ void musb_platform_set_mode(struct musb 
 		DBG(2, "Trying to set unknown mode %i\n", musb_mode);
 	}
 
-	musb_writel(base, TUSB_PHY_OTG_CTRL_ENABLE,
-			TUSB_PHY_OTG_CTRL_WRPROTECT | phy_otg_ena);
 	musb_writel(base, TUSB_PHY_OTG_CTRL,
 			TUSB_PHY_OTG_CTRL_WRPROTECT | phy_otg_ctrl);
+	musb_writel(base, TUSB_PHY_OTG_CTRL_ENABLE,
+			TUSB_PHY_OTG_CTRL_WRPROTECT | phy_otg_ena);
 	musb_writel(base, TUSB_DEV_CONF, dev_conf);
 
 	otg_stat = musb_readl(base, TUSB_DEV_OTG_STAT);
Index: linux-2.6.18/mvl_patches/pro50-1653.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1653.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1653);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

