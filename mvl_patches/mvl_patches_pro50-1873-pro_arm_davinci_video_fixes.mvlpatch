#! /usr/bin/env bash
# Patch: -pro_arm_davinci_video_fixes
# Date: Fri Sep 19 14:27:35 2008
# Source: Texas Instruments, Inc.
# MR: 28149
# Type: Defect Fix
# Disposition: merged from TI DaVinci LSP 1.30.
# Signed-off-by: Pavel Kiryukhin <pkiryukhin@ru.mvista.com>
# Description:
#   Misc. fixes - sync with TI DaVinci LSP 1.30.
# 
#  drivers/media/video/davinci/davinci_display.c   |    3 ++-
#  drivers/media/video/davinci/davinci_enc_mngr.c  |    3 +--
#  drivers/media/video/davinci/davinci_platform.c  |   10 +++++-----
#  drivers/media/video/davinci/davinci_vpfe.c      |    1 +
#  drivers/media/video/davinci/davincihd_capture.c |   13 +++++++++----
#  drivers/media/video/davinci/davincihd_display.c |   14 ++++++++++----
#  6 files changed, 28 insertions(+), 16 deletions(-)
# 

PATCHNUM=1873
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: Texas Instruments, Inc.
MR: 28149
Type: Defect Fix
Disposition: merged from TI DaVinci LSP 1.30.
Signed-off-by: Pavel Kiryukhin <pkiryukhin@ru.mvista.com>
Description:
  Misc. fixes - sync with TI DaVinci LSP 1.30.

 drivers/media/video/davinci/davinci_display.c   |    3 ++-
 drivers/media/video/davinci/davinci_enc_mngr.c  |    3 +--
 drivers/media/video/davinci/davinci_platform.c  |   10 +++++-----
 drivers/media/video/davinci/davinci_vpfe.c      |    1 +
 drivers/media/video/davinci/davincihd_capture.c |   13 +++++++++----
 drivers/media/video/davinci/davincihd_display.c |   14 ++++++++++----
 mvl_patches/pro50-1873.c                        |   16 ++++++++++++++++
 7 files changed, 44 insertions(+), 16 deletions(-)

Index: linux-2.6.18/drivers/media/video/davinci/davinci_display.c
===================================================================
--- linux-2.6.18.orig/drivers/media/video/davinci/davinci_display.c
+++ linux-2.6.18/drivers/media/video/davinci/davinci_display.c
@@ -995,7 +995,7 @@ static int davinci_doioctl(struct inode 
 				    (layer->layer_info.id,
 				     &layer->layer_info.config)) {
 					dev_err(davinci_display_dev,
-						"Error in S_FMT params:- field\n");
+						"Error in S_FMT params\n");
 					up(&davinci_dm.lock);
 					return -EINVAL;
 				}
@@ -1066,6 +1066,7 @@ static int davinci_doioctl(struct inode 
 			if (0 != layer->io_usrs) {
 				dev_err(davinci_display_dev, "not IO user\n");
 				ret = -EBUSY;
+				up(&davinci_dm.lock);
 				break;
 			}
 			/* Initialize videobuf queue as per the
Index: linux-2.6.18/drivers/media/video/davinci/davinci_vpfe.c
===================================================================
--- linux-2.6.18.orig/drivers/media/video/davinci/davinci_vpfe.c
+++ linux-2.6.18/drivers/media/video/davinci/davinci_vpfe.c
@@ -1424,6 +1424,7 @@ static int vpfe_doioctl(struct inode *in
 		down_interruptible(&vpfe->lock);
 		if (vpfe->io_usrs != 0) {
 			ret = -EBUSY;
+			up(&vpfe->lock);
 			break;
 		}
 		videobuf_queue_init(&vpfe->bufqueue, &video_qops, NULL,
Index: linux-2.6.18/drivers/media/video/davinci/davincihd_capture.c
===================================================================
--- linux-2.6.18.orig/drivers/media/video/davinci/davincihd_capture.c
+++ linux-2.6.18/drivers/media/video/davinci/davincihd_capture.c
@@ -72,7 +72,7 @@ static struct device *vpif_dev = NULL;
 
 static struct v4l2_capability vpif_videocap = {
 	.driver = "vpif capture",
-	.card = "DaVinciHD EVM",
+	.card = "DM646x EVM",
 	.bus_info = "Platform",
 	.version = VPIF_CAPTURE_VERSION_CODE,
 	.capabilities = V4L2_CAP_VIDEO_CAPTURE | V4L2_CAP_STREAMING |
@@ -1650,14 +1650,17 @@ static int vpif_doioctl(struct inode *in
 			    ((V4L2_BUF_TYPE_HBI_CAPTURE == reqbuf->type) ?
 			     VPIF_HBI_INDEX : VPIF_VBI_INDEX);
 			common = &(channel->common[buf_type_index]);
+			down_interruptible(&common->lock);
 
 			if (common->fmt.type != reqbuf->type) {
 				ret = -EINVAL;
+				up(&common->lock);
 				break;
 			}
 			if ((V4L2_BUF_TYPE_SLICED_VBI_CAPTURE == reqbuf->type)
 			    && (V4L2_MEMORY_MMAP != reqbuf->memory)) {
 				ret = -EINVAL;
+				up(&common->lock);
 				break;
 			}
 
@@ -1665,10 +1668,10 @@ static int vpif_doioctl(struct inode *in
 			   return error */
 			if (0 != common->io_usrs) {
 				ret = -EBUSY;
+				up(&common->lock);
 				break;
 			}
 
-			down_interruptible(&common->lock);
 			if ((common->fmt.fmt.pix.field != V4L2_FIELD_ANY) &&
 			    (V4L2_BUF_TYPE_VIDEO_CAPTURE == reqbuf->type))
 				field = common->fmt.fmt.pix.field;
@@ -2523,6 +2526,7 @@ static int vpif_release(struct inode *in
 		common->started = 0;
 		/* Free buffers allocated */
 		videobuf_queue_cancel(&common->buffer_queue);
+		videobuf_mmap_free(&common->buffer_queue);
 		vpif_free_allbuffers(channel);
 		common->numbuffers =
 		    config_params.numbuffers[channel->channel_id];
@@ -2550,6 +2554,7 @@ static int vpif_release(struct inode *in
 			common->started = 0;
 			/* Free buffers allocated */
 			videobuf_queue_cancel(&common->buffer_queue);
+			videobuf_mmap_free(&common->buffer_queue);
 			vpif_free_vbibuffers(channel, i);
 			common->numbuffers = 0;
 		}
@@ -2626,7 +2631,7 @@ static __init int vpif_probe(struct devi
 		vfd->dev = device;
 		vfd->release = video_device_release;
 		snprintf(vfd->name, sizeof(vfd->name),
-			 "DaVinciHD_VPIFCapture_DRIVER_V%d.%d.%d",
+			 "DM646x_VPIFCapture_DRIVER_V%d.%d.%d",
 			 (VPIF_CAPTURE_VERSION_CODE >> 16) & 0xff,
 			 (VPIF_CAPTURE_VERSION_CODE >> 8) & 0xff,
 			 (VPIF_CAPTURE_VERSION_CODE) & 0xff);
@@ -2844,7 +2849,7 @@ static __init int vpif_init(void)
 		err =
 		    request_irq(vpif_get_irq_number(j),
 				vpif_channel_isr, SA_INTERRUPT,
-				"DaVinciHD_Capture",
+				"DM646x_Capture",
 				(void *)(&(vpif_obj.dev[j]->channel_id)));
 		if (0 != err) {
 			if (j == 0) {
Index: linux-2.6.18/drivers/media/video/davinci/davincihd_display.c
===================================================================
--- linux-2.6.18.orig/drivers/media/video/davinci/davincihd_display.c
+++ linux-2.6.18/drivers/media/video/davinci/davincihd_display.c
@@ -68,7 +68,7 @@ static struct device *vpif_dev = NULL;
 
 static struct v4l2_capability vpif_videocap = {
 	.driver = "vpif display",
-	.card = "DaVinciHD EVM",
+	.card = "DM646x EVM",
 	.bus_info = "Platform",
 	.version = VPIF_DISPLAY_VERSION_CODE,
 	.capabilities = V4L2_CAP_VIDEO_OUTPUT | V4L2_CAP_STREAMING |
@@ -1282,25 +1282,28 @@ static int vpif_doioctl(struct inode *in
 			    ((V4L2_BUF_TYPE_HBI_OUTPUT == reqbuf->type) ?
 			     VPIF_HBI_INDEX : VPIF_VBI_INDEX);
 			common = &(channel->common[index]);
+			down_interruptible(&common->lock);
 
 			/* Check the validity of the buffer type */
 			if (common->fmt.type != reqbuf->type) {
 				ret = -EINVAL;
+				up(&common->lock);
 				break;
 			}
 			/* Only mmap is supported for sliced VBI */
 			if ((V4L2_BUF_TYPE_SLICED_VBI_OUTPUT == reqbuf->type)
 			    && (V4L2_MEMORY_MMAP != reqbuf->memory)) {
 				ret = -EINVAL;
+				up(&common->lock);
 				break;
 			}
 			/* If io users of the channel is not zero,
 			   return error */
 			if (0 != common->io_usrs) {
 				ret = -EBUSY;
+				up(&common->lock);
 				break;
 			}
-			down_interruptible(&common->lock);
 			if (reqbuf->type == V4L2_BUF_TYPE_VIDEO_OUTPUT) {
 				if (common->fmt.fmt.pix.field == V4L2_FIELD_ANY)
 					field = V4L2_FIELD_INTERLACED;
@@ -2131,6 +2134,7 @@ static int vpif_release(struct inode *in
 		common->started = 0;
 		/* Free buffers allocated */
 		videobuf_queue_cancel(&common->buffer_queue);
+		videobuf_mmap_free(&common->buffer_queue);
 		vpif_free_allbuffers(channel);
 		common->numbuffers =
 		    config_params.numbuffers[channel->channel_id];
@@ -2155,6 +2159,8 @@ static int vpif_release(struct inode *in
 			/* Free buffers allocated */
 			videobuf_queue_cancel
 			    (&channel->common[VPIF_VBI_INDEX].buffer_queue);
+			videobuf_mmap_free(
+				&channel->common[VPIF_VBI_INDEX].buffer_queue);
 			vpif_free_vbibuffers(channel, i);
 			common->numbuffers = 0;
 		}
@@ -2229,7 +2235,7 @@ static __init int vpif_probe(struct devi
 		vfd->dev = device;
 		vfd->release = video_device_release;
 		snprintf(vfd->name, sizeof(vfd->name),
-			 "DaVinciHD_VPIFDisplay_DRIVER_V%d.%d.%d",
+			 "DM646x_VPIFDisplay_DRIVER_V%d.%d.%d",
 			 (VPIF_DISPLAY_VERSION_CODE >> 16)
 			 & 0xff,
 			 (VPIF_DISPLAY_VERSION_CODE >> 8) &
@@ -2438,7 +2444,7 @@ static __init int vpif_init(void)
 		err =
 		    request_irq(vpif_get_irq_number(j + 2),
 				vpif_channel_isr,
-				SA_INTERRUPT, "DaVinciHD_Display",
+				SA_INTERRUPT, "DM646x_Display",
 				(void *)(&(vpif_obj.dev[j]->channel_id)));
 		if (0 != err) {
 			free_irq_no_index = j;
Index: linux-2.6.18/drivers/media/video/davinci/davinci_enc_mngr.c
===================================================================
--- linux-2.6.18.orig/drivers/media/video/davinci/davinci_enc_mngr.c
+++ linux-2.6.18/drivers/media/video/davinci/davinci_enc_mngr.c
@@ -45,8 +45,7 @@ module_param(ch1_output, charp, S_IRUGO)
 module_param(ch0_mode, charp, S_IRUGO);
 module_param(ch1_mode, charp, S_IRUGO);
 
-struct vid_enc_device_mgr enc_dev[DAVINCI_ENC_MAX_CHANNELS] = {
-};
+struct vid_enc_device_mgr enc_dev[DAVINCI_ENC_MAX_CHANNELS];
 
 EXPORT_SYMBOL(enc_dev);
 extern struct enc_config davinci_enc_default[];
Index: linux-2.6.18/drivers/media/video/davinci/davinci_platform.c
===================================================================
--- linux-2.6.18.orig/drivers/media/video/davinci/davinci_platform.c
+++ linux-2.6.18/drivers/media/video/davinci/davinci_platform.c
@@ -761,11 +761,6 @@ static void davinci_enc_set_720p(struct 
 	dispc_reg_out(VENC_OSDCLK1, 1);
 	dispc_reg_out(VENC_OSDHADV, 0);
 
-	dispc_reg_out(VENC_HSDLY, 0);
-	dispc_reg_out(VENC_VSDLY, 0);
-	dispc_reg_out(VENC_YCCCTL, 0);
-	dispc_reg_out(VENC_VSTARTA, 13);
-
 	davinci_writel(0xa, SYS_VPSS_CLKCTL);
 	if (cpu_is_davinci_dm355()) {
 		dispc_reg_out(VENC_CLKCTL, 0x11);
@@ -856,6 +851,11 @@ static void davinci_enc_set_1080i(struct
 	dispc_reg_out(VENC_OSDCLK1, 1);
 	dispc_reg_out(VENC_OSDHADV, 0);
 
+	dispc_reg_out(VENC_HSDLY, 0);
+	dispc_reg_out(VENC_VSDLY, 0);
+	dispc_reg_out(VENC_YCCCTL, 0);
+	dispc_reg_out(VENC_VSTARTA, 13);
+
 	davinci_writel(0xa, SYS_VPSS_CLKCTL);
 	if (cpu_is_davinci_dm355()) {
 		dispc_reg_out(VENC_CLKCTL, 0x11);
Index: linux-2.6.18/mvl_patches/pro50-1873.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1873.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1873);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

