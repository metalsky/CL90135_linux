#! /usr/bin/env bash
# Patch: -pro_arm_da8xx_evm_board_support
# Date: Thu Feb 19 15:04:23 2009
# Source: MontaVista Software, Inc.
# MR: 28546
# Type: Enhancement
# Disposition: needs submitting to linux-arm-kernel
# Signed-off-by: Mark Greer <mgreer@mvista.com>
# Signed-off-by: Steve Chen <schen@mvista.com>
# Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
# Signed-off-by: Pavel Kiryukhin <pkiryukhin@ru.mvista.com>
# Description:
# Add support for Texas Instruments DA8xx EVM board.
# 
#  arch/arm/mach-da8xx/Kconfig               |   38 ++
#  arch/arm/mach-da8xx/Makefile              |    3 
#  arch/arm/mach-da8xx/board-evm.c           |  466 ++++++++++++++++++++++++++++++
#  arch/arm/tools/mach-types                 |    1 
#  include/asm-arm/arch-davinci/i2c-client.h |    5 
#  5 files changed, 511 insertions(+), 2 deletions(-)
# 

PATCHNUM=2153
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 28546
Type: Enhancement
Disposition: needs submitting to linux-arm-kernel
Signed-off-by: Mark Greer <mgreer@mvista.com>
Signed-off-by: Steve Chen <schen@mvista.com>
Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
Signed-off-by: Pavel Kiryukhin <pkiryukhin@ru.mvista.com>
Description:
Add support for Texas Instruments DA8xx EVM board.

 arch/arm/mach-da8xx/Kconfig               |   38 ++
 arch/arm/mach-da8xx/Makefile              |    3 
 arch/arm/mach-da8xx/board-evm.c           |  466 ++++++++++++++++++++++++++++++
 arch/arm/tools/mach-types                 |    1 
 include/asm-arm/arch-davinci/i2c-client.h |    5 
 mvl_patches/pro50-2153.c                  |   16 +
 6 files changed, 527 insertions(+), 2 deletions(-)

Index: linux-2.6.18/arch/arm/mach-da8xx/Kconfig
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-da8xx/Kconfig
+++ linux-2.6.18/arch/arm/mach-da8xx/Kconfig
@@ -5,4 +5,42 @@ config	TI_CPPI41
 	help
 	  Configure this option to include the CPPI 4.1 support.
 
+choice
+	prompt "DA8xx Board Type"
+	default MACH_DA8XX_EVM
+
+config MACH_DA8XX_EVM
+	bool "TI DA8xx EVM"
+	help
+	  Configure this option to specify the whether the board used
+	  for development is a DA8xx EVM.
+
+endchoice
+
+config DA8XX_UI
+	bool "DA8xx UI (User Interface) board support"
+	depends on MACH_DA8XX_EVM
+	select DAVINCI_I2C_EXPANDER
+	help
+	  Support for the periferials located on User Interface board.
+
+choice
+	prompt "Select DA8xx UI board peripheral"
+	depends on DA8XX_UI
+
+config DA8XX_UI_LCD
+	bool "LCD"
+	help
+	  Configure this option to use LCD as a framebuffer or simple character
+	  display.
+
+config DA8XX_UI_NAND
+	bool "NAND flash"
+	help
+	  Configure this option to specify the that CE3 will be used to
+	  communicate to the NAND flash. Do not forget to setup the switch
+	  correctly.
+
+endchoice
+
 endif
Index: linux-2.6.18/arch/arm/mach-da8xx/Makefile
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-da8xx/Makefile
+++ linux-2.6.18/arch/arm/mach-da8xx/Makefile
@@ -4,8 +4,9 @@
 #
 
 # Common objects
-obj-y := time.o clock.o io.o id.o devices.o dma.o reset.o
+obj-y := time.o clock.o io.o id.o devices.o dma.o
 
 obj-$(CONFIG_GENERIC_GPIO)	+= gpio.o
 obj-$(CONFIG_SPI_DAVINCI)	+= spi.o
 obj-$(CONFIG_TI_CPPI41) 	+= cppi41.o
+obj-$(CONFIG_MACH_DA8XX_EVM)	+= board-evm.o reset.o
Index: linux-2.6.18/arch/arm/mach-da8xx/board-evm.c
===================================================================
--- /dev/null
+++ linux-2.6.18/arch/arm/mach-da8xx/board-evm.c
@@ -0,0 +1,466 @@
+/*
+ * TI DA8xx EVM board.
+ *
+ * Copyright (C) 2008-2009 MontaVista Software, Inc. <source@mvista.com>
+ *
+ * Derived from: arch/arm/mach-davinci/board-evm.c
+ * Copyright (C) 2006 Texas Instruments.
+ * Copyright (C) 2007-2008 MontaVista Software, Inc.
+ *
+ * This file is licensed under the terms of the GNU General Public License
+ * version 2. This program is licensed "as is" without any warranty of any
+ * kind, whether express or implied.
+ *
+ */
+#include <linux/config.h>
+#include <linux/kernel.h>
+#include <linux/serial.h>
+#include <linux/serial_8250.h>
+#include <linux/io.h>
+#include <linux/console.h>
+#include <linux/davinci_emac.h>
+#include <linux/usb/musb.h>
+#include <linux/mtd/partitions.h>
+
+#include <asm/hardware.h>
+#include <asm/mach-types.h>
+#include <asm/arch/i2c.h>
+#include <asm/mach/arch.h>
+#include <asm/arch/edma.h>
+#include <asm/arch/mux.h>
+#include <asm/arch/gpio.h>
+#include <asm/arch/clock.h>
+#include <asm/arch/nand.h>
+#include <asm/arch/common.h>
+#include <asm/arch/mmc.h>
+#include <asm/arch/usb.h>
+#include <asm/arch/da8xx_lcdc.h>
+#include <asm/arch/i2c-client.h>
+
+#include "da8xx.h"
+#include "devices.h"
+
+#define DAVINCI_DA8XX_UART_CLK		150000000
+
+#ifdef CONFIG_DA8XX_UI_NAND
+
+static struct mtd_partition da8xx_evm_nand_partitions[] = {
+	/* bootloader (U-Boot, etc) in first sector */
+	[0] = {
+		.name		= "bootloader",
+		.offset		= 0,
+		.size		= SZ_128K,
+		.mask_flags	= MTD_WRITEABLE,	/* force read-only */
+	},
+	/* bootloader params in the next sector */
+	[1] = {
+		.name		= "params",
+		.offset		= MTDPART_OFS_APPEND,
+		.size		= SZ_128K,
+		.mask_flags	= MTD_WRITEABLE,	/* force read-only */
+	},
+	/* kernel */
+	[2] = {
+		.name		= "kernel",
+		.offset		= MTDPART_OFS_APPEND,
+		.size		= SZ_2M,
+		.mask_flags	= 0,
+	},
+	/* file system */
+	[3] = {
+		.name		= "filesystem",
+		.offset		= MTDPART_OFS_APPEND,
+		.size		= MTDPART_SIZ_FULL,
+		.mask_flags	= 0,
+	}
+};
+
+/* flash bbt decriptors */
+static uint8_t da8xx_evm_nand_bbt_pattern[] = { 'B', 'b', 't', '0' };
+static uint8_t da8xx_evm_nand_mirror_pattern[] = { '1', 't', 'b', 'B' };
+
+static struct nand_bbt_descr da8xx_evm_nand_bbt_main_descr = {
+	.options	= NAND_BBT_LASTBLOCK | NAND_BBT_CREATE |
+			  NAND_BBT_WRITE | NAND_BBT_2BIT |
+			  NAND_BBT_VERSION | NAND_BBT_PERCHIP,
+	.offs		= 2,
+	.len		= 4,
+	.veroffs	= 16,
+	.maxblocks	= 4,
+	.pattern	= da8xx_evm_nand_bbt_pattern
+};
+
+static struct nand_bbt_descr da8xx_evm_nand_bbt_mirror_descr = {
+	.options	= NAND_BBT_LASTBLOCK | NAND_BBT_CREATE |
+			  NAND_BBT_WRITE | NAND_BBT_2BIT |
+			  NAND_BBT_VERSION | NAND_BBT_PERCHIP,
+	.offs		= 2,
+	.len		= 4,
+	.veroffs	= 16,
+	.maxblocks	= 4,
+	.pattern	= da8xx_evm_nand_mirror_pattern
+};
+
+static struct nand_davinci_platform_data da8xx_evm_nand_pdata = {
+	.options	= 0,
+	.ecc_mode	= NAND_ECC_HW_SYNDROME,
+	.cle_mask	= 0x10,
+	.ale_mask	= 0x08,
+	.bbt_td		= &da8xx_evm_nand_bbt_main_descr,
+	.bbt_md		= &da8xx_evm_nand_bbt_mirror_descr,
+	.parts		= da8xx_evm_nand_partitions,
+	.nr_parts	= ARRAY_SIZE(da8xx_evm_nand_partitions),
+};
+
+#define	SZ_32K	(32 * 1024)
+
+static struct resource da8xx_evm_nand_resources[] = {
+	[0] = {		/* First memory resource is AEMIF control registers */
+		.start	= DA8XX_EMIF25_CONTROL_BASE,
+		.end	= DA8XX_EMIF25_CONTROL_BASE + SZ_32K - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+	[1] = {		/* Second memory resource is NAND I/O window */
+		.start	= DA8XX_EMIF25_ASYNC_DATA_CE3_BASE,
+		.end	= DA8XX_EMIF25_ASYNC_DATA_CE3_BASE + PAGE_SIZE - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+};
+
+static struct platform_device da8xx_evm_nand_device = {
+	.name		= "nand_davinci",
+	.id		= 0,
+	.dev		= {
+		.platform_data	= &da8xx_evm_nand_pdata,
+	},
+	.num_resources	= ARRAY_SIZE(da8xx_evm_nand_resources),
+	.resource	= da8xx_evm_nand_resources,
+};
+
+#endif	/* CONFIG_DA8XX_UI_NAND */
+
+static struct platform_device *da8xx_evm_devices[] __initdata = {
+#ifdef	CONFIG_DA8XX_UI_NAND
+	&da8xx_evm_nand_device,
+#endif
+};
+
+static struct davinci_i2c_platform_data da8xx_evm_i2c_pdata0 = {
+	.bus_freq	= 100,
+	.bus_delay	= 0,
+};
+
+static struct musb_hdrc_platform_data da8xx_evm_usb20_pdata = {
+#if defined(CONFIG_USB_MUSB_OTG)
+	/* OTG requires a Mini-AB connector */
+	.mode		= MUSB_OTG,
+#elif defined(CONFIG_USB_MUSB_PERIPHERAL)
+	.mode		= MUSB_PERIPHERAL,
+#elif defined(CONFIG_USB_MUSB_HOST)
+	.mode		= MUSB_HOST,
+#endif
+	/* TPS2065 switch @ 5V */
+	.power		= 500 / 2,	/* actually 1 A (sustains 1.5 A) */
+	.potpgt		= (3 + 1) / 2,	/* 3 ms max */
+
+	/* REVISIT multipoint is a _chip_ capability; not board specific */
+	.multipoint	= 1,
+};
+
+static struct emac_init_config da8xx_evm_emac_pdata = {
+	.reset_line		= 0,
+	.emac_bus_frequency	= 148500000,
+	.mdio_reset_line	= 0,
+	.mdio_bus_frequency	= 148500000,
+	.mdio_clock_frequency	= 2200000,
+	.registers_old		= 0,
+	.gigabit		= 0,
+	.phy_mode		= -1,
+};
+
+static int da8xx_evm_mmc_get_ro(int index)
+{
+	int val, status, gpio_num = 33;
+
+	status = gpio_request(gpio_num, "MMC WP\n");
+	if (status < 0) {
+		printk(KERN_WARNING "%s can not open GPIO %d\n", __func__,
+				gpio_num);
+		return 0;
+	}
+	gpio_direction_input(gpio_num);
+	val = gpio_get_value(gpio_num);
+	gpio_free(gpio_num);
+	return val;
+}
+
+static struct davinci_mmc_platform_data da8xx_evm_mmc_pdata = {
+	.mmc_clk		= "MMC_SD_CLK",
+	.rw_threshold		= 64,
+	.use_4bit_mode		= 1,
+	.use_8bit_mode		= 1,
+	.max_frq		= 50000000,
+	.pio_set_dmatrig	= 1,
+	.get_ro			= da8xx_evm_mmc_get_ro,
+};
+
+static struct da8xx_lcdc_platform_data da8xx_evm_lcdc_pdata = {
+	.lcdc_clk_name	= "LCDCTRLCLK",
+};
+
+static void *da8xx_evm_soc_pdata[DA8XX_PDEV_COUNT] __initdata = {
+	[DA8XX_PDEV_I2C_0]	= &da8xx_evm_i2c_pdata0,
+	[DA8XX_PDEV_USB_20]	= &da8xx_evm_usb20_pdata,
+	[DA8XX_PDEV_EMAC]	= &da8xx_evm_emac_pdata,
+	[DA8XX_PDEV_MMC]	= &da8xx_evm_mmc_pdata,
+	[DA8XX_PDEV_LCDC]	= &da8xx_evm_lcdc_pdata,
+};
+
+/* Setup USB clock/mode in the CFGCHIP2 register */
+static __init void da8xx_evm_usb_init(void)
+{
+	u32 cfgchip2;
+
+	/* FYI: CFGCHIP2 is 0x0000ef00 initially */
+	cfgchip2 = davinci_cfg_readl(DA8XX_CFGCHIP(2));
+
+	/* USB2.0 PHY reference clock is 24 MHz */
+	cfgchip2 &= ~CFGCHIP2_REFFREQ;
+	cfgchip2 |=  CFGCHIP2_REFFREQ_24MHZ;
+
+	/*
+	 * Select internal reference clock for USB 2.0 PHY
+	 * and use it as a clock source for USB 1.1 PHY
+	 * (this is the default setting anyway).
+	 */
+	cfgchip2 &= ~CFGCHIP2_USB1PHYCLKMUX;
+	cfgchip2 |=  CFGCHIP2_USB2PHYCLKMUX;
+
+	/*
+	 * We have to override VBUS/ID signals when MUSB is configured into the
+	 * host-only mode -- ID pin will float if no cable is connected, so the
+	 * controller won't be able to drive VBUS thinking that it's a B-device.
+	 * Otherwise, we want to use the OTG mode and enable VBUS comparators.
+	 */
+	cfgchip2 &= ~CFGCHIP2_OTGMODE;
+#ifdef	CONFIG_USB_MUSB_HOST
+	cfgchip2 |=  CFGCHIP2_FORCE_HOST;
+#else
+	cfgchip2 |=  CFGCHIP2_SESENDEN | CFGCHIP2_VBDTCTEN;
+#endif
+
+	davinci_cfg_writel(cfgchip2, DA8XX_CFGCHIP(2));
+}
+
+#ifdef	CONFIG_DA8XX_UI
+
+/*
+ * Setup the MUX_MODE pin of the GPIO expander located on the UI board:
+ * 0 switches AEMIF lines to LCD, 1 (default) to NAND/NOR flashes.
+ */
+static __init void da8xx_evm_expander_setup(void)
+{
+#ifdef	CONFIG_DA8XX_UI_LCD
+	davinci_i2c_expander_op(MUX_MODE_DA8XX, 0);
+#endif
+}
+
+static __init int da8xx_evm_expander_validate(enum i2c_expander_pins pin)
+{
+	switch (pin) {
+	case MUX_MODE_DA8XX:
+	case SPI_MODE_DA8XX:
+		return 0;
+	default:
+		return  -EINVAL;
+	}
+}
+
+#endif	/* CONFIG_DA8XX_UI */
+
+static __init void da8xx_evm_init(void)
+{
+	int ret;
+
+	davinci_gpio_init();
+
+#ifdef	CONFIG_DA8XX_UI
+	davinci_i2c_expander.address = 0x3F;
+	davinci_i2c_expander.init_data = 0xFF;
+	davinci_i2c_expander.name = "da8xx_evm_ui_expander";
+	davinci_i2c_expander.setup = da8xx_evm_expander_setup;
+	davinci_i2c_expander.validate = da8xx_evm_expander_validate;
+#endif
+
+	da8xx_evm_usb_init();
+
+	platform_notify = davinci_serial_init;
+
+	/* Add da8xx EVM specific devices */
+	ret = platform_add_devices(da8xx_evm_devices,
+				   ARRAY_SIZE(da8xx_evm_devices));
+	if (ret)
+		printk(KERN_WARNING "DA8xx: DA8xx EVM devices not added.\n");
+
+	/* Add generic da8xx SoC devices */
+	ret = da8xx_add_devices(da8xx_evm_soc_pdata);
+	if (ret)
+		printk(KERN_WARNING "DA8xx: SoC devices not added.\n");
+}
+
+/* nFIQ are priorities 0-1, nIRQ are priorities 2-31 (with 31 being lowest) */
+static u8 da8xx_evm_default_priorities[DA8XX_N_CP_INTC_IRQ] = {
+	[IRQ_DA8XX_COMMTX]		= 7,
+	[IRQ_DA8XX_COMMRX]		= 7,
+	[IRQ_DA8XX_NINT]		= 7,
+	[IRQ_DA8XX_EVTOUT0]		= 7,
+	[IRQ_DA8XX_EVTOUT1]		= 7,
+	[IRQ_DA8XX_EVTOUT2]		= 7,
+	[IRQ_DA8XX_EVTOUT3]		= 7,
+	[IRQ_DA8XX_EVTOUT4]		= 7,
+	[IRQ_DA8XX_EVTOUT5]		= 7,
+	[IRQ_DA8XX_EVTOUT6]		= 7,
+	[IRQ_DA8XX_EVTOUT6]		= 7,
+	[IRQ_DA8XX_EVTOUT7]		= 7,
+	[IRQ_DA8XX_CCINT0]		= 7,
+	[IRQ_DA8XX_CCERRINT]		= 7,
+	[IRQ_DA8XX_TCERRINT0]		= 7,
+	[IRQ_DA8XX_AEMIFINT]		= 7,
+	[IRQ_DA8XX_I2CINT0]		= 7,
+	[IRQ_DA8XX_MMCSDINT0]		= 7,
+	[IRQ_DA8XX_MMCSDINT1]		= 7,
+	[IRQ_DA8XX_ALLINT0]		= 7,
+	[IRQ_DA8XX_RTC]			= 7,
+	[IRQ_DA8XX_SPINT0]		= 7,
+	[IRQ_DA8XX_TINT12_0]		= 7,
+	[IRQ_DA8XX_TINT34_0]		= 7,
+	[IRQ_DA8XX_TINT12_1]		= 7,
+	[IRQ_DA8XX_TINT34_1]		= 7,
+	[IRQ_DA8XX_UARTINT0]		= 7,
+	[IRQ_DA8XX_KEYMGRINT]		= 7,
+	[IRQ_DA8XX_SECINT]		= 7,
+	[IRQ_DA8XX_SECKEYERR]		= 7,
+	[IRQ_DA8XX_MPUERR]		= 7,
+	[IRQ_DA8XX_IOPUERR]		= 7,
+	[IRQ_DA8XX_BOOTCFGERR]		= 7,
+	[IRQ_DA8XX_CHIPINT0]		= 7,
+	[IRQ_DA8XX_CHIPINT1]		= 7,
+	[IRQ_DA8XX_CHIPINT2]		= 7,
+	[IRQ_DA8XX_CHIPINT3]		= 7,
+	[IRQ_DA8XX_TCERRINT1]		= 7,
+	[IRQ_DA8XX_C0_RX_THRESH_PULSE]	= 7,
+	[IRQ_DA8XX_C0_RX_PULSE]		= 7,
+	[IRQ_DA8XX_C0_TX_PULSE]		= 7,
+	[IRQ_DA8XX_C0_MISC_PULSE]	= 7,
+	[IRQ_DA8XX_C1_RX_THRESH_PULSE]	= 7,
+	[IRQ_DA8XX_C1_RX_PULSE]		= 7,
+	[IRQ_DA8XX_C1_TX_PULSE]		= 7,
+	[IRQ_DA8XX_C1_MISC_PULSE]	= 7,
+	[IRQ_DA8XX_MEMERR]		= 7,
+	[IRQ_DA8XX_GPIO0]		= 7,
+	[IRQ_DA8XX_GPIO1]		= 7,
+	[IRQ_DA8XX_GPIO2]		= 7,
+	[IRQ_DA8XX_GPIO3]		= 7,
+	[IRQ_DA8XX_GPIO4]		= 7,
+	[IRQ_DA8XX_GPIO5]		= 7,
+	[IRQ_DA8XX_GPIO6]		= 7,
+	[IRQ_DA8XX_GPIO7]		= 7,
+	[IRQ_DA8XX_GPIO8]		= 7,
+	[IRQ_DA8XX_I2CINT1]		= 7,
+	[IRQ_DA8XX_LCDINT]		= 7,
+	[IRQ_DA8XX_UARTINT1]		= 7,
+	[IRQ_DA8XX_MCASPINT]		= 7,
+	[IRQ_DA8XX_ALLINT1]		= 7,
+	[IRQ_DA8XX_SPINT1]		= 7,
+	[IRQ_DA8XX_UHPI_INT1]		= 7,
+	[IRQ_DA8XX_USB_INT]		= 7,
+	[IRQ_DA8XX_IRQN]		= 7,
+	[IRQ_DA8XX_RWAKEUP]		= 7,
+	[IRQ_DA8XX_UARTINT2]		= 7,
+	[IRQ_DA8XX_DFTSSINT]		= 7,
+	[IRQ_DA8XX_EHRPWM0]		= 7,
+	[IRQ_DA8XX_EHRPWM0TZ]		= 7,
+	[IRQ_DA8XX_EHRPWM1]		= 7,
+	[IRQ_DA8XX_EHRPWM1TZ]		= 7,
+	[IRQ_DA8XX_EHRPWM2]		= 7,
+	[IRQ_DA8XX_EHRPWM2TZ]		= 7,
+	[IRQ_DA8XX_ECAP0]		= 7,
+	[IRQ_DA8XX_ECAP1]		= 7,
+	[IRQ_DA8XX_ECAP2]		= 7,
+	[IRQ_DA8XX_EQEP0]		= 7,
+	[IRQ_DA8XX_EQEP1]		= 7,
+	[IRQ_DA8XX_T12CMPINT0_0]	= 7,
+	[IRQ_DA8XX_T12CMPINT1_0]	= 7,
+	[IRQ_DA8XX_T12CMPINT2_0]	= 7,
+	[IRQ_DA8XX_T12CMPINT3_0]	= 7,
+	[IRQ_DA8XX_T12CMPINT4_0]	= 7,
+	[IRQ_DA8XX_T12CMPINT5_0]	= 7,
+	[IRQ_DA8XX_T12CMPINT6_0]	= 7,
+	[IRQ_DA8XX_T12CMPINT7_0]	= 7,
+	[IRQ_DA8XX_T12CMPINT0_1]	= 7,
+	[IRQ_DA8XX_T12CMPINT1_1]	= 7,
+	[IRQ_DA8XX_T12CMPINT2_1]	= 7,
+	[IRQ_DA8XX_T12CMPINT3_1]	= 7,
+	[IRQ_DA8XX_T12CMPINT4_1]	= 7,
+	[IRQ_DA8XX_T12CMPINT5_1]	= 7,
+	[IRQ_DA8XX_T12CMPINT6_1]	= 7,
+	[IRQ_DA8XX_T12CMPINT7_1]	= 7,
+	[IRQ_DA8XX_ARMCLKSTOPREQ]	= 7,
+};
+
+static __init void da8xx_evm_irq_init(void)
+{
+	da8xx_irq_init(da8xx_evm_default_priorities);
+}
+
+static __init void da8xx_evm_psc_init(void)
+{
+	davinci_psc_config(DAVINCI_GPSC_ARMDOMAIN, 0, DA8XX_LPSC0_TPCC, 1);
+	davinci_psc_config(DAVINCI_GPSC_ARMDOMAIN, 0, DA8XX_LPSC0_TPTC0, 1);
+	davinci_psc_config(DAVINCI_GPSC_ARMDOMAIN, 0, DA8XX_LPSC0_TPTC1, 1);
+	davinci_psc_config(DAVINCI_GPSC_ARMDOMAIN, 0, DA8XX_LPSC0_AINTC, 1);
+	davinci_psc_config(DAVINCI_GPSC_ARMDOMAIN, 0, DA8XX_LPSC0_ARM_RAM_ROM,
+			   1);
+	davinci_psc_config(DAVINCI_GPSC_ARMDOMAIN, 0, DA8XX_LPSC0_SECU_MGR, 1);
+	davinci_psc_config(DAVINCI_GPSC_ARMDOMAIN, 0, DA8XX_LPSC0_SCR0_SS, 1);
+	davinci_psc_config(DAVINCI_GPSC_ARMDOMAIN, 0, DA8XX_LPSC0_SCR1_SS, 1);
+	davinci_psc_config(DAVINCI_GPSC_ARMDOMAIN, 0, DA8XX_LPSC0_SCR2_SS, 1);
+	davinci_psc_config(DAVINCI_GPSC_ARMDOMAIN, 0, DA8XX_LPSC0_DMAX, 1);
+#if defined(CONFIG_TI_CPPI41) || defined(CONFIG_TI_CPPI41_MODULE)
+	davinci_psc_config(DAVINCI_GPSC_ARMDOMAIN, 1, DA8XX_LPSC1_USB20, 1);
+#endif
+#ifdef	CONFIG_INPUT_EQEP
+	davinci_psc_config(DAVINCI_GPSC_ARMDOMAIN, 1, DA8XX_LPSC1_EQEP, 1);
+#endif
+}
+
+static void __init da8xx_evm_map_io(void)
+{
+	da8xx_map_common_io();
+
+	/* UART clock needs to be ready otherwise kgdbwait won't work */
+	da8xx_uart_clk_init(DAVINCI_DA8XX_UART_CLK);
+	da8xx_kgdb_init();
+
+	/* Initialize the DA8XX EVM board settigs */
+	da8xx_init_common_hw();
+	da8xx_evm_psc_init();
+}
+
+#ifdef CONFIG_SERIAL_8250_CONSOLE
+static int __init da8xx_evm_console_init(void)
+{
+	return add_preferred_console("ttyS", 2, "115200");
+}
+console_initcall(da8xx_evm_console_init);
+#endif
+
+MACHINE_START(DA8XX_EVM, "DaVinci DA8XX EVM")
+	.phys_io	=  IO_PHYS,
+	.io_pg_offst	= (IO_VIRT >> 18) & 0xfffc,
+	.boot_params	= DA8XX_DDR_BASE + 0x100,
+	.map_io		= da8xx_evm_map_io,
+	.init_irq	= da8xx_evm_irq_init,
+	.timer		= &davinci_timer,
+	.init_machine	= da8xx_evm_init,
+MACHINE_END
Index: linux-2.6.18/arch/arm/tools/mach-types
===================================================================
--- linux-2.6.18.orig/arch/arm/tools/mach-types
+++ linux-2.6.18/arch/arm/tools/mach-types
@@ -1160,3 +1160,4 @@ deisterdca		MACH_DEISTERDCA		DEISTERDCA	
 realview_pb1176		MACH_REALVIEW_PB1176	REALVIEW_PB1176		1504
 davinci_dm6467_evm      MACH_DAVINCI_DM6467_EVM DAVINCI_DM6467_EVM      1380
 davinci_dm355_evm	MACH_DAVINCI_DM355_EVM	DAVINCI_DM355_EVM	1381
+davinci_da8xx_evm	MACH_DA8XX_EVM		DA8XX_EVM		1781
Index: linux-2.6.18/include/asm-arm/arch-davinci/i2c-client.h
===================================================================
--- linux-2.6.18.orig/include/asm-arm/arch-davinci/i2c-client.h
+++ linux-2.6.18/include/asm-arm/arch-davinci/i2c-client.h
@@ -38,7 +38,10 @@ enum i2c_expander_pins {
 	CIR_DEMOD_DM646X = 4,
 	CIR_MOD_DM646X = 5,
 	I2C_INT_DM646X = 6,
-	USB_FB_DM646X = 7
+	USB_FB_DM646X = 7,
+	/* DA8xx UI board expander */
+	MUX_MODE_DA8XX = 6,
+	SPI_MODE_DA8XX = 7,
 };
 
 struct davinci_i2c_expander {
Index: linux-2.6.18/mvl_patches/pro50-2153.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-2153.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2009 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(2153);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

