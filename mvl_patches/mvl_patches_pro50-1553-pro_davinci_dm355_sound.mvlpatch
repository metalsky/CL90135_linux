#! /usr/bin/env bash
# Patch: -pro_davinci_dm355_sound
# Date: Fri Sep 19 13:59:10 2008
# Source: MontaVista Software, Inc.
# MR: 27880
# Type: Integration
# Disposition: Need to submit to linux-davinci-2.6.git
# Signed-off-by: Steve Chen <schen@mvista.com>
# Description:
#    This patch contains the following updates
#     1. Enable sound support for DM355.
#     2. Increase the default sound volume.
#     3. Fix "Division by zero" in kernel error.
#     4. Add interfaces to select recording input between line1, line2, and MIC3.
#     5. default POP control to the same value as Pro 4.0.
# 

PATCHNUM=1553
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 27880
Type: Integration
Disposition: Need to submit to linux-davinci-2.6.git
Signed-off-by: Steve Chen <schen@mvista.com>
Description:
   This patch contains the following updates
    1. Enable sound support for DM355.
    2. Increase the default sound volume.
    3. Fix "Division by zero" in kernel error.
    4. Add interfaces to select recording input between line1, line2, and MIC3.
    5. default POP control to the same value as Pro 4.0.

Index: linux-2.6.18/sound/soc/codecs/tlv320aic3x.c
===================================================================
--- linux-2.6.18.orig/sound/soc/codecs/tlv320aic3x.c
+++ linux-2.6.18/sound/soc/codecs/tlv320aic3x.c
@@ -279,6 +279,33 @@ static const struct snd_kcontrol_new aic
 	/* Input */
 	SOC_DOUBLE_R("PGA Capture Volume", LADC_VOL, RADC_VOL, 0, 0x7f, 0),
 	SOC_DOUBLE_R("PGA Capture Switch", LADC_VOL, RADC_VOL, 7, 0x01, 1),
+
+	SOC_SINGLE("Left MIC to Left Input Volume", MIC3LR_2_LADC_CTRL,
+		   4, 0x0f, 1),
+	SOC_SINGLE("Right MIC to Left Input Volume", MIC3LR_2_LADC_CTRL,
+		   0, 0x0f, 1),
+	SOC_SINGLE("Left Line1 to Left Input Volume", LINE1L_2_LADC_CTRL,
+		   3, 0x0f, 1),
+	SOC_SINGLE("Left Line2 to Left Input Volume", LINE2L_2_LADC_CTRL,
+		   3, 0x0f, 1),
+
+	SOC_SINGLE("Left MIC to Right Input Volume", MIC3LR_2_RADC_CTRL,
+		   4, 0x0f, 1),
+	SOC_SINGLE("Right MIC to Right Input Volume", MIC3LR_2_RADC_CTRL,
+		   0, 0x0f, 1),
+	SOC_SINGLE("Right Line1 to Right Input Volume", LINE1R_2_RADC_CTRL,
+		   3, 0x0f, 1),
+	SOC_SINGLE("Right Line2 to Right Input Volume", LINE2R_2_RADC_CTRL,
+		   3, 0x0f, 1),
+
+	/* cross mix */
+	SOC_SINGLE("Right Line1 to Left Input Volume", LINE1R_2_LADC_CTRL,
+		   3, 0x0f, 1),
+	SOC_SINGLE("Left Line1 to Right Input Volume", LINE1L_2_RADC_CTRL,
+		   3, 0x0f, 1),
+
+	/* enable stereo */
+	SOC_SINGLE("Enable Stereo Switch", DAC_PWR, 6, 0x01, 0),
 };
 
 /* add non dapm controls */
@@ -331,16 +358,18 @@ static const struct snd_kcontrol_new aic
 
 /* Left PGA Mixer */
 static const struct snd_kcontrol_new aic3x_left_pga_mixer_controls[] = {
-	SOC_DAPM_SINGLE_AIC3X("Line1L Switch", LINE1L_2_LADC_CTRL, 3, 1, 1),
-	SOC_DAPM_SINGLE_AIC3X("Line2L Switch", LINE2L_2_LADC_CTRL, 3, 1, 1),
-	SOC_DAPM_SINGLE_AIC3X("Mic3L Switch", MIC3LR_2_LADC_CTRL, 4, 1, 1),
+	SOC_DAPM_SINGLE_AIC3X("Line1L Switch", LINE1L_2_LADC_CTRL, 3, 0xF, 1),
+	SOC_DAPM_SINGLE_AIC3X("Line2L Switch", LINE2L_2_LADC_CTRL, 3, 0xF, 1),
+	SOC_DAPM_SINGLE_AIC3X("Mic3LL Switch", MIC3LR_2_LADC_CTRL, 4, 0xF, 1),
+	SOC_DAPM_SINGLE_AIC3X("Mic3RL Switch", MIC3LR_2_LADC_CTRL, 0, 0xF, 1),
 };
 
 /* Right PGA Mixer */
 static const struct snd_kcontrol_new aic3x_right_pga_mixer_controls[] = {
-	SOC_DAPM_SINGLE_AIC3X("Line1R Switch", LINE1R_2_RADC_CTRL, 3, 1, 1),
-	SOC_DAPM_SINGLE_AIC3X("Line2R Switch", LINE2R_2_RADC_CTRL, 3, 1, 1),
-	SOC_DAPM_SINGLE_AIC3X("Mic3R Switch", MIC3LR_2_RADC_CTRL, 0, 1, 1),
+	SOC_DAPM_SINGLE_AIC3X("Line1R Switch", LINE1R_2_RADC_CTRL, 3, 0xF, 1),
+	SOC_DAPM_SINGLE_AIC3X("Line2R Switch", LINE2R_2_RADC_CTRL, 3, 0xF, 1),
+	SOC_DAPM_SINGLE_AIC3X("Mic3LR Switch", MIC3LR_2_RADC_CTRL, 4, 0xF, 1),
+	SOC_DAPM_SINGLE_AIC3X("Mic3RR Switch", MIC3LR_2_RADC_CTRL, 0, 0xF, 1),
 };
 
 /* Left Line1 Mux */
@@ -552,7 +581,8 @@ static const char *intercon[][3] = {
 
 	{"Left PGA Mixer", "Line1L Switch", "Left Line1L Mux"},
 	{"Left PGA Mixer", "Line2L Switch", "Left Line2L Mux"},
-	{"Left PGA Mixer", "Mic3L Switch", "MIC3L"},
+	{"Left PGA Mixer", "Mic3LL Switch", "MIC3L"},
+	{"Left PGA Mixer", "Mic3RL Switch", "MIC3R"},
 
 	{"Left ADC", NULL, "Left PGA Mixer"},
 
@@ -565,7 +595,8 @@ static const char *intercon[][3] = {
 
 	{"Right PGA Mixer", "Line1R Switch", "Right Line1R Mux"},
 	{"Right PGA Mixer", "Line2R Switch", "Right Line2R Mux"},
-	{"Right PGA Mixer", "Mic3R Switch", "MIC3R"},
+	{"Right PGA Mixer", "Mic3LR Switch", "MIC3L"},
+	{"Right PGA Mixer", "Mic3RR Switch", "MIC3R"},
 
 	{"Right ADC", NULL, "Right PGA Mixer"},
 
@@ -662,33 +693,43 @@ struct aic3x_rate_divs {
 static const struct aic3x_rate_divs aic3x_divs[] = {
 	/* 8k */
 	{22579200, 8000, 48000, 0xa, 8, 7075},
+	{27000000, 8000, 48000, 0xa, 7, 2818},
 	{33868800, 8000, 48000, 0xa, 5, 8049},
 	/* 11.025k */
 	{22579200, 11025, 44100, 0x6, 8, 0},
+	{27000000, 11025, 44100, 0x6, 6, 6901},
 	{33868800, 11025, 44100, 0x6, 5, 3333},
 	/* 16k */
 	{22579200, 16000, 48000, 0x4, 8, 7075},
+	{27000000, 16000, 48000, 0x4, 7, 2818},
 	{33868800, 16000, 48000, 0x4, 5, 8049},
 	/* 22.05k */
 	{22579200, 22050, 44100, 0x2, 8, 0},
+	{27000000, 11025, 44100, 0x2, 6, 6901},
 	{33868800, 22050, 44100, 0x2, 5, 3333},
 	/* 32k */
 	{22579200, 32000, 48000, 0x1, 8, 7075},
+	{27000000, 32000, 48000, 0x1, 7, 2818},
 	{33868800, 32000, 48000, 0x1, 5, 8049},
 	/* 44.1k */
 	{22579200, 44100, 44100, 0x0, 8, 0},
+	{27000000, 44100, 44100, 0x0, 6, 6901},
 	{33868800, 44100, 44100, 0x0, 5, 3333},
 	/* 48k */
 	{22579200, 48000, 48000, 0x0, 8, 7075},
+	{27000000, 48000, 48000, 0x0, 7, 2818},
 	{33868800, 48000, 48000, 0x0, 5, 8049},
 	/* 64k */
 	{22579200, 96000, 96000, 0x1, 8, 7075},
+	{27000000, 96000, 96000, 0x1, 7, 2818},
 	{33868800, 96000, 96000, 0x1, 5, 8049},
 	/* 88.2k */
 	{22579200, 88200, 88200, 0x0, 8, 0},
+	{27000000, 88200, 88200, 0x0, 6, 6901},
 	{33868800, 88200, 88200, 0x0, 5, 3333},
 	/* 96k */
 	{22579200, 96000, 96000, 0x0, 8, 7075},
+	{27000000, 96000, 96000, 0x0, 7, 2818},
 	{33868800, 96000, 96000, 0x0, 5, 8049},
 };
 
@@ -809,6 +850,7 @@ static int aic3x_set_dai_sysclk(struct s
 
 	switch (freq) {
 	case 22579200:
+	case 27000000:
 	case 33868800:
 		aic3x->sysclk = freq;
 		return 0;
@@ -1023,6 +1065,8 @@ static int aic3x_init(struct snd_soc_dev
 		goto pcm_err;
 	}
 
+	aic3x_write(codec, HPOUT_POP_REDUCTION, 0x6c);
+
 	/* DAC default volume and mute */
 	aic3x_write(codec, LDAC_VOL, DEFAULT_VOL | MUTE_ON);
 	aic3x_write(codec, RDAC_VOL, DEFAULT_VOL | MUTE_ON);
@@ -1058,6 +1102,11 @@ static int aic3x_init(struct snd_soc_dev
 	/* ADC default volume and unmute */
 	aic3x_write(codec, LADC_VOL, DEFAULT_GAIN);
 	aic3x_write(codec, RADC_VOL, DEFAULT_GAIN);
+
+	/* By default route MIC to ADC PGA mixer */
+	aic3x_write(codec, MIC3LR_2_LADC_CTRL, 0x0F);
+	aic3x_write(codec, MIC3LR_2_RADC_CTRL, 0xF0);
+
 	/* By default route Line1 to ADC PGA mixer */
 	aic3x_write(codec, LINE1L_2_LADC_CTRL, 0x0);
 	aic3x_write(codec, LINE1R_2_RADC_CTRL, 0x0);
Index: linux-2.6.18/sound/soc/davinci/davinci-i2s.c
===================================================================
--- linux-2.6.18.orig/sound/soc/davinci/davinci-i2s.c
+++ linux-2.6.18/sound/soc/davinci/davinci-i2s.c
@@ -213,8 +213,9 @@ static int davinci_i2s_hw_params(struct 
 				 struct snd_pcm_hw_params *params)
 {
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct davinci_pcm_dma_params *dma_params = rtd->dai->cpu_dai->dma_data;
 	struct davinci_mcbsp_dev *dev = rtd->dai->cpu_dai->private_data;
+	struct davinci_pcm_dma_params *dma_params =
+					dev->dma_params[substream->stream];
 	struct snd_interval *i = NULL;
 	int mcbsp_word_length;
 	u32 w;
@@ -327,7 +328,9 @@ static int davinci_i2s_probe(struct plat
 
 	cpu_dai->private_data = dev;
 
-	dev->clk = clk_get(&pdev->dev, "McBSPCLK");
+	pdata = pdev->dev.platform_data;
+	dev->clk = clk_get(&pdev->dev, pdata->clk_name);
+
 	if (IS_ERR(dev->clk)) {
 		ret = -ENODEV;
 		goto err_free_mem;
@@ -335,7 +338,6 @@ static int davinci_i2s_probe(struct plat
 	clk_enable(dev->clk);
 
 	dev->base = (void __iomem *)IO_ADDRESS(mem->start);
-	pdata = pdev->dev.platform_data;
 
 	dev->dma_params[SNDRV_PCM_STREAM_PLAYBACK] = &davinci_i2s_pcm_out;
 	dev->dma_params[SNDRV_PCM_STREAM_PLAYBACK]->channel = pdata->tx_dma_ch;
@@ -384,12 +386,12 @@ struct snd_soc_cpu_dai davinci_i2s_dai =
 	.probe = davinci_i2s_probe,
 	.remove = davinci_i2s_remove,
 	.playback = {
-		.channels_min = 2,
+		.channels_min = 1,
 		.channels_max = 2,
 		.rates = DAVINCI_I2S_RATES,
 		.formats = SNDRV_PCM_FMTBIT_S16_LE,},
 	.capture = {
-		.channels_min = 2,
+		.channels_min = 1,
 		.channels_max = 2,
 		.rates = DAVINCI_I2S_RATES,
 		.formats = SNDRV_PCM_FMTBIT_S16_LE,},
Index: linux-2.6.18/sound/soc/davinci/Kconfig
===================================================================
--- linux-2.6.18.orig/sound/soc/davinci/Kconfig
+++ linux-2.6.18/sound/soc/davinci/Kconfig
@@ -9,7 +9,7 @@ config SND_DAVINCI_SOC
 config SND_DAVINCI_SOC_I2S
 	tristate
 
-config SND_DAVINCI_SOC_EVM
+config SND_DM644X_SOC_EVM
 	tristate "SoC Audio support for DaVinci EVM"
 	depends on SND_DAVINCI_SOC && MACH_DAVINCI_EVM
 	select SND_DAVINCI_SOC_I2S
@@ -17,3 +17,12 @@ config SND_DAVINCI_SOC_EVM
 	help
 	  Say Y if you want to add support for SoC audio on TI
 	  DaVinci EVM platform.
+
+config SND_DM355_SOC_EVM
+	tristate "SoC Audio support for DaVinci DM355 EVM"
+	depends on SND_DAVINCI_SOC && MACH_DAVINCI_DM355_EVM
+	select SND_DAVINCI_SOC_I2S
+	select SND_SOC_TLV320AIC3X
+	help
+	  Say Y if you want to add support for SoC audio on TI
+	  DaVinci DM355 EVM platform.
Index: linux-2.6.18/sound/soc/davinci/Makefile
===================================================================
--- linux-2.6.18.orig/sound/soc/davinci/Makefile
+++ linux-2.6.18/sound/soc/davinci/Makefile
@@ -8,4 +8,5 @@ obj-$(CONFIG_SND_DAVINCI_SOC_I2S) += snd
 # DAVINCI Machine Support
 snd-soc-evm-objs := davinci-evm.o
 
-obj-$(CONFIG_SND_DAVINCI_SOC_EVM) += snd-soc-evm.o
+obj-$(CONFIG_SND_DM644X_SOC_EVM) += snd-soc-evm.o
+obj-$(CONFIG_SND_DM355_SOC_EVM) += snd-soc-evm.o
Index: linux-2.6.18/sound/soc/davinci/davinci-evm.c
===================================================================
--- linux-2.6.18.orig/sound/soc/davinci/davinci-evm.c
+++ linux-2.6.18/sound/soc/davinci/davinci-evm.c
@@ -28,7 +28,10 @@
 #include "davinci-pcm.h"
 #include "davinci-i2s.h"
 
-#define EVM_CODEC_CLOCK 22579200
+#define DM644X_EVM_CODEC_CLOCK 22579200
+#define DM355_EVM_CODEC_CLOCK 27000000
+
+static unsigned int evm_codec_clock;
 
 static int evm_hw_params(struct snd_pcm_substream *substream,
 			 struct snd_pcm_hw_params *params)
@@ -51,8 +54,9 @@ static int evm_hw_params(struct snd_pcm_
 		return ret;
 
 	/* set the codec system clock */
-	ret = codec_dai->dai_ops.set_sysclk(codec_dai, 0, EVM_CODEC_CLOCK,
+	ret = codec_dai->dai_ops.set_sysclk(codec_dai, 0, evm_codec_clock,
 					    SND_SOC_CLOCK_OUT);
+
 	if (ret < 0)
 		return ret;
 
@@ -135,27 +139,27 @@ static struct snd_soc_dai_link evm_dai =
 	.ops = &evm_ops,
 };
 
-/* davinci-evm audio machine driver */
-static struct snd_soc_machine snd_soc_machine_evm = {
+/* davinci dm644x evm audio machine driver */
+static struct snd_soc_machine dm646x_snd_soc_machine_evm = {
 	.name = "DaVinci EVM",
 	.dai_link = &evm_dai,
 	.num_links = 1,
 };
 
 /* evm audio private data */
-static struct aic3x_setup_data evm_aic3x_setup = {
+static struct aic3x_setup_data dm644x_evm_aic3x_setup = {
 	.i2c_address = 0x1b,
 };
 
 /* evm audio subsystem */
-static struct snd_soc_device evm_snd_devdata = {
-	.machine = &snd_soc_machine_evm,
+static struct snd_soc_device dm644x_evm_snd_devdata = {
+	.machine = &dm646x_snd_soc_machine_evm,
 	.platform = &davinci_soc_platform,
 	.codec_dev = &soc_codec_dev_aic3x,
-	.codec_data = &evm_aic3x_setup,
+	.codec_data = &dm644x_evm_aic3x_setup,
 };
 
-static struct resource evm_snd_resources[] = {
+static struct resource dm644x_evm_snd_resources[] = {
 	{
 		.start = DAVINCI_MCBSP_BASE,
 		.end = DAVINCI_MCBSP_BASE + SZ_8K - 1,
@@ -163,27 +167,80 @@ static struct resource evm_snd_resources
 	},
 };
 
-static struct evm_snd_platform_data evm_snd_data = {
+static struct evm_snd_platform_data dm644x_evm_snd_data = {
+	.clk_name	= "McBSPCLK",
 	.tx_dma_ch	= DM644X_DMACH_MCBSP_TX,
 	.rx_dma_ch	= DM644X_DMACH_MCBSP_RX,
 };
 
+/* davinci dm355 evm audio machine driver */
+static struct snd_soc_machine dm355_snd_soc_machine_evm = {
+	.name = "DaVinci DM355 EVM",
+	.dai_link = &evm_dai,
+	.num_links = 1,
+};
+
+/* evm audio private data */
+static struct aic3x_setup_data dm355_evm_aic3x_setup = {
+	.i2c_address = 0x1b,
+};
+
+/* evm audio subsystem */
+static struct snd_soc_device dm355_evm_snd_devdata = {
+	.machine = &dm355_snd_soc_machine_evm,
+	.platform = &davinci_soc_platform,
+	.codec_dev = &soc_codec_dev_aic3x,
+	.codec_data = &dm355_evm_aic3x_setup,
+};
+
+static struct resource dm355_evm_snd_resources[] = {
+	{
+		.start = DM355_MCBSP1_BASE,
+		.end = DM355_MCBSP1_BASE + SZ_8K - 1,
+		.flags = IORESOURCE_MEM,
+	},
+};
+
+static struct evm_snd_platform_data dm355_evm_snd_data = {
+	.clk_name	= "McBSPCLK1",
+	.tx_dma_ch	= DM355_DMA_MCBSP1_TX,
+	.rx_dma_ch	= DM355_DMA_MCBSP1_RX,
+};
+
 static struct platform_device *evm_snd_device;
 
 static int __init evm_init(void)
 {
 	int ret;
+	int res_size;
+	struct snd_soc_device *evm_snd_devdata;
+	struct resource *evm_snd_resources;
+	struct evm_snd_platform_data *evm_snd_data;
 
 	evm_snd_device = platform_device_alloc("soc-audio", 0);
 	if (!evm_snd_device)
 		return -ENOMEM;
 
-	platform_set_drvdata(evm_snd_device, &evm_snd_devdata);
-	evm_snd_devdata.dev = &evm_snd_device->dev;
-	evm_snd_device->dev.platform_data = &evm_snd_data;
+	if (cpu_is_davinci_dm355()) {
+		evm_snd_devdata = &dm355_evm_snd_devdata;
+		evm_snd_resources = dm355_evm_snd_resources;
+		res_size = ARRAY_SIZE(dm355_evm_snd_resources);
+		evm_snd_data = &dm355_evm_snd_data;
+		evm_codec_clock = DM355_EVM_CODEC_CLOCK;
+	} else {
+		evm_snd_devdata = &dm644x_evm_snd_devdata;
+		evm_snd_resources = dm644x_evm_snd_resources;
+		res_size = ARRAY_SIZE(dm644x_evm_snd_resources);
+		evm_snd_data = &dm644x_evm_snd_data;
+		evm_codec_clock = DM644X_EVM_CODEC_CLOCK;
+	}
+
+	platform_set_drvdata(evm_snd_device, evm_snd_devdata);
+	evm_snd_devdata->dev = &evm_snd_device->dev;
+	evm_snd_device->dev.platform_data = evm_snd_data;
 
 	ret = platform_device_add_resources(evm_snd_device, evm_snd_resources,
-					    ARRAY_SIZE(evm_snd_resources));
+					    res_size);
 	if (ret) {
 		platform_device_put(evm_snd_device);
 		return ret;
Index: linux-2.6.18/sound/soc/davinci/davinci-pcm.h
===================================================================
--- linux-2.6.18.orig/sound/soc/davinci/davinci-pcm.h
+++ linux-2.6.18/sound/soc/davinci/davinci-pcm.h
@@ -20,6 +20,7 @@ struct davinci_pcm_dma_params {
 };
 
 struct evm_snd_platform_data {
+	char *clk_name;
 	int tx_dma_ch;
 	int rx_dma_ch;
 };
Index: linux-2.6.18/sound/soc/codecs/tlv320aic3x.h
===================================================================
--- linux-2.6.18.orig/sound/soc/codecs/tlv320aic3x.h
+++ linux-2.6.18/sound/soc/codecs/tlv320aic3x.h
@@ -47,6 +47,9 @@
 /* Line1 Input control registers */
 #define LINE1L_2_LADC_CTRL		19
 #define LINE1R_2_RADC_CTRL		22
+/* Line1 Input cross control registers */
+#define LINE1R_2_LADC_CTRL		21
+#define LINE1L_2_RADC_CTRL		24
 /* Line2 Input control registers */
 #define LINE2L_2_LADC_CTRL		20
 #define LINE2R_2_RADC_CTRL		23
@@ -167,9 +170,9 @@
 #define INVERT_VOL(val)   (0x7f - val)
 
 /* Default output volume (inverted) */
-#define DEFAULT_VOL     INVERT_VOL(0x50)
+#define DEFAULT_VOL     INVERT_VOL(0x60)
 /* Default input volume */
-#define DEFAULT_GAIN    0x20
+#define DEFAULT_GAIN    0x50
 
 struct aic3x_setup_data {
 	unsigned short i2c_address;
Index: linux-2.6.18/mvl_patches/pro50-1553.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1553.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1553);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

