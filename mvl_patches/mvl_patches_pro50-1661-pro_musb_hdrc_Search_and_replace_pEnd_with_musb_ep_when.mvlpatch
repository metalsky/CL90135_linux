#! /usr/bin/env bash
# Patch: -pro_musb_hdrc_Search_and_replace_pEnd_with_musb_ep_when
# Date: Fri Sep 19 14:06:46 2008
# From 1867243e870c6c6ffa7bfdd1faba1f4a5de2950a Mon Sep 17 00:00:00 2001
# From: Tony Lindgren <tony@atomide.com>
# Date: Mon, 13 Aug 2007 02:44:37 -0700
# Subject: [PATCH] musb_hdrc: Search and replace pEnd with musb_ep when struct musb_hw_ep
# 
# Search and replace pEnd with musb_ep when struct musb_hw_ep
# 
# Signed-off-by: Tony Lindgren <tony@atomide.com>
# (cherry picked from commit 5b895a5c88dd07f14f0fbdc7e86893c70d8b5c90)

PATCHNUM=1661
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
From 1867243e870c6c6ffa7bfdd1faba1f4a5de2950a Mon Sep 17 00:00:00 2001
From: Tony Lindgren <tony@atomide.com>
Date: Mon, 13 Aug 2007 02:44:37 -0700
Subject: [PATCH] musb_hdrc: Search and replace pEnd with musb_ep when struct musb_hw_ep

Search and replace pEnd with musb_ep when struct musb_hw_ep

Signed-off-by: Tony Lindgren <tony@atomide.com>
(cherry picked from commit 5b895a5c88dd07f14f0fbdc7e86893c70d8b5c90)
Index: linux-2.6.18/drivers/usb/musb/cppi_dma.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/cppi_dma.c
+++ linux-2.6.18/drivers/usb/musb/cppi_dma.c
@@ -1141,7 +1141,7 @@ void cppi_completion(struct musb *musb, 
 	u8			bReqComplete;
 	struct cppi		*cppi;
 	struct cppi_descriptor	*bdPtr;
-	struct musb_hw_ep	*pEnd = NULL;
+	struct musb_hw_ep	*hw_ep = NULL;
 
 	cppi = container_of(musb->pDmaController, struct cppi, Controller);
 
@@ -1227,7 +1227,7 @@ void cppi_completion(struct musb *musb, 
 					txChannel->Channel.bStatus =
 							MGC_DMA_STATUS_FREE;
 
-					pEnd = txChannel->hw_ep;
+					hw_ep = txChannel->hw_ep;
 
 					txChannel->Channel.dwActualLength =
 						txChannel->actualLen;
@@ -1245,7 +1245,7 @@ void cppi_completion(struct musb *musb, 
 						 */
 						int	csr;
 
-						csr = musb_readw(pEnd->regs,
+						csr = musb_readw(hw_ep->regs,
 							MGC_O_HDRC_TXCSR);
 						if (csr & MGC_M_TXCSR_TXPKTRDY)
 #endif
@@ -1290,7 +1290,7 @@ void cppi_completion(struct musb *musb, 
 			/* all segments completed! */
 			rxChannel->Channel.bStatus = MGC_DMA_STATUS_FREE;
 
-			pEnd = rxChannel->hw_ep;
+			hw_ep = rxChannel->hw_ep;
 
 			rxChannel->Channel.dwActualLength =
 					rxChannel->actualLen;
Index: linux-2.6.18/drivers/usb/musb/musb_host.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musb_host.c
+++ linux-2.6.18/drivers/usb/musb/musb_host.c
@@ -174,10 +174,10 @@ musb_start_urb(struct musb *musb, int is
 	void			*pBuffer;
 	void __iomem		*pBase =  musb->pRegs;
 	struct urb		*urb = next_urb(qh);
-	struct musb_hw_ep	*pEnd = qh->hw_ep;
+	struct musb_hw_ep	*hw_ep = qh->hw_ep;
 	unsigned		nPipe = urb->pipe;
 	u8			bAddress = usb_pipedevice(nPipe);
-	int			bEnd = pEnd->bLocalEnd;
+	int			bEnd = hw_ep->bLocalEnd;
 
 	/* initialize software qh state */
 	qh->offset = 0;
@@ -188,7 +188,7 @@ musb_start_urb(struct musb *musb, int is
 	case USB_ENDPOINT_XFER_CONTROL:
 		/* control transfers always start with SETUP */
 		is_in = 0;
-		pEnd->out_qh = qh;
+		hw_ep->out_qh = qh;
 		musb->bEnd0Stage = MGC_END0_START;
 		pBuffer = urb->setup_packet;
 		dwLength = 8;
@@ -216,10 +216,10 @@ musb_start_urb(struct musb *musb, int is
 			bEnd, pBuffer, dwLength);
 
 	/* Configure endpoint */
-	if (is_in || pEnd->bIsSharedFifo)
-		pEnd->in_qh = qh;
+	if (is_in || hw_ep->bIsSharedFifo)
+		hw_ep->in_qh = qh;
 	else
-		pEnd->out_qh = qh;
+		hw_ep->out_qh = qh;
 	musb_ep_program(musb, bEnd, urb, !is_in, pBuffer, dwLength);
 
 	/* transmit may have more work: start it when it is time */
@@ -255,12 +255,12 @@ DBG(1,"SOF for %d\n", bEnd);
 	default:
 start:
 		DBG(4, "Start TX%d %s\n", bEnd,
-			pEnd->tx_channel ? "dma" : "pio");
+			hw_ep->tx_channel ? "dma" : "pio");
 
-		if (!pEnd->tx_channel)
-			musb_h_tx_start(pEnd);
+		if (!hw_ep->tx_channel)
+			musb_h_tx_start(hw_ep);
 		else if (is_cppi_enabled() || tusb_dma_omap())
-			cppi_host_txdma_start(pEnd);
+			cppi_host_txdma_start(hw_ep);
 	}
 }
 
@@ -425,19 +425,19 @@ musb_giveback(struct musb_qh *qh, struct
  */
 static void
 musb_advance_schedule(struct musb *musb, struct urb *urb,
-		struct musb_hw_ep *pEnd, int is_in)
+		struct musb_hw_ep *hw_ep, int is_in)
 {
 	struct musb_qh	*qh;
 
-	if (is_in || pEnd->bIsSharedFifo)
-		qh = pEnd->in_qh;
+	if (is_in || hw_ep->bIsSharedFifo)
+		qh = hw_ep->in_qh;
 	else
-		qh = pEnd->out_qh;
+		qh = hw_ep->out_qh;
 	qh = musb_giveback(qh, urb, 0);
 
 	if (qh && qh->is_ready && !list_empty(&qh->hep->urb_list)) {
 		DBG(4, "... next ep%d %cX urb %p\n",
-				pEnd->bLocalEnd, is_in ? 'R' : 'T',
+				hw_ep->bLocalEnd, is_in ? 'R' : 'T',
 				next_urb(qh));
 		musb_start_urb(musb, is_in, qh);
 	}
@@ -475,9 +475,9 @@ static u8 musb_host_packet_rx(struct mus
 	u8 bDone = FALSE;
 	u32			length;
 	int			do_flush = 0;
-	struct musb_hw_ep	*pEnd = musb->aLocalEnd + bEnd;
-	void __iomem		*epio = pEnd->regs;
-	struct musb_qh		*qh = pEnd->in_qh;
+	struct musb_hw_ep	*hw_ep = musb->aLocalEnd + bEnd;
+	void __iomem		*epio = hw_ep->regs;
+	struct musb_qh		*qh = hw_ep->in_qh;
 	int			nPipe = pUrb->pipe;
 	void			*buffer = pUrb->transfer_buffer;
 
@@ -542,12 +542,12 @@ static u8 musb_host_packet_rx(struct mus
 			pUrb->status = -EREMOTEIO;
 	}
 
-	musb_read_fifo(pEnd, length, pBuffer);
+	musb_read_fifo(hw_ep, length, pBuffer);
 
 	wCsr = musb_readw(epio, MGC_O_HDRC_RXCSR);
 	wCsr |= MGC_M_RXCSR_H_WZC_BITS;
 	if (unlikely(do_flush))
-		musb_h_flush_rxfifo(pEnd, wCsr);
+		musb_h_flush_rxfifo(hw_ep, wCsr);
 	else {
 		/* REVISIT this assumes AUTOCLEAR is never set */
 		wCsr &= ~(MGC_M_RXCSR_RXPKTRDY | MGC_M_RXCSR_H_REQPKT);
@@ -631,15 +631,15 @@ static void musb_ep_program(struct musb 
 	struct dma_channel	*pDmaChannel;
 	u8			bDmaOk;
 	void __iomem		*pBase = musb->pRegs;
-	struct musb_hw_ep	*pEnd = musb->aLocalEnd + bEnd;
-	void __iomem		*epio = pEnd->regs;
+	struct musb_hw_ep	*hw_ep = musb->aLocalEnd + bEnd;
+	void __iomem		*epio = hw_ep->regs;
 	struct musb_qh		*qh;
 	u16			wPacketSize;
 
-	if (!is_out || pEnd->bIsSharedFifo)
-		qh = pEnd->in_qh;
+	if (!is_out || hw_ep->bIsSharedFifo)
+		qh = hw_ep->in_qh;
 	else
-		qh = pEnd->out_qh;
+		qh = hw_ep->out_qh;
 
 	wPacketSize = qh->maxpacket;
 
@@ -656,14 +656,14 @@ static void musb_ep_program(struct musb 
 	/* candidate for DMA? */
 	pDmaController = musb->pDmaController;
 	if (is_dma_capable() && bEnd && pDmaController) {
-		pDmaChannel = is_out ? pEnd->tx_channel : pEnd->rx_channel;
+		pDmaChannel = is_out ? hw_ep->tx_channel : hw_ep->rx_channel;
 		if (!pDmaChannel) {
 			pDmaChannel = pDmaController->channel_alloc(
-					pDmaController, pEnd, is_out);
+					pDmaController, hw_ep, is_out);
 			if (is_out)
-				pEnd->tx_channel = pDmaChannel;
+				hw_ep->tx_channel = pDmaChannel;
 			else
-				pEnd->rx_channel = pDmaChannel;
+				hw_ep->rx_channel = pDmaChannel;
 		}
 	} else
 		pDmaChannel = NULL;
@@ -689,7 +689,7 @@ static void musb_ep_program(struct musb 
 			/* ASSERT:  TXCSR_DMAENAB was already cleared */
 
 			/* flush all old state, set default */
-			musb_h_tx_flush_fifo(pEnd);
+			musb_h_tx_flush_fifo(hw_ep);
 			csr &= ~(MGC_M_TXCSR_H_NAKTIMEOUT
 					| MGC_M_TXCSR_DMAMODE
 					| MGC_M_TXCSR_FRCDATATOG
@@ -740,7 +740,7 @@ static void musb_ep_program(struct musb 
 			if (can_bulk_split(musb, qh->type))
 				musb_writew(epio, MGC_O_HDRC_TXMAXP,
 					wPacketSize
-					| ((pEnd->wMaxPacketSizeTx /
+					| ((hw_ep->wMaxPacketSizeTx /
 						wPacketSize) - 1) << 11);
 			else
 				musb_writew(epio, MGC_O_HDRC_TXMAXP,
@@ -754,7 +754,7 @@ static void musb_ep_program(struct musb 
 		}
 
 		if (can_bulk_split(musb, qh->type))
-			wLoadCount = min((u32) pEnd->wMaxPacketSizeTx,
+			wLoadCount = min((u32) hw_ep->wMaxPacketSizeTx,
 						dwLength);
 		else
 			wLoadCount = min((u32) wPacketSize, dwLength);
@@ -801,9 +801,9 @@ static void musb_ep_program(struct musb 
 			} else {
 				pDmaController->channel_release(pDmaChannel);
 				if (is_out)
-					pEnd->tx_channel = NULL;
+					hw_ep->tx_channel = NULL;
 				else
-					pEnd->rx_channel = NULL;
+					hw_ep->rx_channel = NULL;
 				pDmaChannel = NULL;
 			}
 		}
@@ -841,7 +841,7 @@ static void musb_ep_program(struct musb 
 				wLoadCount = 0;
 			} else {
 				pDmaController->channel_release(pDmaChannel);
-				pDmaChannel = pEnd->tx_channel = NULL;
+				pDmaChannel = hw_ep->tx_channel = NULL;
 
 				/* REVISIT there's an error path here that
 				 * needs handling:  can't do dma, but
@@ -855,7 +855,7 @@ static void musb_ep_program(struct musb 
 
 			/* PIO to load FIFO */
 			qh->segsize = wLoadCount;
-			musb_write_fifo(pEnd, wLoadCount, pBuffer);
+			musb_write_fifo(hw_ep, wLoadCount, pBuffer);
 			wCsr = musb_readw(epio, MGC_O_HDRC_TXCSR);
 			wCsr &= ~(MGC_M_TXCSR_DMAENAB
 				| MGC_M_TXCSR_DMAMODE
@@ -874,8 +874,8 @@ static void musb_ep_program(struct musb 
 	} else {
 		u16	csr;
 
-		if (pEnd->rx_reinit) {
-			musb_rx_reinit(musb, qh, pEnd);
+		if (hw_ep->rx_reinit) {
+			musb_rx_reinit(musb, qh, hw_ep);
 
 			/* init new state: toggle and NYET, maybe DMA later */
 			if (usb_gettoggle(pUrb->dev, qh->epnum, 0))
@@ -887,13 +887,13 @@ static void musb_ep_program(struct musb 
 				csr |= MGC_M_RXCSR_DISNYET;
 
 		} else {
-			csr = musb_readw(pEnd->regs, MGC_O_HDRC_RXCSR);
+			csr = musb_readw(hw_ep->regs, MGC_O_HDRC_RXCSR);
 
 			if (csr & (MGC_M_RXCSR_RXPKTRDY
 					| MGC_M_RXCSR_DMAENAB
 					| MGC_M_RXCSR_H_REQPKT))
 				ERR("broken !rx_reinit, ep%d csr %04x\n",
-						pEnd->bLocalEnd, csr);
+						hw_ep->bLocalEnd, csr);
 
 			/* scrub any stale state, leaving toggle alone */
 			csr &= MGC_M_RXCSR_DISNYET;
@@ -908,8 +908,8 @@ static void musb_ep_program(struct musb 
 				qh->segsize = dwLength;
 
 				/* AUTOREQ is in a DMA register */
-				musb_writew(pEnd->regs, MGC_O_HDRC_RXCSR, csr);
-				csr = musb_readw(pEnd->regs,
+				musb_writew(hw_ep->regs, MGC_O_HDRC_RXCSR, csr);
+				csr = musb_readw(hw_ep->regs,
 						MGC_O_HDRC_RXCSR);
 
 				/* unless caller treats short rx transfers as
@@ -924,7 +924,7 @@ static void musb_ep_program(struct musb 
 				if (!bDmaOk) {
 					pDmaController->channel_release(
 							pDmaChannel);
-					pDmaChannel = pEnd->rx_channel = NULL;
+					pDmaChannel = hw_ep->rx_channel = NULL;
 				} else
 					csr |= MGC_M_RXCSR_DMAENAB;
 			}
@@ -932,8 +932,8 @@ static void musb_ep_program(struct musb 
 
 		csr |= MGC_M_RXCSR_H_REQPKT;
 		DBG(7, "RXCSR%d := %04x\n", bEnd, csr);
-		musb_writew(pEnd->regs, MGC_O_HDRC_RXCSR, csr);
-		csr = musb_readw(pEnd->regs, MGC_O_HDRC_RXCSR);
+		musb_writew(hw_ep->regs, MGC_O_HDRC_RXCSR, csr);
+		csr = musb_readw(hw_ep->regs, MGC_O_HDRC_RXCSR);
 	}
 }
 
@@ -948,8 +948,8 @@ static int musb_h_ep0_continue(struct mu
 	int			 bMore = FALSE;
 	u8 *pFifoDest = NULL;
 	u16 wFifoCount = 0;
-	struct musb_hw_ep	*pEnd = musb->control_ep;
-	struct musb_qh		*qh = pEnd->in_qh;
+	struct musb_hw_ep	*hw_ep = musb->control_ep;
+	struct musb_qh		*qh = hw_ep->in_qh;
 	struct usb_ctrlrequest	*pRequest;
 
 	switch (musb->bEnd0Stage) {
@@ -960,7 +960,7 @@ static int musb_h_ep0_continue(struct mu
 		if (wFifoCount < wCount)
 			pUrb->status = -EOVERFLOW;
 
-		musb_read_fifo(pEnd, wFifoCount, pFifoDest);
+		musb_read_fifo(hw_ep, wFifoCount, pFifoDest);
 
 		pUrb->actual_length += wFifoCount;
 		if (wCount < qh->maxpacket) {
@@ -998,7 +998,7 @@ static int musb_h_ep0_continue(struct mu
 					+ pUrb->actual_length);
 			DBG(3, "Sending %d bytes to %p\n",
 					wFifoCount, pFifoDest);
-			musb_write_fifo(pEnd, wFifoCount, pFifoDest);
+			musb_write_fifo(hw_ep, wFifoCount, pFifoDest);
 
 			pUrb->actual_length += wFifoCount;
 			bMore = TRUE;
@@ -1024,9 +1024,9 @@ irqreturn_t musb_h_ep0_irq(struct musb *
 	u16			wCsrVal, wCount;
 	int			status = 0;
 	void __iomem		*pBase = musb->pRegs;
-	struct musb_hw_ep	*pEnd = musb->control_ep;
-	void __iomem		*epio = pEnd->regs;
-	struct musb_qh		*qh = pEnd->in_qh;
+	struct musb_hw_ep	*hw_ep = musb->control_ep;
+	void __iomem		*epio = hw_ep->regs;
+	struct musb_qh		*qh = hw_ep->in_qh;
 	u8			bComplete = FALSE;
 	irqreturn_t		retval = IRQ_NONE;
 
@@ -1139,7 +1139,7 @@ irqreturn_t musb_h_ep0_irq(struct musb *
 
 	/* call completion handler if done */
 	if (bComplete)
-		musb_advance_schedule(musb, pUrb, pEnd, 1);
+		musb_advance_schedule(musb, pUrb, hw_ep, 1);
 done:
 	return retval;
 }
@@ -1170,9 +1170,9 @@ void musb_host_tx(struct musb *musb, u8 
 	size_t			wLength = 0;
 	u8			*pBuffer = NULL;
 	struct urb		*pUrb;
-	struct musb_hw_ep	*pEnd = musb->aLocalEnd + bEnd;
-	void __iomem		*epio = pEnd->regs;
-	struct musb_qh		*qh = pEnd->out_qh;
+	struct musb_hw_ep	*hw_ep = musb->aLocalEnd + bEnd;
+	void __iomem		*epio = hw_ep->regs;
+	struct musb_qh		*qh = hw_ep->out_qh;
 	u32			status = 0;
 	void __iomem		*pBase = musb->pRegs;
 	struct dma_channel	*dma;
@@ -1189,7 +1189,7 @@ void musb_host_tx(struct musb *musb, u8 
 	}
 
 	nPipe = pUrb->pipe;
-	dma = is_dma_capable() ? pEnd->tx_channel : NULL;
+	dma = is_dma_capable() ? hw_ep->tx_channel : NULL;
 	DBG(4, "OUT/TX%d end, csr %04x%s\n", bEnd, wTxCsrVal,
 			dma ? ", dma" : "");
 
@@ -1233,7 +1233,7 @@ void musb_host_tx(struct musb *musb, u8 
 		/* do the proper sequence to abort the transfer in the
 		 * usb core; the dma engine should already be stopped.
 		 */
-		musb_h_tx_flush_fifo(pEnd);
+		musb_h_tx_flush_fifo(hw_ep);
 		wTxCsrVal &= ~(MGC_M_TXCSR_AUTOSET
 				| MGC_M_TXCSR_DMAENAB
 				| MGC_M_TXCSR_H_ERROR
@@ -1309,18 +1309,18 @@ void musb_host_tx(struct musb *musb, u8 
 		/* set status */
 		pUrb->status = status;
 		pUrb->actual_length = qh->offset;
-		musb_advance_schedule(musb, pUrb, pEnd, USB_DIR_OUT);
+		musb_advance_schedule(musb, pUrb, hw_ep, USB_DIR_OUT);
 
 	} else if (!(wTxCsrVal & MGC_M_TXCSR_DMAENAB)) {
 		// WARN_ON(!pBuffer);
 
-		/* REVISIT:  some docs say that when pEnd->tx_double_buffered,
+		/* REVISIT:  some docs say that when hw_ep->tx_double_buffered,
 		 * (and presumably, fifo is not half-full) we should write TWO
 		 * packets before updating TXCSR ... other docs disagree ...
 		 */
 		/* PIO:  start next packet in this URB */
 		wLength = min(qh->maxpacket, (u16) wLength);
-		musb_write_fifo(pEnd, wLength, pBuffer);
+		musb_write_fifo(hw_ep, wLength, pBuffer);
 		qh->segsize = wLength;
 
 		MGC_SelectEnd(pBase, bEnd);
@@ -1380,9 +1380,9 @@ finish:
 void musb_host_rx(struct musb *musb, u8 bEnd)
 {
 	struct urb		*pUrb;
-	struct musb_hw_ep	*pEnd = musb->aLocalEnd + bEnd;
-	void __iomem		*epio = pEnd->regs;
-	struct musb_qh		*qh = pEnd->in_qh;
+	struct musb_hw_ep	*hw_ep = musb->aLocalEnd + bEnd;
+	void __iomem		*epio = hw_ep->regs;
+	struct musb_qh		*qh = hw_ep->in_qh;
 	size_t			xfer_len;
 	void __iomem		*pBase = musb->pRegs;
 	int			nPipe;
@@ -1395,7 +1395,7 @@ void musb_host_rx(struct musb *musb, u8 
 	MGC_SelectEnd(pBase, bEnd);
 
 	pUrb = next_urb(qh);
-	dma = is_dma_capable() ? pEnd->rx_channel : NULL;
+	dma = is_dma_capable() ? hw_ep->rx_channel : NULL;
 	status = 0;
 	xfer_len = 0;
 
@@ -1408,7 +1408,7 @@ void musb_host_rx(struct musb *musb, u8 
 		 */
 		DBG(3, "BOGUS RX%d ready, csr %04x, count %d\n", bEnd, wVal,
 			musb_readw(epio, MGC_O_HDRC_RXCOUNT));
-		musb_h_flush_rxfifo(pEnd, MGC_M_RXCSR_CLRDATATOG);
+		musb_h_flush_rxfifo(hw_ep, MGC_M_RXCSR_CLRDATATOG);
 		return;
 	}
 
@@ -1464,7 +1464,7 @@ void musb_host_rx(struct musb *musb, u8 
 			(void) musb->pDmaController->channel_abort(dma);
 			xfer_len = dma->dwActualLength;
 		}
-		musb_h_flush_rxfifo(pEnd, 0);
+		musb_h_flush_rxfifo(hw_ep, 0);
 		musb_writeb(epio, MGC_O_HDRC_RXINTERVAL, 0);
 		bDone = TRUE;
 		goto finish;
@@ -1513,7 +1513,7 @@ void musb_host_rx(struct musb *musb, u8 
 			| MGC_M_RXCSR_H_AUTOREQ
 			| MGC_M_RXCSR_AUTOCLEAR
 			| MGC_M_RXCSR_RXPKTRDY);
-		musb_writew(pEnd->regs, MGC_O_HDRC_RXCSR, wVal);
+		musb_writew(hw_ep->regs, MGC_O_HDRC_RXCSR, wVal);
 
 #ifdef CONFIG_USB_INVENTRA_DMA
 		/* bDone if pUrb buffer is full or short packet is recd */
@@ -1626,7 +1626,7 @@ void musb_host_rx(struct musb *musb, u8 
 
 			if (!status) {
 				c->channel_release(dma);
-				dma = pEnd->rx_channel = NULL;
+				dma = hw_ep->rx_channel = NULL;
 				/* REVISIT reset CSR */
 			}
 		}
@@ -1645,7 +1645,7 @@ finish:
 	if (bDone) {
 		if (pUrb->status == -EINPROGRESS)
 			pUrb->status = status;
-		musb_advance_schedule(musb, pUrb, pEnd, USB_DIR_IN);
+		musb_advance_schedule(musb, pUrb, hw_ep, USB_DIR_IN);
 	}
 }
 
Index: linux-2.6.18/drivers/usb/musb/musb_procfs.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musb_procfs.c
+++ linux-2.6.18/drivers/usb/musb/musb_procfs.c
@@ -237,14 +237,14 @@ dump_end_info(struct musb *musb, u8 bEnd
 {
 	int			code = 0;
 	char			*buf = aBuffer;
-	struct musb_hw_ep	*pEnd = &musb->aLocalEnd[bEnd];
+	struct musb_hw_ep	*hw_ep = &musb->aLocalEnd[bEnd];
 
 	do {
 		MGC_SelectEnd(musb->pRegs, bEnd);
 #ifdef CONFIG_USB_MUSB_HDRC_HCD
 		if (is_host_active(musb)) {
 			int		dump_rx, dump_tx;
-			void __iomem	*regs = pEnd->regs;
+			void __iomem	*regs = hw_ep->regs;
 
 			/* TEMPORARY (!) until we have a real periodic
 			 * schedule tree ...
@@ -255,7 +255,7 @@ dump_end_info(struct musb *musb, u8 bEnd
 				 */
 				dump_tx = !list_empty(&musb->control);
 				dump_rx = 0;
-			} else if (pEnd == musb->bulk_ep) {
+			} else if (hw_ep == musb->bulk_ep) {
 				dump_tx = !list_empty(&musb->out_bulk);
 				dump_rx = !list_empty(&musb->in_bulk);
 			} else if (musb->periodic[bEnd]) {
@@ -277,7 +277,7 @@ dump_end_info(struct musb *musb, u8 bEnd
 					"dev %d hub %d port %d"
 					"\n",
 					bEnd,
-					pEnd->rx_double_buffered
+					hw_ep->rx_double_buffered
 						? "2buf" : "1buf",
 					musb_readw(regs, MGC_O_HDRC_RXCSR),
 					musb_readb(regs, MGC_O_HDRC_RXINTERVAL),
@@ -302,7 +302,7 @@ dump_end_info(struct musb *musb, u8 bEnd
 
 				if (is_cppi_enabled()
 						&& bEnd
-						&& pEnd->rx_channel) {
+						&& hw_ep->rx_channel) {
 					unsigned	cppi = bEnd - 1;
 					unsigned	off1 = cppi << 2;
 					void __iomem	*base;
@@ -337,7 +337,7 @@ dump_end_info(struct musb *musb, u8 bEnd
 					max -= code;
 				}
 
-				if (pEnd == musb->bulk_ep
+				if (hw_ep == musb->bulk_ep
 						&& !list_empty(
 							&musb->in_bulk)) {
 					code = dump_queue(&musb->in_bulk,
@@ -365,7 +365,7 @@ dump_end_info(struct musb *musb, u8 bEnd
 					"dev %d hub %d port %d"
 					"\n",
 					bEnd,
-					pEnd->tx_double_buffered
+					hw_ep->tx_double_buffered
 						? "2buf" : "1buf",
 					musb_readw(regs, MGC_O_HDRC_TXCSR),
 					musb_readb(regs, MGC_O_HDRC_TXINTERVAL),
@@ -390,7 +390,7 @@ dump_end_info(struct musb *musb, u8 bEnd
 
 				if (is_cppi_enabled()
 						&& bEnd
-						&& pEnd->tx_channel) {
+						&& hw_ep->tx_channel) {
 					unsigned	cppi = bEnd - 1;
 					void __iomem	*base;
 					void __iomem	*ram;
@@ -418,7 +418,7 @@ dump_end_info(struct musb *musb, u8 bEnd
 					max -= code;
 				}
 
-				if (pEnd == musb->control_ep
+				if (hw_ep == musb->control_ep
 						&& !list_empty(
 							&musb->control)) {
 					code = dump_queue(&musb->control,
@@ -428,7 +428,7 @@ dump_end_info(struct musb *musb, u8 bEnd
 					code = min(code, (int) max);
 					buf += code;
 					max -= code;
-				} else if (pEnd == musb->bulk_ep
+				} else if (hw_ep == musb->bulk_ep
 						&& !list_empty(
 							&musb->out_bulk)) {
 					code = dump_queue(&musb->out_bulk,
@@ -454,16 +454,16 @@ dump_end_info(struct musb *musb, u8 bEnd
 		if (is_peripheral_active(musb)) {
 			code = 0;
 
-			if (pEnd->ep_in.desc || !bEnd) {
-				code = dump_ep(&pEnd->ep_in, buf, max);
+			if (hw_ep->ep_in.desc || !bEnd) {
+				code = dump_ep(&hw_ep->ep_in, buf, max);
 				if (code <= 0)
 					break;
 				code = min(code, (int) max);
 				buf += code;
 				max -= code;
 			}
-			if (pEnd->ep_out.desc) {
-				code = dump_ep(&pEnd->ep_out, buf, max);
+			if (hw_ep->ep_out.desc) {
+				code = dump_ep(&hw_ep->ep_out, buf, max);
 				if (code <= 0)
 					break;
 				code = min(code, (int) max);
Index: linux-2.6.18/drivers/usb/musb/plat_uds.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/plat_uds.c
+++ linux-2.6.18/drivers/usb/musb/plat_uds.c
@@ -1179,7 +1179,7 @@ static int __init ep_config_from_table(s
 static int __init ep_config_from_hw(struct musb *musb)
 {
 	u8 bEnd = 0, reg;
-	struct musb_hw_ep *pEnd;
+	struct musb_hw_ep *hw_ep;
 	void *pBase = musb->pRegs;
 
 	DBG(2, "<== static silicon ep config\n");
@@ -1188,10 +1188,10 @@ static int __init ep_config_from_hw(stru
 
 	for (bEnd = 1; bEnd < MUSB_C_NUM_EPS; bEnd++) {
 		MGC_SelectEnd(pBase, bEnd);
-		pEnd = musb->aLocalEnd + bEnd;
+		hw_ep = musb->aLocalEnd + bEnd;
 
 		/* read from core using indexed model */
-		reg = musb_readb(pEnd->regs, 0x10 + MGC_O_HDRC_FIFOSIZE);
+		reg = musb_readb(hw_ep->regs, 0x10 + MGC_O_HDRC_FIFOSIZE);
 		if (!reg) {
 			/* 0's returned when no more endpoints */
 			break;
@@ -1199,24 +1199,24 @@ static int __init ep_config_from_hw(stru
 		musb->bEndCount++;
 		musb->wEndMask |= (1 << bEnd);
 
-		pEnd->wMaxPacketSizeTx = 1 << (reg & 0x0f);
+		hw_ep->wMaxPacketSizeTx = 1 << (reg & 0x0f);
 
 		/* shared TX/RX FIFO? */
 		if ((reg & 0xf0) == 0xf0) {
-			pEnd->wMaxPacketSizeRx = pEnd->wMaxPacketSizeTx;
-			pEnd->bIsSharedFifo = TRUE;
+			hw_ep->wMaxPacketSizeRx = hw_ep->wMaxPacketSizeTx;
+			hw_ep->bIsSharedFifo = TRUE;
 			continue;
 		} else {
-			pEnd->wMaxPacketSizeRx = 1 << ((reg & 0xf0) >> 4);
-			pEnd->bIsSharedFifo = FALSE;
+			hw_ep->wMaxPacketSizeRx = 1 << ((reg & 0xf0) >> 4);
+			hw_ep->bIsSharedFifo = FALSE;
 		}
 
-		/* FIXME set up pEnd->{rx,tx}_double_buffered */
+		/* FIXME set up hw_ep->{rx,tx}_double_buffered */
 
 #ifdef CONFIG_USB_MUSB_HDRC_HCD
 		/* pick an RX/TX endpoint for bulk */
-		if (pEnd->wMaxPacketSizeTx < 512
-				|| pEnd->wMaxPacketSizeRx < 512)
+		if (hw_ep->wMaxPacketSizeTx < 512
+				|| hw_ep->wMaxPacketSizeRx < 512)
 			continue;
 
 		/* REVISIT:  this algorithm is lazy, we should at least
@@ -1224,7 +1224,7 @@ static int __init ep_config_from_hw(stru
 		 */
 		if (musb->bulk_ep)
 			continue;
-		musb->bulk_ep = pEnd;
+		musb->bulk_ep = hw_ep;
 #endif
 	}
 
Index: linux-2.6.18/mvl_patches/pro50-1661.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1661.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1661);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

