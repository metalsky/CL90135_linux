#! /usr/bin/env bash
# Patch: -pro_arm_davinci_video_2_1_silicon_support
# Date: Fri Sep 19 14:02:26 2008
# Source: Texas Instruments Inc.
# MR: 28558
# Type: Enhancement
# Signed-off-by: Sudhakar Raj <sudhakar.r@ti.com>
# Signed-off-by: Steve Chen <schen@mvista.com>
# Description:
# This patch supports PG 2.1 silicon version of DM644x by reverting the field
# inversion workarounds done to support previous PG revisions. For PG 1.x, the
# workarounds will remain in place even if the patch is applied.
# 

PATCHNUM=1599
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: Texas Instruments Inc.
MR: 28558
Type: Enhancement
Signed-off-by: Sudhakar Raj <sudhakar.r@ti.com>
Signed-off-by: Steve Chen <schen@mvista.com>
Description:
This patch supports PG 2.1 silicon version of DM644x by reverting the field
inversion workarounds done to support previous PG revisions. For PG 1.x, the
workarounds will remain in place even if the patch is applied.

Index: linux-2.6.18/drivers/media/video/davinci/davinci_display.c
===================================================================
--- linux-2.6.18.orig/drivers/media/video/davinci/davinci_display.c
+++ linux-2.6.18/drivers/media/video/davinci/davinci_display.c
@@ -1409,7 +1409,7 @@ static int davinci_config_layer(enum dav
 	   the image shaking problem in 1080I mode */
 	if (id == DAVINCI_DISPLAY_DEVICE_0 &&
 	    strcmp(mode_info->name, VID_ENC_STD_1080I_30) == 0 &&
-	    cpu_is_davinci_dm644x())
+	    cpu_is_davinci_dm644x_pg1x())
 		davinci_disp_set_field_inversion(0);
 
 	if (layer->layer_info.config.interlaced)
Index: linux-2.6.18/drivers/media/video/davinci/davinci_osd.c
===================================================================
--- linux-2.6.18.orig/drivers/media/video/davinci/davinci_osd.c
+++ linux-2.6.18/drivers/media/video/davinci/davinci_osd.c
@@ -237,7 +237,7 @@ static int _davinci_disp_dm6446_vid0_pin
 					      const struct davinci_layer_config
 					      *lconfig)
 {
-	if (!cpu_is_davinci_dm644x())
+	if (!cpu_is_davinci_dm644x_pg1x())
 		return 0;
 
 	if (!field_inversion || !lconfig->interlaced) {
@@ -1999,7 +1999,7 @@ int davinci_disp_init(void)
 	/* set default Cb/Cr order */
 	osd->yc_pixfmt = PIXFMT_YCbCrI;
 
-	if (cpu_is_davinci_dm644x()) {
+	if (cpu_is_davinci_dm644x_pg1x()) {
 		/*
 		 * DM6446 silicon advisory 1.3.8 says that when using interlaced
 		 * video output, the field signal is improperly inverted for
Index: linux-2.6.18/drivers/media/video/davinci/davinci_platform.c
===================================================================
--- linux-2.6.18.orig/drivers/media/video/davinci/davinci_platform.c
+++ linux-2.6.18/drivers/media/video/davinci/davinci_platform.c
@@ -955,7 +955,7 @@ void davinci_enc_priv_setmode(struct vid
 	   the image shaking problem in 1080I mode. The problem i.d. by the
 	   DM6446 Advisory 1.3.8 is not seen in 1080I mode, but the ping-pong
 	   buffer workaround created a shaking problem. */
-	if (cpu_is_davinci_dm644x() &&
+	if (cpu_is_davinci_dm644x_pg1x() &&
 	    strcmp(mgr->current_mode.name, VID_ENC_STD_1080I_30) == 0)
 		davinci_disp_set_field_inversion(0);
 
Index: linux-2.6.18/drivers/video/davincifb.c
===================================================================
--- linux-2.6.18.orig/drivers/video/davincifb.c
+++ linux-2.6.18/drivers/video/davincifb.c
@@ -1510,7 +1510,7 @@ static int davincifb_set_par(struct fb_i
 	   buffer workaround created a shaking problem. */
 	if (win->layer == WIN_VID0 &&
 	    strcmp(mode.name, VID_ENC_STD_1080I_30) == 0 &&
-	    cpu_is_davinci_dm644x())
+	    cpu_is_davinci_dm644x_pg1x())
 		davinci_disp_set_field_inversion(0);
 
 	/*
Index: linux-2.6.18/arch/arm/mach-davinci/id.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/id.c
+++ linux-2.6.18/arch/arm/mach-davinci/id.c
@@ -28,11 +28,18 @@ struct davinci_id {
 /* Register values to detect the DaVinci version */
 static struct davinci_id davinci_ids[] __initdata = {
 	{
-		/* DM6446 */
+		/* DM6446 PG 1.3 and earlier */
 		.part_no      = 0xb700,
 		.variant      = 0x0,
 		.manufacturer = 0x017,
-		.type	      = 0x64460000,
+		.type	      = 0x64430000,
+	},
+	{
+		/* DM6446 PG 2.1 */
+		.part_no      = 0xb700,
+		.variant      = 0x1,
+		.manufacturer = 0x017,
+		.type	      = 0x6443A000,
 	},
         {
                 /* DM6467 */
Index: linux-2.6.18/include/asm-arm/arch-davinci/cpu.h
===================================================================
--- linux-2.6.18.orig/include/asm-arm/arch-davinci/cpu.h
+++ linux-2.6.18/include/asm-arm/arch-davinci/cpu.h
@@ -21,17 +21,18 @@ extern unsigned int davinci_cpu_index;	/
 #define DM6467_CPU_IDX	1
 #define DM355_CPU_IDX	2
 
-#define GET_DAVINCI_CPU_TYPE	((system_rev >> 16) & 0xfff0)
+#define GET_DAVINCI_CPU_TYPE(msk)	((system_rev >> 12) & msk)
 
-#define IS_DAVINCI_CPU(type, id)			\
-static inline int cpu_is_davinci_dm ##type(void)		\
-{								\
-	return (GET_DAVINCI_CPU_TYPE == (id & 0xfff0)) ? 1 : 0;	\
+#define IS_DAVINCI_CPU(type, id, msk)					\
+static inline int cpu_is_davinci_dm ##type(void)			\
+{									\
+	return (GET_DAVINCI_CPU_TYPE(msk) == (id & msk)) ? 1 : 0;	\
 }
 
 /* following generates the cpu_is_davinci_dmxxx */
-IS_DAVINCI_CPU(644x, 0x6443)	/* cpu_is_davinci_dm644x() */
-IS_DAVINCI_CPU(6467, 0x6467)	/* cpu_is_davinci_dm6467() */
-IS_DAVINCI_CPU(355, 0x350)	/* cpu_is_davinci_dm355() */
+IS_DAVINCI_CPU(644x, 0x64430, 0xffff0)       /* cpu_is_davinci_dm644x() */
+IS_DAVINCI_CPU(644x_pg1x, 0x64430, 0xfffff)  /* cpu_is_davinci_dm644x_pg1x() */
+IS_DAVINCI_CPU(6467, 0x64670, 0xffff0)       /* cpu_is_davinci_dm6467() */
+IS_DAVINCI_CPU(355, 0x3500, 0xffff0)         /* cpu_is_davinci_dm355() */
 
 #endif
Index: linux-2.6.18/mvl_patches/pro50-1599.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1599.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1599);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

