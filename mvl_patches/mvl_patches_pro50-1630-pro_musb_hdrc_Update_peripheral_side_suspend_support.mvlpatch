#! /usr/bin/env bash
# Patch: -pro_musb_hdrc_Update_peripheral_side_suspend_support
# Date: Fri Sep 19 14:04:34 2008
# From 6d59ea33f38919c7f066be4452e7dc59a6761bec Mon Sep 17 00:00:00 2001
# From: David Brownell <dbrownell@users.sourceforge.net>
# Date: Fri, 23 Mar 2007 10:00:21 -0400
# Subject: [PATCH] musb_hdrc: Update peripheral side suspend support
# 
# Update peripheral side suspend support:
# 
#  - Work around some IRQ strangeness (disconnect not detected reliably
#    while suspended).
# 
#  - Swaps out clearly-broken SRP logic (from Mentor?) with code which
#    at least matches the documentation.
# 
#  - Track whether peripheral is suspended; this helps detect invalid remote
#    wakeup requests, and will also help work around a tusb6010 peripheral
#    side issue (separate patch).
# 
#  - For tusb6010, don't be so noisy with tps65030 idle/suspend messaging;
#    among other things, it interferes with debugging.
# 
#  - In OTG mode, host side can now autosuspend when peripheral side is
#    active (connected or otherwise).
# 
# USBCV remote wakeup tests now pass.
# 
# Signed-off-by: David Brownell <dbrownell@users.sourceforge.net>
# (cherry picked from commit 68a37991fe438a5ec061e49278917e9f75e36931)

PATCHNUM=1630
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
From 6d59ea33f38919c7f066be4452e7dc59a6761bec Mon Sep 17 00:00:00 2001
From: David Brownell <dbrownell@users.sourceforge.net>
Date: Fri, 23 Mar 2007 10:00:21 -0400
Subject: [PATCH] musb_hdrc: Update peripheral side suspend support

Update peripheral side suspend support:

 - Work around some IRQ strangeness (disconnect not detected reliably
   while suspended).

 - Swaps out clearly-broken SRP logic (from Mentor?) with code which
   at least matches the documentation.

 - Track whether peripheral is suspended; this helps detect invalid remote
   wakeup requests, and will also help work around a tusb6010 peripheral
   side issue (separate patch).

 - For tusb6010, don't be so noisy with tps65030 idle/suspend messaging;
   among other things, it interferes with debugging.

 - In OTG mode, host side can now autosuspend when peripheral side is
   active (connected or otherwise).

USBCV remote wakeup tests now pass.

Signed-off-by: David Brownell <dbrownell@users.sourceforge.net>
(cherry picked from commit 68a37991fe438a5ec061e49278917e9f75e36931)
Index: linux-2.6.18/drivers/usb/musb/g_ep0.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/g_ep0.c
+++ linux-2.6.18/drivers/usb/musb/g_ep0.c
@@ -330,6 +330,10 @@ __acquires(musb->Lock)
 					musb->g.b_hnp_enable = 1;
 					devctl = musb_readb(pBase,
 							MGC_O_HDRC_DEVCTL);
+					/* NOTE:  at least DaVinci doesn't
+					 * like to set HR ...
+					 */
+					DBG(1, "set HR\n");
 					musb_writeb(pBase, MGC_O_HDRC_DEVCTL,
 						devctl | MGC_M_DEVCTL_HR);
 					}
Index: linux-2.6.18/drivers/usb/musb/musb_gadget.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musb_gadget.c
+++ linux-2.6.18/drivers/usb/musb/musb_gadget.c
@@ -1426,54 +1426,47 @@ static int musb_gadget_get_frame(struct 
 static int musb_gadget_wakeup(struct usb_gadget *gadget)
 {
 	struct musb	*musb = gadget_to_musb(gadget);
+	void __iomem	*mregs = musb->pRegs;
 	unsigned long	flags;
 	int		status = -EINVAL;
-	u8		power;
+	u8		power, devctl;
 
 	spin_lock_irqsave(&musb->Lock, flags);
 
-	/* fail if we're not suspended */
-	power = musb_readb(musb->pRegs, MGC_O_HDRC_POWER);
-	if (!(power & MGC_M_POWER_SUSPENDM))
-		goto done;
-
 	switch (musb->xceiv.state) {
 	case OTG_STATE_B_PERIPHERAL:
 		/* NOTE:  OTG state machine doesn't include B_SUSPENDED;
 		 * that's part of the standard usb 1.1 state machine, and
 		 * doesn't affect OTG transitions.
 		 */
-		if (musb->may_wakeup)
+		if (musb->may_wakeup && musb->is_suspended)
 			break;
 		goto done;
 	case OTG_STATE_B_IDLE:
-		/* REVISIT we might be able to do SRP even without OTG,
-		 * though Linux doesn't yet expose that capability.  SRP
-		 * starts by setting DEVCTL.SESSION (not POWER.RESUME);
-		 * though DaVinci can't do it.
-		 */
-		if (is_otg_enabled(musb)) {
-			musb->xceiv.state = OTG_STATE_B_SRP_INIT;
-			break;
-		}
-		/* FALLTHROUGH */
+		/* Start SRP ... OTG not required. */
+		devctl = musb_readb(mregs, MGC_O_HDRC_DEVCTL);
+		devctl |= MGC_M_DEVCTL_SESSION;
+		musb_writeb(mregs, MGC_O_HDRC_DEVCTL, devctl);
+		DBG(2, "SRP\n");
+		status = 0;
+		goto done;
 	default:
 		goto done;
 	}
 
 	status = 0;
+
+	power = musb_readb(mregs, MGC_O_HDRC_POWER);
 	power |= MGC_M_POWER_RESUME;
-	musb_writeb(musb->pRegs, MGC_O_HDRC_POWER, power);
+	musb_writeb(mregs, MGC_O_HDRC_POWER, power);
+	DBG(2, "issue wakeup\n");
 
 	/* FIXME do this next chunk in a timer callback, no udelay */
 	mdelay(2);
 
-	power = musb_readb(musb->pRegs, MGC_O_HDRC_POWER);
+	power = musb_readb(mregs, MGC_O_HDRC_POWER);
 	power &= ~MGC_M_POWER_RESUME;
-	musb_writeb(musb->pRegs, MGC_O_HDRC_POWER, power);
-
-	if (musb->xceiv.state == OTG_STATE_B_SRP_INIT)
-		musb->xceiv.state = OTG_STATE_B_IDLE;
+	musb_writeb(mregs, MGC_O_HDRC_POWER, power);
 done:
 	spin_unlock_irqrestore(&musb->Lock, flags);
 	return status;
@@ -1898,6 +1891,7 @@ EXPORT_SYMBOL(usb_gadget_unregister_driv
 
 void musb_g_resume(struct musb *musb)
 {
+	musb->is_suspended = 0;
 	switch (musb->xceiv.state) {
 	case OTG_STATE_B_IDLE:
 		break;
@@ -1930,6 +1924,7 @@ void musb_g_suspend(struct musb *musb)
 			musb->xceiv.state = OTG_STATE_B_PERIPHERAL;
 		break;
 	case OTG_STATE_B_PERIPHERAL:
+		musb->is_suspended = 1;
 		if (musb->pGadgetDriver && musb->pGadgetDriver->suspend) {
 			spin_unlock(&musb->Lock);
 			musb->pGadgetDriver->suspend(&musb->g);
@@ -2017,6 +2012,7 @@ __acquires(musb->Lock)
 
 	/* start in USB_STATE_DEFAULT */
 	musb->is_active = 1;
+	musb->is_suspended = 0;
 	MUSB_DEV_MODE(musb);
 	musb->bAddress = 0;
 	musb->ep0_state = MGC_END0_STAGE_SETUP;
Index: linux-2.6.18/drivers/usb/musb/musb_host.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musb_host.c
+++ linux-2.6.18/drivers/usb/musb/musb_host.c
@@ -2141,7 +2141,10 @@ static int musb_bus_suspend(struct usb_h
 {
 	struct musb	*musb = hcd_to_musb(hcd);
 
-	return musb->is_active ? -EBUSY : 0;
+	if (is_host_active(musb) && musb->is_active)
+		return -EBUSY;
+	else
+		return 0;
 }
 
 static int musb_bus_resume(struct usb_hcd *hcd)
Index: linux-2.6.18/drivers/usb/musb/musb_procfs.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musb_procfs.c
+++ linux-2.6.18/drivers/usb/musb/musb_procfs.c
@@ -534,6 +534,15 @@ static int dump_header_stats(struct musb
 	count += code;
 	buffer += code;
 
+#ifdef	CONFIG_USB_GADGET_MUSB_HDRC
+	code = sprintf(buffer, "Peripheral address: %02x\n",
+			musb_readb(pThis, MGC_O_HDRC_FADDR));
+	if (code <= 0)
+		goto done;
+	buffer += code;
+	count += code;
+#endif
+
 #ifdef	CONFIG_USB_MUSB_HDRC_HCD
 	code = sprintf(buffer, "Root port status: %08x\n",
 			pThis->port1_status);
Index: linux-2.6.18/drivers/usb/musb/musbdefs.h
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musbdefs.h
+++ linux-2.6.18/drivers/usb/musb/musbdefs.h
@@ -433,6 +433,9 @@ struct musb {
 #endif
 
 #ifdef CONFIG_USB_GADGET_MUSB_HDRC
+	/* is_suspended means USB B_PERIPHERAL suspend */
+	unsigned		is_suspended:1;
+
 	/* may_wakeup means remote wakeup is enabled */
 	unsigned		may_wakeup:1;
 
Index: linux-2.6.18/drivers/usb/musb/plat_uds.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/plat_uds.c
+++ linux-2.6.18/drivers/usb/musb/plat_uds.c
@@ -368,6 +368,15 @@ static irqreturn_t musb_stage0_irq(struc
 #ifdef CONFIG_USB_GADGET_MUSB_HDRC
 			case OTG_STATE_B_WAIT_ACON:
 			case OTG_STATE_B_PERIPHERAL:
+				/* disconnect while suspended?  we may
+				 * not get a disconnect irq...
+				 */
+				if ((devctl & MGC_M_DEVCTL_VBUS)
+						!= (3 << MGC_S_DEVCTL_VBUS)) {
+					pThis->int_usb |= MGC_M_INTR_DISCONNECT;
+					pThis->int_usb &= ~MGC_M_INTR_SUSPEND;
+					break;
+				}
 				musb_g_resume(pThis);
 				break;
 			case OTG_STATE_B_IDLE:
@@ -646,8 +655,8 @@ static irqreturn_t musb_stage2_irq(struc
 	}
 
 	if (bIntrUSB & MGC_M_INTR_SUSPEND) {
-		DBG(1, "SUSPEND (%s) devctl %02x\n",
-				otg_state_string(pThis), devctl);
+		DBG(1, "SUSPEND (%s) devctl %02x power %02x\n",
+				otg_state_string(pThis), devctl, power);
 		handled = IRQ_HANDLED;
 
 		switch (pThis->xceiv.state) {
Index: linux-2.6.18/drivers/usb/musb/tusb6010.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/tusb6010.c
+++ linux-2.6.18/drivers/usb/musb/tusb6010.c
@@ -199,7 +199,7 @@ static void tusb_set_clock_source(struct
 	/* 0 = refclk (clkin, XI)
 	 * 1 = PHY 60 MHz (internal PLL)
 	 * 2 = not supported
-	 * 3 = NOR clock (huh?)
+	 * 3 = what?
 	 */
 	if (mode > 0)
 		reg |= TUSB_PRCM_CONF_SYS_CLKSEL(mode & 0x3);
@@ -242,7 +242,7 @@ static void tusb_allow_idle(struct musb 
 	reg |= TUSB_PRCM_MNGMT_PM_IDLE | TUSB_PRCM_MNGMT_DEV_IDLE;
 	musb_writel(base, TUSB_PRCM_MNGMT, reg);
 
-	DBG(2, "idle, wake on %02x\n", wakeup_enables);
+	DBG(6, "idle, wake on %02x\n", wakeup_enables);
 }
 
 /*
@@ -545,7 +545,7 @@ static irqreturn_t tusb_interrupt(int ir
 			reg = musb_readl(base, TUSB_SCRATCH_PAD);
 			if (reg == i)
 				break;
-			DBG(1, "TUSB NOR not ready\n");
+			DBG(6, "TUSB NOR not ready\n");
 		}
 
 		/* work around issue 13 (2nd half) */
Index: linux-2.6.18/mvl_patches/pro50-1630.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1630.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1630);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

