#! /usr/bin/env bash
# Patch: -pro_arm_davinci_move_mux_code_to_common_dir
# Date: Thu Feb 19 15:00:27 2009
# Source: MontaVista Software, Inc.
# MR: 30941
# Type: Enhancement
# Disposition: needs submitting to DaVinci community
# Signed-off-by: Mark A. Greer <mgreer@mvista.com>
# Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
# Description:
# 
#     DaVinci: move common PinMux code to arch/arm/plat-davinci/
# 
#     Move the PinMux code that can be shared with davinci and DaVinci-like
#     platforms to arch/arm/plat-davinci/.  Introduce davinci_cfg_*() functions.
#     While at it, rework the stupid MUX_{CFG|REG}() macros, drop unused field
#     and from 'struct pin_config', drop meaningless 'const' qualifiers, reorder
#     fields for better aligning, and make davinci_mux_register() return *void*
#     as ints result is ignored anyway.
# 
#  arch/arm/mach-davinci/mux.c             |  101 --------------------------------
#  arch/arm/mach-davinci/Kconfig           |   25 -------
#  arch/arm/mach-davinci/Makefile          |    2 
#  arch/arm/plat-davinci/Kconfig           |   25 +++++++
#  arch/arm/plat-davinci/Makefile          |    1 
#  arch/arm/plat-davinci/mux.c             |   84 ++++++++++++++++++++++++++
#  include/asm-arm/arch-davinci/hardware.h |    3 
#  include/asm-arm/arch-davinci/mux.h      |   65 +++++++++-----------
#  8 files changed, 143 insertions(+), 163 deletions(-)
# 

PATCHNUM=2100
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 30941
Type: Enhancement
Disposition: needs submitting to DaVinci community
Signed-off-by: Mark A. Greer <mgreer@mvista.com>
Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
Description:

    DaVinci: move common PinMux code to arch/arm/plat-davinci/

    Move the PinMux code that can be shared with davinci and DaVinci-like
    platforms to arch/arm/plat-davinci/.  Introduce davinci_cfg_*() functions.
    While at it, rework the stupid MUX_{CFG|REG}() macros, drop unused field
    and from 'struct pin_config', drop meaningless 'const' qualifiers, reorder
    fields for better aligning, and make davinci_mux_register() return *void*
    as ints result is ignored anyway.

 arch/arm/mach-davinci/Kconfig           |   25 -------
 arch/arm/mach-davinci/Makefile          |    2 
 arch/arm/mach-davinci/mux.c             |  101 --------------------------------
 arch/arm/plat-davinci/Kconfig           |   25 +++++++
 arch/arm/plat-davinci/Makefile          |    1 
 arch/arm/plat-davinci/mux.c             |   84 ++++++++++++++++++++++++++
 include/asm-arm/arch-davinci/hardware.h |    3 
 include/asm-arm/arch-davinci/mux.h      |   65 +++++++++-----------
 mvl_patches/pro50-2100.c                |   16 +++++
 9 files changed, 159 insertions(+), 163 deletions(-)

Index: linux-2.6.18/arch/arm/mach-davinci/Kconfig
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/Kconfig
+++ linux-2.6.18/arch/arm/mach-davinci/Kconfig
@@ -42,31 +42,6 @@ config MACH_DAVINCI_DM6467_EVM
 
 endchoice
 
-config DAVINCI_MUX
-	bool "DAVINCI multiplexing support"
-	default y
-	help
-	  Pin multiplexing support for DAVINCI boards. If your bootloader
-	  sets the multiplexing correctly, say N. Otherwise, or if unsure,
-	  say Y.
-
-config DAVINCI_MUX_DEBUG
-	bool "Multiplexing debug output"
-	depends on DAVINCI_MUX
-	help
-	  Makes the multiplexing functions print out a lot of debug info.
-	  This is useful if you want to find out the correct values of the
-	  multiplexing registers.
-
-config DAVINCI_MUX_WARNINGS
-	bool "Warn about pins the bootloader didn't set up"
-	depends on DAVINCI_MUX
-	default y
-	help
-	  Choose Y here to warn whenever driver initialization logic needs
-	  to change the pin multiplexing setup.  When there are no warnings
-	  printed, it's safe to deselect DAVINCI_MUX for your product.
-
 config DAVINCI_I2C_EXPANDER
 	bool "TI DaVinci I2C Expander"
 	default y
Index: linux-2.6.18/arch/arm/mach-davinci/Makefile
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/Makefile
+++ linux-2.6.18/arch/arm/mach-davinci/Makefile
@@ -4,7 +4,7 @@
 #
 
 # Common objects
-obj-y := time.o irq.o clock.o io.o id.o mux.o mux_cfg.o dma.o devices.o
+obj-y := time.o irq.o clock.o io.o id.o mux_cfg.o dma.o devices.o
 
 # Board specific
 obj-$(CONFIG_MACH_DAVINCI_EVM)		+= board-evm.o i2c-emac.o
Index: linux-2.6.18/arch/arm/mach-davinci/mux.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/mux.c
+++ /dev/null
@@ -1,101 +0,0 @@
-/*
- * Utility to set the DAVINCI MUX register from a table in mux.h
- *
- * Author: Vladimir Barinov, MontaVista Software, Inc. <source@mvista.com>
- *
- * Based on linux/arch/arm/plat-omap/mux.c:
- * Copyright (C) 2003 - 2005 Nokia Corporation
- * Written by Tony Lindgren <tony.lindgren@nokia.com>
- *
- * 2007 (c) MontaVista Software, Inc. This file is licensed under
- * the terms of the GNU General Public License version 2. This program
- * is licensed "as is" without any warranty of any kind, whether express
- * or implied.
- */
-
-#include <linux/module.h>
-#include <linux/init.h>
-#include <linux/spinlock.h>
-
-#include <asm/io.h>
-#include <asm/arch/mux.h>
-
-#ifdef CONFIG_DAVINCI_MUX
-
-static struct pin_config *pin_table;
-static unsigned long pin_table_sz;
-
-int __init davinci_mux_register(struct pin_config *pins, unsigned long size)
-{
-	pin_table = pins;
-	pin_table_sz = size;
-
-	return 0;
-}
-
-/*
- * Sets the DAVINCI MUX register based on the table
- */
-int __init_or_module davinci_cfg_reg(const unsigned long index)
-{
-	static DEFINE_SPINLOCK(mux_spin_lock);
-
-	unsigned long flags;
-	struct pin_config *cfg;
-	unsigned int reg_orig = 0, reg = 0;
-	unsigned int mask, warn = 0;
-
-	if (!pin_table)
-		BUG();
-
-	if (index >= pin_table_sz) {
-		printk(KERN_ERR "Invalid pin mux index: %lu (%lu)\n",
-		       index, pin_table_sz);
-		dump_stack();
-		return -ENODEV;
-	}
-
-	cfg = (struct pin_config *)&pin_table[index];
-
-	/* Check the mux register in question */
-	if (cfg->mux_reg) {
-		unsigned	tmp1, tmp2;
-
-		spin_lock_irqsave(&mux_spin_lock, flags);
-		reg_orig = davinci_readl(cfg->mux_reg);
-
-		mask = (cfg->mask << cfg->mask_offset);
-		tmp1 = reg_orig & mask;
-		reg = reg_orig & ~mask;
-
-		tmp2 = (cfg->mode << cfg->mask_offset);
-		reg |= tmp2;
-
-		if (tmp1 != tmp2)
-			warn = 1;
-
-		davinci_writel(reg, cfg->mux_reg);
-		spin_unlock_irqrestore(&mux_spin_lock, flags);
-	}
-
-	if (warn) {
-#ifdef CONFIG_DAVINCI_MUX_WARNINGS
-		printk(KERN_WARNING "MUX: initialized %s\n", cfg->name);
-#endif
-	}
-
-#ifdef CONFIG_DAVINCI_MUX_DEBUG
-	if (cfg->debug || warn) {
-		printk(KERN_WARNING "MUX: Setting register %s\n", cfg->name);
-		printk(KERN_WARNING "      %s (0x%08x) = 0x%08x -> 0x%08x\n",
-		       cfg->mux_reg_name, cfg->mux_reg, reg_orig, reg);
-	}
-#endif
-
-	return 0;
-}
-EXPORT_SYMBOL(davinci_cfg_reg);
-#else
-#define davinci_mux_init()	do {} while (0)
-#define davinci_cfg_reg(x)	do {} while (0)
-#endif	/* CONFIG_DAVINCI_MUX */
Index: linux-2.6.18/arch/arm/plat-davinci/Kconfig
===================================================================
--- linux-2.6.18.orig/arch/arm/plat-davinci/Kconfig
+++ linux-2.6.18/arch/arm/plat-davinci/Kconfig
@@ -11,4 +11,29 @@ config ARCH_DAVINCI_TRUE
 
 endchoice
 
+config DAVINCI_MUX
+	bool "DAVINCI multiplexing support"
+	default y
+	help
+	  Pin multiplexing support for DAVINCI boards. If your bootloader
+	  sets the multiplexing correctly, say N. Otherwise, or if unsure,
+	  say Y.
+
+config DAVINCI_MUX_DEBUG
+	bool "Multiplexing debug output"
+	depends on DAVINCI_MUX
+	help
+	  Makes the multiplexing functions print out a lot of debug info.
+	  This is useful if you want to find out the correct values of the
+	  multiplexing registers.
+
+config DAVINCI_MUX_WARNINGS
+	bool "Warn about pins the bootloader didn't set up"
+	depends on DAVINCI_MUX
+	default y
+	help
+	  Choose Y here to warn whenever driver initialization logic needs
+	  to change the pin multiplexing setup.  When there are no warnings
+	  printed, it's safe to deselect DAVINCI_MUX for your product.
+
 endif
Index: linux-2.6.18/arch/arm/plat-davinci/Makefile
===================================================================
--- linux-2.6.18.orig/arch/arm/plat-davinci/Makefile
+++ linux-2.6.18/arch/arm/plat-davinci/Makefile
@@ -8,3 +8,4 @@ obj-y := clock.o dma.o
 obj-$(CONFIG_GENERIC_GPIO)	+= gpio.o
 obj-$(CONFIG_SERIAL_8250)	+= serial.o
 obj-$(CONFIG_USB_OTG)		+= usb.o
+obj-$(CONFIG_DAVINCI_MUX)	+= mux.o
Index: linux-2.6.18/arch/arm/plat-davinci/mux.c
===================================================================
--- /dev/null
+++ linux-2.6.18/arch/arm/plat-davinci/mux.c
@@ -0,0 +1,84 @@
+/*
+ * Utility to set the DaVINCI PINMUX registers from a table
+ *
+ * Author: Vladimir Barinov, MontaVista Software, Inc.
+ * Copyright (C) 2007-2008 MontaVista Software, Inc. <source@mvista.com>
+ *
+ * Based on linux/arch/arm/plat-omap/mux.c:
+ * Copyright (C) 2003 - 2005 Nokia Corporation
+ * Written by Tony Lindgren <tony.lindgren@nokia.com>
+ *
+ * This file is licensed under the terms of the GNU General Public License
+ * version 2. This program is licensed "as is" without any warranty of any
+ * kind, whether express or implied.
+ */
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/spinlock.h>
+#include <linux/io.h>
+
+#include <asm/arch/mux.h>
+#include <asm/arch/hardware.h>
+
+static struct pin_config *pin_table;
+static unsigned pin_table_sz;
+
+void __init davinci_mux_register(struct pin_config *pins, unsigned size)
+{
+	pin_table = pins;
+	pin_table_sz = size;
+}
+
+/*
+ * Sets the DAVINCI MUX register based on the table
+ */
+int __init_or_module davinci_cfg_reg(unsigned index)
+{
+	static DEFINE_SPINLOCK(mux_spin_lock);
+	struct pin_config *cfg;
+	unsigned long flags, reg_orig = 0, reg = 0;
+	int warn = 0;
+
+	if (pin_table == NULL)
+		BUG();
+
+	if (index >= pin_table_sz) {
+		printk(KERN_ERR "Invalid PINMUX index: %u, max %u\n",
+		       index, pin_table_sz);
+		dump_stack();
+		return -ENODEV;
+	}
+
+	/* Check the PinMux register in question */
+	cfg = pin_table + index;
+	if (cfg->mux_reg) {
+		unsigned long mask = cfg->mask << cfg->mask_offset;
+		unsigned long mode = cfg->mode << cfg->mask_offset;
+
+		spin_lock_irqsave(&mux_spin_lock, flags);
+		reg_orig = davinci_cfg_readl(cfg->mux_reg);
+		reg = (reg_orig & ~mask) | mode;
+
+		if ((reg_orig & mask) != mode)
+			warn = 1;
+
+		davinci_cfg_writel(reg, cfg->mux_reg);
+		spin_unlock_irqrestore(&mux_spin_lock, flags);
+	}
+
+#ifdef CONFIG_DAVINCI_MUX_WARNINGS
+	if (warn)
+		printk(KERN_WARNING "MUX: initialized %s\n", cfg->name);
+#endif
+
+#ifdef CONFIG_DAVINCI_MUX_DEBUG
+	if (cfg->debug || warn) {
+		printk(KERN_INFO "MUX: setting register %s (%#08x) for %s: "
+		       "%#08x -> %#08x\n", cfg->mux_reg_name, cfg->mux_reg,
+		       cfg->name, reg_orig, reg);
+	}
+#endif
+	return 0;
+}
+EXPORT_SYMBOL(davinci_cfg_reg);
Index: linux-2.6.18/include/asm-arm/arch-davinci/hardware.h
===================================================================
--- linux-2.6.18.orig/include/asm-arm/arch-davinci/hardware.h
+++ linux-2.6.18/include/asm-arm/arch-davinci/hardware.h
@@ -108,6 +108,9 @@
 #define PINMUX3		(DAVINCI_SYSTEM_MODULE_BASE + 0x0c)
 #define PINMUX4		(DAVINCI_SYSTEM_MODULE_BASE + 0x10)
 
+#define davinci_cfg_readl(a)		davinci_readl(a)
+#define davinci_cfg_writel(v, a)	davinci_writel(v, a)
+
 /*
  * DM355 base register addresses different from original DaVinci
  */
Index: linux-2.6.18/include/asm-arm/arch-davinci/mux.h
===================================================================
--- linux-2.6.18.orig/include/asm-arm/arch-davinci/mux.h
+++ linux-2.6.18/include/asm-arm/arch-davinci/mux.h
@@ -1,53 +1,46 @@
 /*
  * Table of the DAVINCI register configurations for the PINMUX combinations
  *
- * Author: Vladimir Barinov, MontaVista Software, Inc. <source@mvista.com>
+ * Author: Vladimir Barinov, MontaVista Software, Inc.
+ * Copyright (C) 2007-2008 MontaVista Software, Inc. <source@mvista.com>
  *
  * Based on linux/include/asm-arm/arch-omap/mux.h:
  * Copyright (C) 2003 - 2005 Nokia Corporation
  * Written by Tony Lindgren <tony.lindgren@nokia.com>
  *
- * 2007 (c) MontaVista Software, Inc. This file is licensed under
- * the terms of the GNU General Public License version 2. This program
- * is licensed "as is" without any warranty of any kind, whether express
- * or implied.
+ * This file is licensed under the terms of the GNU General Public License
+ * version 2. This program is licensed "as is" without any warranty of any
+ * kind, whether express or implied.
  */
 
 #ifndef __ASM_ARCH_MUX_H
 #define __ASM_ARCH_MUX_H
 
 #ifdef	CONFIG_DAVINCI_MUX_DEBUG
-#define MUX_REG(reg, mode_offset, mode_mask, mux_mode) \
-			.mux_reg_name = "PINMUX"#reg, \
-			.mux_reg = PINMUX##reg, \
-			.mask_offset = mode_offset, \
-			.mask = mode_mask, \
-			.mode = mux_mode,
+#define MUX_REG_NAME(reg)	"PINMUX"#reg
 #else
-#define MUX_REG(reg, mode_offset, mode_mask, mux_mode) \
-			.mux_reg = PINMUX##reg, \
-			.mask_offset = mode_offset, \
-			.mask = mode_mask, \
-			.mode = mux_mode,
-#endif /* CONFIG_DAVINCI_MUX_DEBUG */
-
-#define MUX_CFG(desc, mux_reg, mode_offset, mode_mask, mux_mode, dbg) \
-{ \
-	.name =	 desc, \
-	.debug = dbg, \
-	MUX_REG(mux_reg, mode_offset, mode_mask, mux_mode) \
-},
+#define MUX_REG_NAME(reg)	NULL
+#endif
 
-struct pin_config {
-	char *name;
-	unsigned char busy;
-	unsigned char debug;
+#define MUX_CFG(desc, reg, offset, mode_mask, mux_mode, dbg)	\
+	{							\
+		.name		= desc, 			\
+		.mux_reg_name	= MUX_REG_NAME(reg),		\
+		.mux_reg	= PINMUX##reg,			\
+		.mask_offset	= offset,			\
+		.mask		= mode_mask,			\
+		.mode		= mux_mode,			\
+		.debug		= dbg,				\
+	},
 
+struct pin_config {
+	const char *name;
 	const char *mux_reg_name;
-	const unsigned int mux_reg;
-	const unsigned char mask_offset;
-	const unsigned char mask;
-	const unsigned char mode;
+	unsigned long mux_reg;
+	unsigned char mask_offset;
+	unsigned char mask;
+	unsigned char mode;
+	unsigned char debug;
 };
 
 enum davinci_dm644x_index {
@@ -214,12 +207,12 @@ enum davinci_dm355_index {
 #ifdef	CONFIG_DAVINCI_MUX
 /* setup pin muxing in Linux */
 extern void davinci_mux_init(void);
-extern int davinci_mux_register(struct pin_config *pins, unsigned long size);
-extern int davinci_cfg_reg(unsigned long reg_cfg);
+extern void davinci_mux_register(struct pin_config *pins, unsigned size);
+extern int  davinci_cfg_reg(unsigned index);
 #else
 /* boot loader does it all (no warnings from CONFIG_DAVINCI_MUX_WARNINGS) */
-static inline void davinci_mux_init(void) { do {} while (0); }
-static inline int davinci_cfg_reg(unsigned long reg_cfg) { return 0; }
+static inline void davinci_mux_init(void) { }
+static inline int  davinci_cfg_reg(unsigned index) { return 0; }
 #endif
 
 extern void (*davinci_pinmux_setup)(unsigned int id);
Index: linux-2.6.18/mvl_patches/pro50-2100.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-2100.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2009 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(2100);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

