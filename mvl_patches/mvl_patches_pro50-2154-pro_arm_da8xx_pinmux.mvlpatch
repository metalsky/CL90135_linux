#! /usr/bin/env bash
# Patch: -pro_arm_da8xx_pinmux
# Date: Thu Feb 19 15:04:27 2009
# Source: MontaVista Software, Inc.
# MR: 28546
# Type: Enhancement
# Disposition: needs submitting to linux-arm-kernel
# Signed-off-by: Mikhail Cherkashin <mcherkashin@mvista.com>
# Signed-off-by: Steve Chen <schen@mvista.com>
# Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
# Description:
# TI DA8xx PinMux configuration.
# 
#  arch/arm/mach-da8xx/Makefile            |    1 
#  arch/arm/mach-da8xx/board-evm.c         |  114 +++++
#  arch/arm/mach-da8xx/io.c                |    2 
#  arch/arm/mach-da8xx/mux_cfg.c           |  628 ++++++++++++++++++++++++++++++++
#  include/asm-arm/arch-davinci/hardware.h |    2 
#  include/asm-arm/arch-davinci/mux.h      |  421 +++++++++++++++++++++
#  6 files changed, 1168 insertions(+)
# 

PATCHNUM=2154
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 28546
Type: Enhancement
Disposition: needs submitting to linux-arm-kernel
Signed-off-by: Mikhail Cherkashin <mcherkashin@mvista.com>
Signed-off-by: Steve Chen <schen@mvista.com>
Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
Description:
TI DA8xx PinMux configuration.

 arch/arm/mach-da8xx/Makefile            |    1 
 arch/arm/mach-da8xx/board-evm.c         |  114 +++++
 arch/arm/mach-da8xx/io.c                |    2 
 arch/arm/mach-da8xx/mux_cfg.c           |  628 ++++++++++++++++++++++++++++++++
 include/asm-arm/arch-davinci/hardware.h |    2 
 include/asm-arm/arch-davinci/mux.h      |  421 +++++++++++++++++++++
 mvl_patches/pro50-2154.c                |   16 
 7 files changed, 1184 insertions(+)

Index: linux-2.6.18/arch/arm/mach-da8xx/Makefile
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-da8xx/Makefile
+++ linux-2.6.18/arch/arm/mach-da8xx/Makefile
@@ -6,6 +6,7 @@
 # Common objects
 obj-y := time.o clock.o io.o id.o devices.o dma.o
 
+obj-$(CONFIG_DAVINCI_MUX)	+= mux_cfg.o
 obj-$(CONFIG_GENERIC_GPIO)	+= gpio.o
 obj-$(CONFIG_SPI_DAVINCI)	+= spi.o
 obj-$(CONFIG_TI_CPPI41) 	+= cppi41.o
Index: linux-2.6.18/arch/arm/mach-da8xx/board-evm.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-da8xx/board-evm.c
+++ linux-2.6.18/arch/arm/mach-da8xx/board-evm.c
@@ -413,6 +413,119 @@ static __init void da8xx_evm_irq_init(vo
 	da8xx_irq_init(da8xx_evm_default_priorities);
 }
 
+#ifdef CONFIG_DAVINCI_MUX
+
+/*
+ * UI board NAND/NOR flashes only use 8-bit data bus.
+ */
+static const short evm_emif25_pins[] = {
+	DA8XX_EMA_D_0, DA8XX_EMA_D_1, DA8XX_EMA_D_2, DA8XX_EMA_D_3,
+	DA8XX_EMA_D_4, DA8XX_EMA_D_5, DA8XX_EMA_D_6, DA8XX_EMA_D_7,
+	DA8XX_EMA_A_0, DA8XX_EMA_A_1, DA8XX_EMA_A_2, DA8XX_EMA_A_3,
+	DA8XX_EMA_A_4, DA8XX_EMA_A_5, DA8XX_EMA_A_6, DA8XX_EMA_A_7,
+	DA8XX_EMA_A_8, DA8XX_EMA_A_9, DA8XX_EMA_A_10, DA8XX_EMA_A_11,
+	DA8XX_EMA_A_12, DA8XX_EMA_BA_0, DA8XX_EMA_BA_1, DA8XX_NEMA_WE,
+	DA8XX_NEMA_CS_2, DA8XX_NEMA_CS_3, DA8XX_NEMA_OE, DA8XX_EMA_WAIT_0,
+	-1
+};
+
+/*
+ * GPIO2[1] is used as MMC_SD_WP and GPIO2[2] as MMC_SD_INS.
+ */
+static const short evm_mmc_sd_pins[] = {
+	DA8XX_MMCSD_DAT_0, DA8XX_MMCSD_DAT_1, DA8XX_MMCSD_DAT_2,
+	DA8XX_MMCSD_DAT_3, DA8XX_MMCSD_DAT_4, DA8XX_MMCSD_DAT_5,
+	DA8XX_MMCSD_DAT_6, DA8XX_MMCSD_DAT_7, DA8XX_MMCSD_CLK,
+	DA8XX_MMCSD_CMD,   DA8XX_GPIO2_1,     DA8XX_GPIO2_2,
+	-1
+};
+
+/*
+ * UART0 is not used on the EVM board.
+ * Due to the pin conflicts, evm_uart0_pins[] is empty.
+ */
+static const short evm_uart0_pins[] = {
+	-1
+};
+
+/*
+ * USB_REFCLKIN is not used on the EVM board.
+ */
+static const short evm_usb20_pins[] = {
+	DA8XX_USB0_DRVVBUS,
+	-1
+};
+static const short evm_usb11_pins[] = {
+	-1
+};
+
+static const short evm_mcasp0_pins[] = {
+	DA8XX_AXR0_9, DA8XX_AFSR0, DA8XX_ACLKR0,
+	-1
+};
+
+static const short evm_mcasp1_pins[] = {
+	DA8XX_AHCLKX1, DA8XX_ACLKX1, DA8XX_AFSX1, DA8XX_AHCLKR1, DA8XX_AFSR1,
+	DA8XX_AMUTE1, DA8XX_AXR1_0, DA8XX_AXR1_1, DA8XX_AXR1_2, DA8XX_AXR1_5,
+	DA8XX_ACLKR1, DA8XX_AXR1_6, DA8XX_AXR1_7, DA8XX_AXR1_8, DA8XX_AXR1_10,
+	DA8XX_AXR1_11,
+	-1
+};
+
+static const short evm_mcasp2_pins[] = {
+	DA8XX_AXR2_0,
+	-1
+};
+
+/*
+ * GPIO3[10] is used for SPI1 chip select instead of NSPI1_ENA due to the pin
+ * conflicts with UART2.
+ */
+static const short evm_spi1_pins[] = {
+	DA8XX_SPI1_SOMI_0, DA8XX_SPI1_SIMO_0, DA8XX_SPI1_CLK, DA8XX_GPIO3_10,
+	-1
+};
+
+/*
+ * I2C1_SCL and I2C1_SDA are not used on the EVM board.  Both are removed due
+ * to SPI1_SOMI_0 vs I2C1_SCL pin conflict.
+ */
+static const short evm_i2c_pins[] = {
+	DA8XX_I2C0_SDA, DA8XX_I2C0_SCL,
+	-1
+};
+
+/*
+ * UART1 is not used on the EVM board.
+ * Due to the pin conflicts, evm_uart1_pins[] is empty.
+ */
+static const short evm_uart1_pins[] = {
+	-1
+};
+
+static void da8xx_evm_pinmux_override(void)
+{
+	da8xx_psc0_pins[DA8XX_LPSC0_EMIF25] = evm_emif25_pins;
+	da8xx_psc0_pins[DA8XX_LPSC0_MMC_SD] = evm_mmc_sd_pins;
+
+	da8xx_psc0_pins[DA8XX_LPSC0_UART0] = evm_uart0_pins;
+	da8xx_psc1_pins[DA8XX_LPSC1_UART1] = evm_uart1_pins;
+
+	da8xx_psc1_pins[DA8XX_LPSC1_USB20] = evm_usb20_pins;
+	da8xx_psc1_pins[DA8XX_LPSC1_USB11] = evm_usb11_pins;
+
+	da8xx_psc1_pins[DA8XX_LPSC1_McASP0] = evm_mcasp0_pins;
+	da8xx_psc1_pins[DA8XX_LPSC1_McASP1] = evm_mcasp1_pins;
+	da8xx_psc1_pins[DA8XX_LPSC1_McASP2] = evm_mcasp2_pins;
+
+	da8xx_psc1_pins[DA8XX_LPSC1_SPI1] = evm_spi1_pins;
+
+	da8xx_psc1_pins[DA8XX_LPSC1_I2C] = evm_i2c_pins;
+}
+#else
+static inline void da8xx_evm_pinmux_override(void) {}
+#endif /* CONFIG_DAVINCI_MUX */
+
 static __init void da8xx_evm_psc_init(void)
 {
 	davinci_psc_config(DAVINCI_GPSC_ARMDOMAIN, 0, DA8XX_LPSC0_TPCC, 1);
@@ -436,6 +549,7 @@ static __init void da8xx_evm_psc_init(vo
 
 static void __init da8xx_evm_map_io(void)
 {
+	da8xx_evm_pinmux_override();
 	da8xx_map_common_io();
 
 	/* UART clock needs to be ready otherwise kgdbwait won't work */
Index: linux-2.6.18/arch/arm/mach-da8xx/io.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-da8xx/io.c
+++ linux-2.6.18/arch/arm/mach-da8xx/io.c
@@ -20,6 +20,7 @@
 #include <asm/tlb.h>
 #include <asm/mach/map.h>
 #include <asm/arch/clock.h>
+#include <asm/arch/mux.h>
 #include <asm/arch/hardware.h>
 #include <asm/arch/common.h>
 #include <asm/arch/cpu.h>
@@ -66,5 +67,6 @@ void __init da8xx_map_common_io(void)
 
 void __init da8xx_init_common_hw(void)
 {
+	da8xx_mux_init();
 	da8xx_clk_init();
 }
Index: linux-2.6.18/arch/arm/mach-da8xx/mux_cfg.c
===================================================================
--- /dev/null
+++ linux-2.6.18/arch/arm/mach-da8xx/mux_cfg.c
@@ -0,0 +1,628 @@
+/*
+ * DA8xx pin multiplexing configuration
+ *
+ * Copyright (c) 2008 MontaVista Software, Inc. <source@mvista.com>
+ *
+ * Based on arch/arm/mach-davinci/mux_cfg.c:
+ * Copyright (c) 2007 MontaVista Software, Inc.
+ *
+ * This file is licensed under the terms of the GNU General Public License
+ * version 2. This program is licensed "as is" without any warranty of any
+ * kind, whether express or implied.
+ */
+
+#include <linux/module.h>
+#include <linux/init.h>
+
+#include <asm/hardware.h>
+
+#include <asm/arch/mux.h>
+
+static unsigned long pinmux_in_use[20];
+
+const struct pin_config __initdata_or_module da8xx_pinmux[] = {
+/*
+ *	       description		mux	mode	mux	dbg
+ *					reg	offset	mode
+ */
+DA8XX_MUX_CFG("GPIO7_14",		0,	0,	1,	0)
+DA8XX_MUX_CFG("RTCK",			0,	0,	8,	0)
+DA8XX_MUX_CFG("GPIO7_15",		0,	4,	1,	0)
+DA8XX_MUX_CFG("EMU_0",			0,	4,	8,	0)
+DA8XX_MUX_CFG("EMB_SDCKE",		0,	8,	1,	0)
+DA8XX_MUX_CFG("EMB_CLK_GLUE",		0,	12,	1,	0)
+DA8XX_MUX_CFG("EMB_CLK",		0,	12,	2,	0)
+DA8XX_MUX_CFG("NEMB_CS_0",		0,	16,	1,	0)
+DA8XX_MUX_CFG("NEMB_CAS",		0,	20,	1,	0)
+DA8XX_MUX_CFG("NEMB_RAS",		0,	24,	1,	0)
+DA8XX_MUX_CFG("NEMB_WE",		0,	28,	1,	0)
+DA8XX_MUX_CFG("EMB_BA_1",		1,	0,	1,	0)
+DA8XX_MUX_CFG("EMB_BA_0",		1,	4,	1,	0)
+DA8XX_MUX_CFG("EMB_A_0",		1,	8,	1,	0)
+DA8XX_MUX_CFG("EMB_A_1",		1,	12,	1,	0)
+DA8XX_MUX_CFG("EMB_A_2",		1,	16,	1,	0)
+DA8XX_MUX_CFG("EMB_A_3",		1,	20,	1,	0)
+DA8XX_MUX_CFG("EMB_A_4",		1,	24,	1,	0)
+DA8XX_MUX_CFG("EMB_A_5",		1,	28,	1,	0)
+DA8XX_MUX_CFG("GPIO7_0",		1,	0,	8,	0)
+DA8XX_MUX_CFG("GPIO7_1",		1,	4,	8,	0)
+DA8XX_MUX_CFG("GPIO7_2",		1,	8,	8,	0)
+DA8XX_MUX_CFG("GPIO7_3",		1,	12,	8,	0)
+DA8XX_MUX_CFG("GPIO7_4",		1,	16,	8,	0)
+DA8XX_MUX_CFG("GPIO7_5",		1,	20,	8,	0)
+DA8XX_MUX_CFG("GPIO7_6",		1,	24,	8,	0)
+DA8XX_MUX_CFG("GPIO7_7",		1,	28,	8,	0)
+DA8XX_MUX_CFG("EMB_A_6",		2,	0,	1,	0)
+DA8XX_MUX_CFG("EMB_A_7",		2,	4,	1,	0)
+DA8XX_MUX_CFG("EMB_A_8",		2,	8,	1,	0)
+DA8XX_MUX_CFG("EMB_A_9",		2,	12,	1,	0)
+DA8XX_MUX_CFG("EMB_A_10",		2,	16,	1,	0)
+DA8XX_MUX_CFG("EMB_A_11",		2,	20,	1,	0)
+DA8XX_MUX_CFG("EMB_A_12",		2,	24,	1,	0)
+DA8XX_MUX_CFG("EMB_D_31",		2,	28,	1,	0)
+DA8XX_MUX_CFG("GPIO7_8",		2,	0,	8,	0)
+DA8XX_MUX_CFG("GPIO7_9",		2,	4,	8,	0)
+DA8XX_MUX_CFG("GPIO7_10",		2,	8,	8,	0)
+DA8XX_MUX_CFG("GPIO7_11",		2,	12,	8,	0)
+DA8XX_MUX_CFG("GPIO7_12",		2,	16,	8,	0)
+DA8XX_MUX_CFG("GPIO7_13",		2,	20,	8,	0)
+DA8XX_MUX_CFG("GPIO3_13",		2,	24,	8,	0)
+DA8XX_MUX_CFG("EMB_D_30",		3,	0,	1,	0)
+DA8XX_MUX_CFG("EMB_D_29",		3,	4,	1,	0)
+DA8XX_MUX_CFG("EMB_D_28",		3,	8,	1,	0)
+DA8XX_MUX_CFG("EMB_D_27",		3,	12,	1,	0)
+DA8XX_MUX_CFG("EMB_D_26",		3,	16,	1,	0)
+DA8XX_MUX_CFG("EMB_D_25",		3,	20,	1,	0)
+DA8XX_MUX_CFG("EMB_D_24",		3,	24,	1,	0)
+DA8XX_MUX_CFG("EMB_D_23",		3,	28,	1,	0)
+DA8XX_MUX_CFG("EMB_D_22",		4,	0,	1,	0)
+DA8XX_MUX_CFG("EMB_D_21",		4,	4,	1,	0)
+DA8XX_MUX_CFG("EMB_D_20",		4,	8,	1,	0)
+DA8XX_MUX_CFG("EMB_D_19",		4,	12,	1,	0)
+DA8XX_MUX_CFG("EMB_D_18",		4,	16,	1,	0)
+DA8XX_MUX_CFG("EMB_D_17",		4,	20,	1,	0)
+DA8XX_MUX_CFG("EMB_D_16",		4,	24,	1,	0)
+DA8XX_MUX_CFG("NEMB_WE_DQM_3",		4,	28,	1,	0)
+DA8XX_MUX_CFG("NEMB_WE_DQM_2",		5,	0,	1,	0)
+DA8XX_MUX_CFG("EMB_D_0",		5,	4,	1,	0)
+DA8XX_MUX_CFG("EMB_D_1",		5,	8,	1,	0)
+DA8XX_MUX_CFG("EMB_D_2",		5,	12,	1,	0)
+DA8XX_MUX_CFG("EMB_D_3",		5,	16,	1,	0)
+DA8XX_MUX_CFG("EMB_D_4",		5,	20,	1,	0)
+DA8XX_MUX_CFG("EMB_D_5",		5,	24,	1,	0)
+DA8XX_MUX_CFG("EMB_D_6",		5,	28,	1,	0)
+DA8XX_MUX_CFG("GPIO6_0",		5,	4,	8,	0)
+DA8XX_MUX_CFG("GPIO6_1",		5,	8,	8,	0)
+DA8XX_MUX_CFG("GPIO6_2",		5,	12,	8,	0)
+DA8XX_MUX_CFG("GPIO6_3",		5,	16,	8,	0)
+DA8XX_MUX_CFG("GPIO6_4",		5,	20,	8,	0)
+DA8XX_MUX_CFG("GPIO6_5",		5,	24,	8,	0)
+DA8XX_MUX_CFG("GPIO6_6",		5,	28,	8,	0)
+DA8XX_MUX_CFG("EMB_D_7",		6,	0,	1,	0)
+DA8XX_MUX_CFG("EMB_D_8",		6,	4,	1,	0)
+DA8XX_MUX_CFG("EMB_D_9",		6,	8,	1,	0)
+DA8XX_MUX_CFG("EMB_D_10",		6,	12,	1,	0)
+DA8XX_MUX_CFG("EMB_D_11",		6,	16,	1,	0)
+DA8XX_MUX_CFG("EMB_D_12",		6,	20,	1,	0)
+DA8XX_MUX_CFG("EMB_D_13",		6,	24,	1,	0)
+DA8XX_MUX_CFG("EMB_D_14",		6,	28,	1,	0)
+DA8XX_MUX_CFG("GPIO6_7",		6,	0,	8,	0)
+DA8XX_MUX_CFG("GPIO6_8",		6,	4,	8,	0)
+DA8XX_MUX_CFG("GPIO6_9",		6,	8,	8,	0)
+DA8XX_MUX_CFG("GPIO6_10",		6,	12,	8,	0)
+DA8XX_MUX_CFG("GPIO6_11",		6,	16,	8,	0)
+DA8XX_MUX_CFG("GPIO6_12",		6,	20,	8,	0)
+DA8XX_MUX_CFG("GPIO6_13",		6,	24,	8,	0)
+DA8XX_MUX_CFG("GPIO6_14",		6,	28,	8,	0)
+DA8XX_MUX_CFG("EMB_D_15",		7,	0,	1,	0)
+DA8XX_MUX_CFG("NEMB_WE_DQM_1",		7,	4,	1,	0)
+DA8XX_MUX_CFG("NEMB_WE_DQM_0",		7,	8,	1,	0)
+DA8XX_MUX_CFG("SPI0_SOMI_0",		7,	12,	1,	0)
+DA8XX_MUX_CFG("SPI0_SIMO_0",		7,	16,	1,	0)
+DA8XX_MUX_CFG("SPI0_CLK",		7,	20,	1,	0)
+DA8XX_MUX_CFG("NSPI0_ENA",		7,	24,	1,	0)
+DA8XX_MUX_CFG("NSPI0_SCS_0",		7,	28,	1,	0)
+DA8XX_MUX_CFG("EQEP0I",			7,	12,	2,	0)
+DA8XX_MUX_CFG("EQEP0S", 		7,	16,	2,	0)
+DA8XX_MUX_CFG("EQEP1I", 		7,	20,	2,	0)
+DA8XX_MUX_CFG("NUART0_CTS",		7,	24,	2,	0)
+DA8XX_MUX_CFG("NUART0_RTS",		7,	28,	2,	0)
+DA8XX_MUX_CFG("EQEP0A", 		7,	24,	4,	0)
+DA8XX_MUX_CFG("EQEP0B", 		7,	28,	4,	0)
+DA8XX_MUX_CFG("GPIO6_15",		7,	0,	8,	0)
+DA8XX_MUX_CFG("GPIO5_14",		7,	4,	8,	0)
+DA8XX_MUX_CFG("GPIO5_15",		7,	8,	8,	0)
+DA8XX_MUX_CFG("GPIO5_0",		7,	12,	8,	0)
+DA8XX_MUX_CFG("GPIO5_1",		7,	16,	8,	0)
+DA8XX_MUX_CFG("GPIO5_2",		7,	20,	8,	0)
+DA8XX_MUX_CFG("GPIO5_3",		7,	24,	8,	0)
+DA8XX_MUX_CFG("GPIO5_4",		7,	28,	8,	0)
+DA8XX_MUX_CFG("SPI1_SOMI_0",		8,	0,	1,	0)
+DA8XX_MUX_CFG("SPI1_SIMO_0",		8,	4,	1,	0)
+DA8XX_MUX_CFG("SPI1_CLK",		8,	8,	1,	0)
+DA8XX_MUX_CFG("UART0_RXD",		8,	12,	1,	0)
+DA8XX_MUX_CFG("UART0_TXD",		8,	16,	1,	0)
+DA8XX_MUX_CFG("AXR1_10",		8,	20,	1,	0)
+DA8XX_MUX_CFG("AXR1_11",		8,	24,	1,	0)
+DA8XX_MUX_CFG("NSPI1_ENA",		8,	28,	1,	0)
+DA8XX_MUX_CFG("I2C1_SCL",		8,	0,	2,	0)
+DA8XX_MUX_CFG("I2C1_SDA",		8,	4,	2,	0)
+DA8XX_MUX_CFG("EQEP1S", 		8,	8,	2,	0)
+DA8XX_MUX_CFG("I2C0_SDA",		8,	12,	2,	0)
+DA8XX_MUX_CFG("I2C0_SCL",		8,	16,	2,	0)
+DA8XX_MUX_CFG("UART2_RXD",		8,	28,	2,	0)
+DA8XX_MUX_CFG("TM64P0_IN12",		8,	12,	4,	0)
+DA8XX_MUX_CFG("TM64P0_OUT12",		8,	16,	4,	0)
+DA8XX_MUX_CFG("GPIO5_5",		8,	0,	8,	0)
+DA8XX_MUX_CFG("GPIO5_6",		8,	4,	8,	0)
+DA8XX_MUX_CFG("GPIO5_7",		8,	8,	8,	0)
+DA8XX_MUX_CFG("GPIO5_8",		8,	12,	8,	0)
+DA8XX_MUX_CFG("GPIO5_9",		8,	16,	8,	0)
+DA8XX_MUX_CFG("GPIO5_10",		8,	20,	8,	0)
+DA8XX_MUX_CFG("GPIO5_11",		8,	24,	8,	0)
+DA8XX_MUX_CFG("GPIO5_12",		8,	28,	8,	0)
+DA8XX_MUX_CFG("NSPI1_SCS_0",		9,	0,	1,	0)
+DA8XX_MUX_CFG("USB0_DRVVBUS",		9,	4,	1,	0)
+DA8XX_MUX_CFG("AHCLKX0",		9,	8,	1,	0)
+DA8XX_MUX_CFG("ACLKX0", 		9,	12,	1,	0)
+DA8XX_MUX_CFG("AFSX0",			9,	16,	1,	0)
+DA8XX_MUX_CFG("AHCLKR0",		9,	20,	1,	0)
+DA8XX_MUX_CFG("ACLKR0", 		9,	24,	1,	0)
+DA8XX_MUX_CFG("AFSR0",			9,	28,	1,	0)
+DA8XX_MUX_CFG("UART2_TXD",		9,	0,	2,	0)
+DA8XX_MUX_CFG("AHCLKX2",		9,	8,	2,	0)
+DA8XX_MUX_CFG("ECAP0_APWM0",		9,	12,	2,	0)
+DA8XX_MUX_CFG("RMII_MHZ_50_CLK",	9,	20,	2,	0)
+DA8XX_MUX_CFG("ECAP1_APWM1",		9,	24,	2,	0)
+DA8XX_MUX_CFG("USB_REFCLKIN",		9,	8,	4,	0)
+DA8XX_MUX_CFG("GPIO5_13",		9,	0,	8,	0)
+DA8XX_MUX_CFG("GPIO4_15",		9,	4,	8,	0)
+DA8XX_MUX_CFG("GPIO2_11",		9,	8,	8,	0)
+DA8XX_MUX_CFG("GPIO2_12",		9,	12,	8,	0)
+DA8XX_MUX_CFG("GPIO2_13",		9,	16,	8,	0)
+DA8XX_MUX_CFG("GPIO2_14",		9,	20,	8,	0)
+DA8XX_MUX_CFG("GPIO2_15",		9,	24,	8,	0)
+DA8XX_MUX_CFG("GPIO3_12",		9,	28,	8,	0)
+DA8XX_MUX_CFG("AMUTE0", 		10,	0,	1,	0)
+DA8XX_MUX_CFG("AXR0_0", 		10,	4,	1,	0)
+DA8XX_MUX_CFG("AXR0_1", 		10,	8,	1,	0)
+DA8XX_MUX_CFG("AXR0_2", 		10,	12,	1,	0)
+DA8XX_MUX_CFG("AXR0_3", 		10,	16,	1,	0)
+DA8XX_MUX_CFG("AXR0_4", 		10,	20,	1,	0)
+DA8XX_MUX_CFG("AXR0_5", 		10,	24,	1,	0)
+DA8XX_MUX_CFG("AXR0_6", 		10,	28,	1,	0)
+DA8XX_MUX_CFG("RMII_TXD_0",		10,	4,	2,	0)
+DA8XX_MUX_CFG("RMII_TXD_1",		10,	8,	2,	0)
+DA8XX_MUX_CFG("RMII_TXEN",		10,	12,	2,	0)
+DA8XX_MUX_CFG("RMII_CRS_DV",		10,	16,	2,	0)
+DA8XX_MUX_CFG("RMII_RXD_0",		10,	20,	2,	0)
+DA8XX_MUX_CFG("RMII_RXD_1",		10,	24,	2,	0)
+DA8XX_MUX_CFG("RMII_RXER",		10,	28,	2,	0)
+DA8XX_MUX_CFG("AFSR2",			10,	4,	4,	0)
+DA8XX_MUX_CFG("ACLKX2", 		10,	8,	4,	0)
+DA8XX_MUX_CFG("AXR2_3", 		10,	12,	4,	0)
+DA8XX_MUX_CFG("AXR2_2", 		10,	16,	4,	0)
+DA8XX_MUX_CFG("AXR2_1", 		10,	20,	4,	0)
+DA8XX_MUX_CFG("AFSX2",			10,	24,	4,	0)
+DA8XX_MUX_CFG("ACLKR2", 		10,	28,	4,	0)
+DA8XX_MUX_CFG("NRESETOUT",		10,	0,	8,	0)
+DA8XX_MUX_CFG("GPIO3_0",		10,	4,	8,	0)
+DA8XX_MUX_CFG("GPIO3_1",		10,	8,	8,	0)
+DA8XX_MUX_CFG("GPIO3_2",		10,	12,	8,	0)
+DA8XX_MUX_CFG("GPIO3_3",		10,	16,	8,	0)
+DA8XX_MUX_CFG("GPIO3_4",		10,	20,	8,	0)
+DA8XX_MUX_CFG("GPIO3_5",		10,	24,	8,	0)
+DA8XX_MUX_CFG("GPIO3_6",		10,	28,	8,	0)
+DA8XX_MUX_CFG("AXR0_7", 		11,	0,	1,	0)
+DA8XX_MUX_CFG("AXR0_8", 		11,	4,	1,	0)
+DA8XX_MUX_CFG("UART1_RXD",		11,	8,	1,	0)
+DA8XX_MUX_CFG("UART1_TXD",		11,	12,	1,	0)
+DA8XX_MUX_CFG("AXR0_11",		11,	16,	1,	0)
+DA8XX_MUX_CFG("AHCLKX1",		11,	20,	1,	0)
+DA8XX_MUX_CFG("ACLKX1", 		11,	24,	1,	0)
+DA8XX_MUX_CFG("AFSX1",			11,	28,	1,	0)
+DA8XX_MUX_CFG("MDIO_CLK",		11,	0,	2,	0)
+DA8XX_MUX_CFG("MDIO_D", 		11,	4,	2,	0)
+DA8XX_MUX_CFG("AXR0_9", 		11,	8,	2,	0)
+DA8XX_MUX_CFG("AXR0_10",		11,	12,	2,	0)
+DA8XX_MUX_CFG("EPWM0B", 		11,	20,	2,	0)
+DA8XX_MUX_CFG("EPWM0A", 		11,	24,	2,	0)
+DA8XX_MUX_CFG("EPWMSYNCI",		11,	28,	2,	0)
+DA8XX_MUX_CFG("AXR2_0", 		11,	16,	4,	0)
+DA8XX_MUX_CFG("EPWMSYNC0",		11,	28,	4,	0)
+DA8XX_MUX_CFG("GPIO3_7",		11,	0,	8,	0)
+DA8XX_MUX_CFG("GPIO3_8",		11,	4,	8,	0)
+DA8XX_MUX_CFG("GPIO3_9",		11,	8,	8,	0)
+DA8XX_MUX_CFG("GPIO3_10",		11,	12,	8,	0)
+DA8XX_MUX_CFG("GPIO3_11",		11,	16,	8,	0)
+DA8XX_MUX_CFG("GPIO3_14",		11,	20,	8,	0)
+DA8XX_MUX_CFG("GPIO3_15",		11,	24,	8,	0)
+DA8XX_MUX_CFG("GPIO4_10",		11,	28,	8,	0)
+DA8XX_MUX_CFG("AHCLKR1",		12,	0,	1,	0)
+DA8XX_MUX_CFG("ACLKR1", 		12,	4,	1,	0)
+DA8XX_MUX_CFG("AFSR1",			12,	8,	1,	0)
+DA8XX_MUX_CFG("AMUTE1", 		12,	12,	1,	0)
+DA8XX_MUX_CFG("AXR1_0", 		12,	16,	1,	0)
+DA8XX_MUX_CFG("AXR1_1", 		12,	20,	1,	0)
+DA8XX_MUX_CFG("AXR1_2", 		12,	24,	1,	0)
+DA8XX_MUX_CFG("AXR1_3", 		12,	28,	1,	0)
+DA8XX_MUX_CFG("ECAP2_APWM2",		12,	4,	2,	0)
+DA8XX_MUX_CFG("EHRPWMGLUETZ",		12,	12,	2,	0)
+DA8XX_MUX_CFG("EQEP1A", 		12,	28,	2,	0)
+DA8XX_MUX_CFG("GPIO4_11",		12,	0,	8,	0)
+DA8XX_MUX_CFG("GPIO4_12",		12,	4,	8,	0)
+DA8XX_MUX_CFG("GPIO4_13",		12,	8,	8,	0)
+DA8XX_MUX_CFG("GPIO4_14",		12,	12,	8,	0)
+DA8XX_MUX_CFG("GPIO4_0",		12,	16,	8,	0)
+DA8XX_MUX_CFG("GPIO4_1",		12,	20,	8,	0)
+DA8XX_MUX_CFG("GPIO4_2",		12,	24,	8,	0)
+DA8XX_MUX_CFG("GPIO4_3",		12,	28,	8,	0)
+DA8XX_MUX_CFG("AXR1_4", 		13,	0,	1,	0)
+DA8XX_MUX_CFG("AXR1_5", 		13,	4,	1,	0)
+DA8XX_MUX_CFG("AXR1_6", 		13,	8,	1,	0)
+DA8XX_MUX_CFG("AXR1_7", 		13,	12,	1,	0)
+DA8XX_MUX_CFG("AXR1_8", 		13,	16,	1,	0)
+DA8XX_MUX_CFG("AXR1_9", 		13,	20,	1,	0)
+DA8XX_MUX_CFG("EMA_D_0",		13,	24,	1,	0)
+DA8XX_MUX_CFG("EMA_D_1",		13,	28,	1,	0)
+DA8XX_MUX_CFG("EQEP1B", 		13,	0,	2,	0)
+DA8XX_MUX_CFG("EPWM2B", 		13,	4,	2,	0)
+DA8XX_MUX_CFG("EPWM2A", 		13,	8,	2,	0)
+DA8XX_MUX_CFG("EPWM1B", 		13,	12,	2,	0)
+DA8XX_MUX_CFG("EPWM1A", 		13,	16,	2,	0)
+DA8XX_MUX_CFG("MMCSD_DAT_0",		13,	24,	2,	0)
+DA8XX_MUX_CFG("MMCSD_DAT_1",		13,	28,	2,	0)
+DA8XX_MUX_CFG("UHPI_HD_0",		13,	24,	4,	0)
+DA8XX_MUX_CFG("UHPI_HD_1",		13,	28,	4,	0)
+DA8XX_MUX_CFG("GPIO4_4",		13,	0,	8,	0)
+DA8XX_MUX_CFG("GPIO4_5",		13,	4,	8,	0)
+DA8XX_MUX_CFG("GPIO4_6",		13,	8,	8,	0)
+DA8XX_MUX_CFG("GPIO4_7",		13,	12,	8,	0)
+DA8XX_MUX_CFG("GPIO4_8",		13,	16,	8,	0)
+DA8XX_MUX_CFG("GPIO4_9",		13,	20,	8,	0)
+DA8XX_MUX_CFG("GPIO0_0",		13,	24,	8,	0)
+DA8XX_MUX_CFG("GPIO0_1",		13,	28,	8,	0)
+DA8XX_MUX_CFG("EMA_D_2",		14,	0,	1,	0)
+DA8XX_MUX_CFG("EMA_D_3",		14,	4,	1,	0)
+DA8XX_MUX_CFG("EMA_D_4",		14,	8,	1,	0)
+DA8XX_MUX_CFG("EMA_D_5",		14,	12,	1,	0)
+DA8XX_MUX_CFG("EMA_D_6",		14,	16,	1,	0)
+DA8XX_MUX_CFG("EMA_D_7",		14,	20,	1,	0)
+DA8XX_MUX_CFG("EMA_D_8",		14,	24,	1,	0)
+DA8XX_MUX_CFG("EMA_D_9",		14,	28,	1,	0)
+DA8XX_MUX_CFG("MMCSD_DAT_2",		14,	0,	2,	0)
+DA8XX_MUX_CFG("MMCSD_DAT_3",		14,	4,	2,	0)
+DA8XX_MUX_CFG("MMCSD_DAT_4",		14,	8,	2,	0)
+DA8XX_MUX_CFG("MMCSD_DAT_5",		14,	12,	2,	0)
+DA8XX_MUX_CFG("MMCSD_DAT_6",		14,	16,	2,	0)
+DA8XX_MUX_CFG("MMCSD_DAT_7",		14,	20,	2,	0)
+DA8XX_MUX_CFG("UHPI_HD_8",		14,	24,	2,	0)
+DA8XX_MUX_CFG("UHPI_HD_9",		14,	28,	2,	0)
+DA8XX_MUX_CFG("UHPI_HD_2",		14,	0,	4,	0)
+DA8XX_MUX_CFG("UHPI_HD_3",		14,	4,	4,	0)
+DA8XX_MUX_CFG("UHPI_HD_4",		14,	8,	4,	0)
+DA8XX_MUX_CFG("UHPI_HD_5",		14,	12,	4,	0)
+DA8XX_MUX_CFG("UHPI_HD_6",		14,	16,	4,	0)
+DA8XX_MUX_CFG("UHPI_HD_7",		14,	20,	4,	0)
+DA8XX_MUX_CFG("LCD_D_8",		14,	24,	4,	0)
+DA8XX_MUX_CFG("LCD_D_9",		14,	28,	4,	0)
+DA8XX_MUX_CFG("GPIO0_2",		14,	0,	8,	0)
+DA8XX_MUX_CFG("GPIO0_3",		14,	4,	8,	0)
+DA8XX_MUX_CFG("GPIO0_4",		14,	8,	8,	0)
+DA8XX_MUX_CFG("GPIO0_5",		14,	12,	8,	0)
+DA8XX_MUX_CFG("GPIO0_6",		14,	16,	8,	0)
+DA8XX_MUX_CFG("GPIO0_7",		14,	20,	8,	0)
+DA8XX_MUX_CFG("GPIO0_8",		14,	24,	8,	0)
+DA8XX_MUX_CFG("GPIO0_9",		14,	28,	8,	0)
+DA8XX_MUX_CFG("EMA_D_10",		15,	0,	1,	0)
+DA8XX_MUX_CFG("EMA_D_11",		15,	4,	1,	0)
+DA8XX_MUX_CFG("EMA_D_12",		15,	8,	1,	0)
+DA8XX_MUX_CFG("EMA_D_13",		15,	12,	1,	0)
+DA8XX_MUX_CFG("EMA_D_14",		15,	16,	1,	0)
+DA8XX_MUX_CFG("EMA_D_15",		15,	20,	1,	0)
+DA8XX_MUX_CFG("EMA_A_0",		15,	24,	1,	0)
+DA8XX_MUX_CFG("EMA_A_1",		15,	28,	1,	0)
+DA8XX_MUX_CFG("UHPI_HD_10",		15,	0,	2,	0)
+DA8XX_MUX_CFG("UHPI_HD_11",		15,	4,	2,	0)
+DA8XX_MUX_CFG("UHPI_HD_12",		15,	8,	2,	0)
+DA8XX_MUX_CFG("UHPI_HD_13",		15,	12,	2,	0)
+DA8XX_MUX_CFG("UHPI_HD_14",		15,	16,	2,	0)
+DA8XX_MUX_CFG("UHPI_HD_15",		15,	20,	2,	0)
+DA8XX_MUX_CFG("LCD_D_7",		15,	24,	2,	0)
+DA8XX_MUX_CFG("MMCSD_CLK",		15,	28,	2,	0)
+DA8XX_MUX_CFG("LCD_D_10",		15,	0,	4,	0)
+DA8XX_MUX_CFG("LCD_D_11",		15,	4,	4,	0)
+DA8XX_MUX_CFG("LCD_D_12",		15,	8,	4,	0)
+DA8XX_MUX_CFG("LCD_D_13",		15,	12,	4,	0)
+DA8XX_MUX_CFG("LCD_D_14",		15,	16,	4,	0)
+DA8XX_MUX_CFG("LCD_D_15",		15,	20,	4,	0)
+DA8XX_MUX_CFG("UHPI_HCNTL0",		15,	28,	4,	0)
+DA8XX_MUX_CFG("GPIO0_10",		15,	0,	8,	0)
+DA8XX_MUX_CFG("GPIO0_11",		15,	4,	8,	0)
+DA8XX_MUX_CFG("GPIO0_12",		15,	8,	8,	0)
+DA8XX_MUX_CFG("GPIO0_13",		15,	12,	8,	0)
+DA8XX_MUX_CFG("GPIO0_14",		15,	16,	8,	0)
+DA8XX_MUX_CFG("GPIO0_15",		15,	20,	8,	0)
+DA8XX_MUX_CFG("GPIO1_0",		15,	24,	8,	0)
+DA8XX_MUX_CFG("GPIO1_1",		15,	28,	8,	0)
+DA8XX_MUX_CFG("EMA_A_2",		16,	0,	1,	0)
+DA8XX_MUX_CFG("EMA_A_3",		16,	4,	1,	0)
+DA8XX_MUX_CFG("EMA_A_4",		16,	8,	1,	0)
+DA8XX_MUX_CFG("EMA_A_5",		16,	12,	1,	0)
+DA8XX_MUX_CFG("EMA_A_6",		16,	16,	1,	0)
+DA8XX_MUX_CFG("EMA_A_7",		16,	20,	1,	0)
+DA8XX_MUX_CFG("EMA_A_8",		16,	24,	1,	0)
+DA8XX_MUX_CFG("EMA_A_9",		16,	28,	1,	0)
+DA8XX_MUX_CFG("MMCSD_CMD",		16,	0,	2,	0)
+DA8XX_MUX_CFG("LCD_D_6",		16,	4,	2,	0)
+DA8XX_MUX_CFG("LCD_D_3",		16,	8,	2,	0)
+DA8XX_MUX_CFG("LCD_D_2",		16,	12,	2,	0)
+DA8XX_MUX_CFG("LCD_D_1",		16,	16,	2,	0)
+DA8XX_MUX_CFG("LCD_D_0",		16,	20,	2,	0)
+DA8XX_MUX_CFG("LCD_PCLK",		16,	24,	2,	0)
+DA8XX_MUX_CFG("LCD_HSYNC",		16,	28,	2,	0)
+DA8XX_MUX_CFG("UHPI_HCNTL1",		16,	0,	4,	0)
+DA8XX_MUX_CFG("GPIO1_2",		16,	0,	8,	0)
+DA8XX_MUX_CFG("GPIO1_3",		16,	4,	8,	0)
+DA8XX_MUX_CFG("GPIO1_4",		16,	8,	8,	0)
+DA8XX_MUX_CFG("GPIO1_5",		16,	12,	8,	0)
+DA8XX_MUX_CFG("GPIO1_6",		16,	16,	8,	0)
+DA8XX_MUX_CFG("GPIO1_7",		16,	20,	8,	0)
+DA8XX_MUX_CFG("GPIO1_8",		16,	24,	8,	0)
+DA8XX_MUX_CFG("GPIO1_9",		16,	28,	8,	0)
+DA8XX_MUX_CFG("EMA_A_10",		17,	0,	1,	0)
+DA8XX_MUX_CFG("EMA_A_11",		17,	4,	1,	0)
+DA8XX_MUX_CFG("EMA_A_12",		17,	8,	1,	0)
+DA8XX_MUX_CFG("EMA_BA_1",		17,	12,	1,	0)
+DA8XX_MUX_CFG("EMA_BA_0",		17,	16,	1,	0)
+DA8XX_MUX_CFG("EMA_CLK",		17,	20,	1,	0)
+DA8XX_MUX_CFG("EMA_SDCKE",		17,	24,	1,	0)
+DA8XX_MUX_CFG("NEMA_CAS",		17,	28,	1,	0)
+DA8XX_MUX_CFG("LCD_VSYNC",		17,	0,	2,	0)
+DA8XX_MUX_CFG("NLCD_AC_ENB_CS", 	17,	4,	2,	0)
+DA8XX_MUX_CFG("LCD_MCLK",		17,	8,	2,	0)
+DA8XX_MUX_CFG("LCD_D_5",		17,	12,	2,	0)
+DA8XX_MUX_CFG("LCD_D_4",		17,	16,	2,	0)
+DA8XX_MUX_CFG("OBSCLK", 		17,	20,	2,	0)
+DA8XX_MUX_CFG("NEMA_CS_4",		17,	28,	2,	0)
+DA8XX_MUX_CFG("UHPI_HHWIL",		17,	12,	4,	0)
+DA8XX_MUX_CFG("AHCLKR2",		17,	20,	4,	0)
+DA8XX_MUX_CFG("GPIO1_10",		17,	0,	8,	0)
+DA8XX_MUX_CFG("GPIO1_11",		17,	4,	8,	0)
+DA8XX_MUX_CFG("GPIO1_12",		17,	8,	8,	0)
+DA8XX_MUX_CFG("GPIO1_13",		17,	12,	8,	0)
+DA8XX_MUX_CFG("GPIO1_14",		17,	16,	8,	0)
+DA8XX_MUX_CFG("GPIO1_15",		17,	20,	8,	0)
+DA8XX_MUX_CFG("GPIO2_0",		17,	24,	8,	0)
+DA8XX_MUX_CFG("GPIO2_1",		17,	28,	8,	0)
+DA8XX_MUX_CFG("NEMA_RAS",		18,	0,	1,	0)
+DA8XX_MUX_CFG("NEMA_WE",		18,	4,	1,	0)
+DA8XX_MUX_CFG("NEMA_CS_0",		18,	8,	1,	0)
+DA8XX_MUX_CFG("NEMA_CS_2",		18,	12,	1,	0)
+DA8XX_MUX_CFG("NEMA_CS_3",		18,	16,	1,	0)
+DA8XX_MUX_CFG("NEMA_OE",		18,	20,	1,	0)
+DA8XX_MUX_CFG("NEMA_WE_DQM_1",		18,	24,	1,	0)
+DA8XX_MUX_CFG("NEMA_WE_DQM_0",		18,	28,	1,	0)
+DA8XX_MUX_CFG("NEMA_CS_5",		18,	0,	2,	0)
+DA8XX_MUX_CFG("UHPI_HRNW",		18,	4,	2,	0)
+DA8XX_MUX_CFG("NUHPI_HAS",		18,	8,	2,	0)
+DA8XX_MUX_CFG("NUHPI_HCS",		18,	12,	2,	0)
+DA8XX_MUX_CFG("NUHPI_HDS1",		18,	20,	2,	0)
+DA8XX_MUX_CFG("NUHPI_HDS2",		18,	24,	2,	0)
+DA8XX_MUX_CFG("NUHPI_HINT",		18,	28,	2,	0)
+DA8XX_MUX_CFG("AXR0_12",		18,	4,	4,	0)
+DA8XX_MUX_CFG("AMUTE2", 		18,	16,	4,	0)
+DA8XX_MUX_CFG("AXR0_13",		18,	20,	4,	0)
+DA8XX_MUX_CFG("AXR0_14",		18,	24,	4,	0)
+DA8XX_MUX_CFG("AXR0_15",		18,	28,	4,	0)
+DA8XX_MUX_CFG("GPIO2_2",		18,	0,	8,	0)
+DA8XX_MUX_CFG("GPIO2_3",		18,	4,	8,	0)
+DA8XX_MUX_CFG("GPIO2_4",		18,	8,	8,	0)
+DA8XX_MUX_CFG("GPIO2_5",		18,	12,	8,	0)
+DA8XX_MUX_CFG("GPIO2_6",		18,	16,	8,	0)
+DA8XX_MUX_CFG("GPIO2_7",		18,	20,	8,	0)
+DA8XX_MUX_CFG("GPIO2_8",		18,	24,	8,	0)
+DA8XX_MUX_CFG("GPIO2_9",		18,	28,	8,	0)
+DA8XX_MUX_CFG("EMA_WAIT_0",		19,	0,	1,	0)
+DA8XX_MUX_CFG("NUHPI_HRDY",		19,	0,	2,	0)
+DA8XX_MUX_CFG("GPIO2_10",		19,	0,	8,	0)
+};
+
+static const short da8xx_emif25_pins[] = {
+	DA8XX_EMA_D_0, DA8XX_EMA_D_1, DA8XX_EMA_D_2, DA8XX_EMA_D_3,
+	DA8XX_EMA_D_4, DA8XX_EMA_D_5, DA8XX_EMA_D_6, DA8XX_EMA_D_7,
+	DA8XX_EMA_D_8, DA8XX_EMA_D_9, DA8XX_EMA_D_10, DA8XX_EMA_D_11,
+	DA8XX_EMA_D_12, DA8XX_EMA_D_13, DA8XX_EMA_D_14, DA8XX_EMA_D_15,
+	DA8XX_EMA_A_0, DA8XX_EMA_A_1, DA8XX_EMA_A_2, DA8XX_EMA_A_3,
+	DA8XX_EMA_A_4, DA8XX_EMA_A_5, DA8XX_EMA_A_6, DA8XX_EMA_A_7,
+	DA8XX_EMA_A_8, DA8XX_EMA_A_9, DA8XX_EMA_A_10, DA8XX_EMA_A_11,
+	DA8XX_EMA_A_12, DA8XX_EMA_BA_0, DA8XX_EMA_BA_1, DA8XX_EMA_CLK,
+	DA8XX_EMA_SDCKE, DA8XX_NEMA_CS_4, DA8XX_NEMA_CS_5, DA8XX_NEMA_WE,
+	DA8XX_NEMA_CS_0, DA8XX_NEMA_CS_2, DA8XX_NEMA_CS_3, DA8XX_NEMA_OE,
+	DA8XX_NEMA_WE_DQM_1, DA8XX_NEMA_WE_DQM_0, DA8XX_EMA_WAIT_0,
+	-1
+};
+
+static const short da8xx_spi0_pins[] = {
+	DA8XX_SPI0_SOMI_0, DA8XX_SPI0_SIMO_0, DA8XX_SPI0_CLK, DA8XX_NSPI0_ENA,
+	DA8XX_NSPI0_SCS_0,
+	-1
+};
+
+static const short da8xx_mmc_sd_pins[] = {
+	DA8XX_MMCSD_DAT_0, DA8XX_MMCSD_DAT_1, DA8XX_MMCSD_DAT_2,
+	DA8XX_MMCSD_DAT_3, DA8XX_MMCSD_DAT_4, DA8XX_MMCSD_DAT_5,
+	DA8XX_MMCSD_DAT_6, DA8XX_MMCSD_DAT_7, DA8XX_MMCSD_CLK,
+	DA8XX_MMCSD_CMD,
+	-1
+};
+
+static const short da8xx_uart0_pins[] = {
+	DA8XX_NUART0_CTS, DA8XX_NUART0_RTS, DA8XX_UART0_RXD, DA8XX_UART0_TXD,
+	-1
+};
+
+static const short da8xx_usb20_pins[] = {
+	DA8XX_USB0_DRVVBUS, DA8XX_USB_REFCLKIN,
+	-1
+};
+
+static const short da8xx_usb11_pins[] = {
+	DA8XX_USB_REFCLKIN,
+	-1
+};
+
+static const short da8xx_uhpi_pins[] = {
+	DA8XX_UHPI_HD_0, DA8XX_UHPI_HD_1, DA8XX_UHPI_HD_2, DA8XX_UHPI_HD_3,
+	DA8XX_UHPI_HD_4, DA8XX_UHPI_HD_5, DA8XX_UHPI_HD_6, DA8XX_UHPI_HD_7,
+	DA8XX_UHPI_HD_8, DA8XX_UHPI_HD_9, DA8XX_UHPI_HD_10, DA8XX_UHPI_HD_11,
+	DA8XX_UHPI_HD_12, DA8XX_UHPI_HD_13, DA8XX_UHPI_HD_14, DA8XX_UHPI_HD_15,
+	DA8XX_UHPI_HCNTL0, DA8XX_UHPI_HCNTL1, DA8XX_UHPI_HHWIL, DA8XX_UHPI_HRNW,
+	DA8XX_NUHPI_HAS, DA8XX_NUHPI_HCS, DA8XX_NUHPI_HDS1, DA8XX_NUHPI_HDS2,
+	DA8XX_NUHPI_HINT, DA8XX_NUHPI_HRDY,
+	-1
+};
+
+static const short da8xx_cpgmac_pins[] = {
+	DA8XX_RMII_TXD_0, DA8XX_RMII_TXD_1, DA8XX_RMII_TXEN, DA8XX_RMII_CRS_DV,
+	DA8XX_RMII_RXD_0, DA8XX_RMII_RXD_1, DA8XX_RMII_RXER, DA8XX_MDIO_CLK,
+	DA8XX_MDIO_D,
+	-1
+};
+
+static const short da8xx_emif3c_pins[] = {
+	DA8XX_EMB_SDCKE, DA8XX_EMB_CLK_GLUE, DA8XX_EMB_CLK, DA8XX_NEMB_CS_0,
+	DA8XX_NEMB_CAS, DA8XX_NEMB_RAS, DA8XX_NEMB_WE, DA8XX_EMB_BA_1,
+	DA8XX_EMB_BA_0, DA8XX_EMB_A_0, DA8XX_EMB_A_1, DA8XX_EMB_A_2,
+	DA8XX_EMB_A_3, DA8XX_EMB_A_4, DA8XX_EMB_A_5, DA8XX_EMB_A_6,
+	DA8XX_EMB_A_7, DA8XX_EMB_A_8, DA8XX_EMB_A_9, DA8XX_EMB_A_10,
+	DA8XX_EMB_A_11, DA8XX_EMB_A_12, DA8XX_NEMB_WE_DQM_3,
+	DA8XX_NEMB_WE_DQM_2, DA8XX_EMB_D_0, DA8XX_EMB_D_1, DA8XX_EMB_D_2,
+	DA8XX_EMB_D_3, DA8XX_EMB_D_4, DA8XX_EMB_D_5, DA8XX_EMB_D_6,
+	DA8XX_EMB_D_7, DA8XX_EMB_D_8, DA8XX_EMB_D_9, DA8XX_EMB_D_10,
+	DA8XX_EMB_D_11, DA8XX_EMB_D_12, DA8XX_EMB_D_13, DA8XX_EMB_D_14,
+	DA8XX_EMB_D_15, DA8XX_EMB_D_16, DA8XX_EMB_D_17, DA8XX_EMB_D_18,
+	DA8XX_EMB_D_19, DA8XX_EMB_D_20, DA8XX_EMB_D_21, DA8XX_EMB_D_22,
+	DA8XX_EMB_D_23, DA8XX_EMB_D_24, DA8XX_EMB_D_25, DA8XX_EMB_D_26,
+	DA8XX_EMB_D_27, DA8XX_EMB_D_28, DA8XX_EMB_D_29, DA8XX_EMB_D_30,
+	DA8XX_EMB_D_31, DA8XX_NEMB_WE_DQM_1, DA8XX_NEMB_WE_DQM_0,
+	-1
+};
+
+static const short da8xx_mcasp0_pins[] = {
+	DA8XX_AHCLKX0, DA8XX_ACLKX0, DA8XX_AFSX0,
+	DA8XX_AHCLKR0, DA8XX_ACLKR0, DA8XX_AFSR0, DA8XX_AMUTE0,
+	DA8XX_AXR0_0, DA8XX_AXR0_1, DA8XX_AXR0_2, DA8XX_AXR0_3,
+	DA8XX_AXR0_4, DA8XX_AXR0_5, DA8XX_AXR0_6, DA8XX_AXR0_7,
+	DA8XX_AXR0_8, DA8XX_AXR0_9, DA8XX_AXR0_10, DA8XX_AXR0_11,
+	DA8XX_AXR0_12, DA8XX_AXR0_13, DA8XX_AXR0_14, DA8XX_AXR0_15,
+	-1
+};
+
+static const short da8xx_mcasp1_pins[] = {
+	DA8XX_AHCLKX1, DA8XX_ACLKX1, DA8XX_AFSX1,
+	DA8XX_AHCLKR1, DA8XX_ACLKR1, DA8XX_AFSR1, DA8XX_AMUTE1,
+	DA8XX_AXR1_0, DA8XX_AXR1_1, DA8XX_AXR1_2, DA8XX_AXR1_3,
+	DA8XX_AXR1_4, DA8XX_AXR1_5, DA8XX_AXR1_6, DA8XX_AXR1_7,
+	DA8XX_AXR1_8, DA8XX_AXR1_9, DA8XX_AXR1_10, DA8XX_AXR1_11,
+	-1
+};
+
+static const short da8xx_mcasp2_pins[] = {
+	DA8XX_AHCLKX2, DA8XX_ACLKX2, DA8XX_AFSX2,
+	DA8XX_AHCLKR2, DA8XX_ACLKR2, DA8XX_AFSR2, DA8XX_AMUTE2,
+	DA8XX_AXR2_0, DA8XX_AXR2_1, DA8XX_AXR2_2, DA8XX_AXR2_3,
+	-1
+};
+
+static const short da8xx_spi1_pins[] = {
+	DA8XX_SPI1_SOMI_0, DA8XX_SPI1_SIMO_0, DA8XX_SPI1_CLK, DA8XX_NSPI1_ENA,
+	DA8XX_NSPI1_SCS_0,
+	-1
+};
+
+static const short da8xx_i2c_pins[] = {
+	DA8XX_I2C0_SDA, DA8XX_I2C0_SCL, DA8XX_I2C1_SCL, DA8XX_I2C1_SDA,
+	-1
+};
+
+static const short da8xx_uart1_pins[] = {
+	DA8XX_UART1_RXD, DA8XX_UART1_TXD,
+	-1
+};
+
+static const short da8xx_uart2_pins[] = {
+	DA8XX_UART2_RXD, DA8XX_UART2_TXD,
+	-1
+};
+
+static const short da8xx_lcdcntl_pins[] = {
+	DA8XX_LCD_D_0, DA8XX_LCD_D_1, DA8XX_LCD_D_2, DA8XX_LCD_D_3,
+	DA8XX_LCD_D_4, DA8XX_LCD_D_5, DA8XX_LCD_D_6, DA8XX_LCD_D_7,
+	DA8XX_LCD_D_8, DA8XX_LCD_D_9, DA8XX_LCD_D_10, DA8XX_LCD_D_11,
+	DA8XX_LCD_D_12, DA8XX_LCD_D_13, DA8XX_LCD_D_14, DA8XX_LCD_D_15,
+	DA8XX_LCD_PCLK, DA8XX_LCD_HSYNC, DA8XX_LCD_VSYNC, DA8XX_NLCD_AC_ENB_CS,
+	DA8XX_LCD_MCLK,
+	-1
+};
+
+static const short da8xx_pwm_pins[] = {
+	DA8XX_ECAP0_APWM0, DA8XX_ECAP1_APWM1, DA8XX_EPWM0B, DA8XX_EPWM0A,
+	DA8XX_EPWMSYNCI, DA8XX_EPWMSYNC0, DA8XX_ECAP2_APWM2, DA8XX_EHRPWMGLUETZ,
+	DA8XX_EPWM2B, DA8XX_EPWM2A, DA8XX_EPWM1B, DA8XX_EPWM1A,
+	-1
+};
+
+static const short da8xx_ecap_pins[] = {
+	DA8XX_ECAP0_APWM0, DA8XX_ECAP1_APWM1, DA8XX_ECAP2_APWM2,
+	-1
+};
+
+static const short da8xx_eqep_pins[] = {
+	DA8XX_EQEP0I, DA8XX_EQEP0S, DA8XX_EQEP0A, DA8XX_EQEP0B, DA8XX_EQEP1I,
+	DA8XX_EQEP1S, DA8XX_EQEP1A, DA8XX_EQEP1B,
+	-1
+};
+
+const short *da8xx_psc0_pins[DA8XX_LPSC0_GEM + 1] = {
+	[DA8XX_LPSC0_EMIF25]	= da8xx_emif25_pins,
+	[DA8XX_LPSC0_SPI0]	= da8xx_spi0_pins,
+	[DA8XX_LPSC0_MMC_SD]	= da8xx_mmc_sd_pins,
+	[DA8XX_LPSC0_UART0]	= da8xx_uart0_pins,
+};
+
+const short *da8xx_psc1_pins[DA8XX_LPSC1_L3_CBA_RAM + 1] = {
+	[DA8XX_LPSC1_USB20]	= da8xx_usb20_pins,
+	[DA8XX_LPSC1_USB11]	= da8xx_usb11_pins,
+	[DA8XX_LPSC1_UHPI]	= da8xx_uhpi_pins,
+	[DA8XX_LPSC1_CPGMAC]	= da8xx_cpgmac_pins,
+	[DA8XX_LPSC1_EMIF3C]	= da8xx_emif3c_pins,
+	[DA8XX_LPSC1_McASP0]	= da8xx_mcasp0_pins,
+	[DA8XX_LPSC1_McASP1]	= da8xx_mcasp1_pins,
+	[DA8XX_LPSC1_McASP2]	= da8xx_mcasp2_pins,
+	[DA8XX_LPSC1_SPI1]	= da8xx_spi1_pins,
+	[DA8XX_LPSC1_I2C]	= da8xx_i2c_pins,
+	[DA8XX_LPSC1_UART1]	= da8xx_uart1_pins,
+	[DA8XX_LPSC1_UART2]	= da8xx_uart2_pins,
+	[DA8XX_LPSC1_LCDC]	= da8xx_lcdcntl_pins,
+	[DA8XX_LPSC1_PWM]	= da8xx_pwm_pins,
+	[DA8XX_LPSC1_ECAP]	= da8xx_ecap_pins,
+	[DA8XX_LPSC1_EQEP]	= da8xx_eqep_pins,
+};
+
+static const short *da8xx_get_pins(unsigned ctlr, unsigned id)
+{
+	switch (ctlr) {
+	case 0:
+		return id > DA8XX_LPSC0_GEM ? NULL : da8xx_psc0_pins[id];
+	case 1:
+		return id > DA8XX_LPSC1_L3_CBA_RAM ? NULL : da8xx_psc1_pins[id];
+	}
+	return NULL;
+}
+
+void __init da8xx_mux_init(void)
+{
+	davinci_mux_register(da8xx_pinmux, ARRAY_SIZE(da8xx_pinmux),
+			     da8xx_get_pins, pinmux_in_use);
+}
Index: linux-2.6.18/include/asm-arm/arch-davinci/hardware.h
===================================================================
--- linux-2.6.18.orig/include/asm-arm/arch-davinci/hardware.h
+++ linux-2.6.18/include/asm-arm/arch-davinci/hardware.h
@@ -117,6 +117,8 @@
  */
 #define DA8XX_KICK0		(DA8XX_BOOT_CFG_BASE + 0x38)
 #define DA8XX_KICK1		(DA8XX_BOOT_CFG_BASE + 0x3c)
+/* DA8xx has 20 PINMUX registers */
+#define DA8XX_PINMUX(n) 	(DA8XX_BOOT_CFG_BASE + 0x120 + (n) * 4)
 /* DA8xx has 5 CFGCHIP registers */
 #define DA8XX_CFGCHIP(n)	(DA8XX_BOOT_CFG_BASE + 0x17c + (n) * 4)
 
Index: linux-2.6.18/include/asm-arm/arch-davinci/mux.h
===================================================================
--- linux-2.6.18.orig/include/asm-arm/arch-davinci/mux.h
+++ linux-2.6.18/include/asm-arm/arch-davinci/mux.h
@@ -31,6 +31,18 @@
 		.debug		= dbg,				\
 	},
 
+/* DA8xx uses 4 bits per mode, so there's no need to parametrize mask */
+#define DA8XX_MUX_CFG(desc, reg, offset, mux_mode, dbg) 	\
+	{							\
+		.name		= desc,				\
+		.mux_reg	= DA8XX_PINMUX(reg),		\
+		.reg_index	= reg,				\
+		.mask_offset	= offset,			\
+		.mask		= 0xf,				\
+		.mode		= mux_mode,			\
+		.debug		= dbg,				\
+	},
+
 struct pin_config {
 	const char *name;
 	unsigned long mux_reg;
@@ -202,9 +214,417 @@ enum davinci_dm355_index {
 	DM355_VIN_CINH_EN,
 };
 
+enum davinci_da8xx_index {
+	DA8XX_GPIO7_14,
+	DA8XX_RTCK,
+	DA8XX_GPIO7_15,
+	DA8XX_EMU_0,
+	DA8XX_EMB_SDCKE,
+	DA8XX_EMB_CLK_GLUE,
+	DA8XX_EMB_CLK,
+	DA8XX_NEMB_CS_0,
+	DA8XX_NEMB_CAS,
+	DA8XX_NEMB_RAS,
+	DA8XX_NEMB_WE,
+	DA8XX_EMB_BA_1,
+	DA8XX_EMB_BA_0,
+	DA8XX_EMB_A_0,
+	DA8XX_EMB_A_1,
+	DA8XX_EMB_A_2,
+	DA8XX_EMB_A_3,
+	DA8XX_EMB_A_4,
+	DA8XX_EMB_A_5,
+	DA8XX_GPIO7_0,
+	DA8XX_GPIO7_1,
+	DA8XX_GPIO7_2,
+	DA8XX_GPIO7_3,
+	DA8XX_GPIO7_4,
+	DA8XX_GPIO7_5,
+	DA8XX_GPIO7_6,
+	DA8XX_GPIO7_7,
+	DA8XX_EMB_A_6,
+	DA8XX_EMB_A_7,
+	DA8XX_EMB_A_8,
+	DA8XX_EMB_A_9,
+	DA8XX_EMB_A_10,
+	DA8XX_EMB_A_11,
+	DA8XX_EMB_A_12,
+	DA8XX_EMB_D_31,
+	DA8XX_GPIO7_8,
+	DA8XX_GPIO7_9,
+	DA8XX_GPIO7_10,
+	DA8XX_GPIO7_11,
+	DA8XX_GPIO7_12,
+	DA8XX_GPIO7_13,
+	DA8XX_GPIO3_13,
+	DA8XX_EMB_D_30,
+	DA8XX_EMB_D_29,
+	DA8XX_EMB_D_28,
+	DA8XX_EMB_D_27,
+	DA8XX_EMB_D_26,
+	DA8XX_EMB_D_25,
+	DA8XX_EMB_D_24,
+	DA8XX_EMB_D_23,
+	DA8XX_EMB_D_22,
+	DA8XX_EMB_D_21,
+	DA8XX_EMB_D_20,
+	DA8XX_EMB_D_19,
+	DA8XX_EMB_D_18,
+	DA8XX_EMB_D_17,
+	DA8XX_EMB_D_16,
+	DA8XX_NEMB_WE_DQM_3,
+	DA8XX_NEMB_WE_DQM_2,
+	DA8XX_EMB_D_0,
+	DA8XX_EMB_D_1,
+	DA8XX_EMB_D_2,
+	DA8XX_EMB_D_3,
+	DA8XX_EMB_D_4,
+	DA8XX_EMB_D_5,
+	DA8XX_EMB_D_6,
+	DA8XX_GPIO6_0,
+	DA8XX_GPIO6_1,
+	DA8XX_GPIO6_2,
+	DA8XX_GPIO6_3,
+	DA8XX_GPIO6_4,
+	DA8XX_GPIO6_5,
+	DA8XX_GPIO6_6,
+	DA8XX_EMB_D_7,
+	DA8XX_EMB_D_8,
+	DA8XX_EMB_D_9,
+	DA8XX_EMB_D_10,
+	DA8XX_EMB_D_11,
+	DA8XX_EMB_D_12,
+	DA8XX_EMB_D_13,
+	DA8XX_EMB_D_14,
+	DA8XX_GPIO6_7,
+	DA8XX_GPIO6_8,
+	DA8XX_GPIO6_9,
+	DA8XX_GPIO6_10,
+	DA8XX_GPIO6_11,
+	DA8XX_GPIO6_12,
+	DA8XX_GPIO6_13,
+	DA8XX_GPIO6_14,
+	DA8XX_EMB_D_15,
+	DA8XX_NEMB_WE_DQM_1,
+	DA8XX_NEMB_WE_DQM_0,
+	DA8XX_SPI0_SOMI_0,
+	DA8XX_SPI0_SIMO_0,
+	DA8XX_SPI0_CLK,
+	DA8XX_NSPI0_ENA,
+	DA8XX_NSPI0_SCS_0,
+	DA8XX_EQEP0I,
+	DA8XX_EQEP0S,
+	DA8XX_EQEP1I,
+	DA8XX_NUART0_CTS,
+	DA8XX_NUART0_RTS,
+	DA8XX_EQEP0A,
+	DA8XX_EQEP0B,
+	DA8XX_GPIO6_15,
+	DA8XX_GPIO5_14,
+	DA8XX_GPIO5_15,
+	DA8XX_GPIO5_0,
+	DA8XX_GPIO5_1,
+	DA8XX_GPIO5_2,
+	DA8XX_GPIO5_3,
+	DA8XX_GPIO5_4,
+	DA8XX_SPI1_SOMI_0,
+	DA8XX_SPI1_SIMO_0,
+	DA8XX_SPI1_CLK,
+	DA8XX_UART0_RXD,
+	DA8XX_UART0_TXD,
+	DA8XX_AXR1_10,
+	DA8XX_AXR1_11,
+	DA8XX_NSPI1_ENA,
+	DA8XX_I2C1_SCL,
+	DA8XX_I2C1_SDA,
+	DA8XX_EQEP1S,
+	DA8XX_I2C0_SDA,
+	DA8XX_I2C0_SCL,
+	DA8XX_UART2_RXD,
+	DA8XX_TM64P0_IN12,
+	DA8XX_TM64P0_OUT12,
+	DA8XX_GPIO5_5,
+	DA8XX_GPIO5_6,
+	DA8XX_GPIO5_7,
+	DA8XX_GPIO5_8,
+	DA8XX_GPIO5_9,
+	DA8XX_GPIO5_10,
+	DA8XX_GPIO5_11,
+	DA8XX_GPIO5_12,
+	DA8XX_NSPI1_SCS_0,
+	DA8XX_USB0_DRVVBUS,
+	DA8XX_AHCLKX0,
+	DA8XX_ACLKX0,
+	DA8XX_AFSX0,
+	DA8XX_AHCLKR0,
+	DA8XX_ACLKR0,
+	DA8XX_AFSR0,
+	DA8XX_UART2_TXD,
+	DA8XX_AHCLKX2,
+	DA8XX_ECAP0_APWM0,
+	DA8XX_RMII_MHZ_50_CLK,
+	DA8XX_ECAP1_APWM1,
+	DA8XX_USB_REFCLKIN,
+	DA8XX_GPIO5_13,
+	DA8XX_GPIO4_15,
+	DA8XX_GPIO2_11,
+	DA8XX_GPIO2_12,
+	DA8XX_GPIO2_13,
+	DA8XX_GPIO2_14,
+	DA8XX_GPIO2_15,
+	DA8XX_GPIO3_12,
+	DA8XX_AMUTE0,
+	DA8XX_AXR0_0,
+	DA8XX_AXR0_1,
+	DA8XX_AXR0_2,
+	DA8XX_AXR0_3,
+	DA8XX_AXR0_4,
+	DA8XX_AXR0_5,
+	DA8XX_AXR0_6,
+	DA8XX_RMII_TXD_0,
+	DA8XX_RMII_TXD_1,
+	DA8XX_RMII_TXEN,
+	DA8XX_RMII_CRS_DV,
+	DA8XX_RMII_RXD_0,
+	DA8XX_RMII_RXD_1,
+	DA8XX_RMII_RXER,
+	DA8XX_AFSR2,
+	DA8XX_ACLKX2,
+	DA8XX_AXR2_3,
+	DA8XX_AXR2_2,
+	DA8XX_AXR2_1,
+	DA8XX_AFSX2,
+	DA8XX_ACLKR2,
+	DA8XX_NRESETOUT,
+	DA8XX_GPIO3_0,
+	DA8XX_GPIO3_1,
+	DA8XX_GPIO3_2,
+	DA8XX_GPIO3_3,
+	DA8XX_GPIO3_4,
+	DA8XX_GPIO3_5,
+	DA8XX_GPIO3_6,
+	DA8XX_AXR0_7,
+	DA8XX_AXR0_8,
+	DA8XX_UART1_RXD,
+	DA8XX_UART1_TXD,
+	DA8XX_AXR0_11,
+	DA8XX_AHCLKX1,
+	DA8XX_ACLKX1,
+	DA8XX_AFSX1,
+	DA8XX_MDIO_CLK,
+	DA8XX_MDIO_D,
+	DA8XX_AXR0_9,
+	DA8XX_AXR0_10,
+	DA8XX_EPWM0B,
+	DA8XX_EPWM0A,
+	DA8XX_EPWMSYNCI,
+	DA8XX_AXR2_0,
+	DA8XX_EPWMSYNC0,
+	DA8XX_GPIO3_7,
+	DA8XX_GPIO3_8,
+	DA8XX_GPIO3_9,
+	DA8XX_GPIO3_10,
+	DA8XX_GPIO3_11,
+	DA8XX_GPIO3_14,
+	DA8XX_GPIO3_15,
+	DA8XX_GPIO4_10,
+	DA8XX_AHCLKR1,
+	DA8XX_ACLKR1,
+	DA8XX_AFSR1,
+	DA8XX_AMUTE1,
+	DA8XX_AXR1_0,
+	DA8XX_AXR1_1,
+	DA8XX_AXR1_2,
+	DA8XX_AXR1_3,
+	DA8XX_ECAP2_APWM2,
+	DA8XX_EHRPWMGLUETZ,
+	DA8XX_EQEP1A,
+	DA8XX_GPIO4_11,
+	DA8XX_GPIO4_12,
+	DA8XX_GPIO4_13,
+	DA8XX_GPIO4_14,
+	DA8XX_GPIO4_0,
+	DA8XX_GPIO4_1,
+	DA8XX_GPIO4_2,
+	DA8XX_GPIO4_3,
+	DA8XX_AXR1_4,
+	DA8XX_AXR1_5,
+	DA8XX_AXR1_6,
+	DA8XX_AXR1_7,
+	DA8XX_AXR1_8,
+	DA8XX_AXR1_9,
+	DA8XX_EMA_D_0,
+	DA8XX_EMA_D_1,
+	DA8XX_EQEP1B,
+	DA8XX_EPWM2B,
+	DA8XX_EPWM2A,
+	DA8XX_EPWM1B,
+	DA8XX_EPWM1A,
+	DA8XX_MMCSD_DAT_0,
+	DA8XX_MMCSD_DAT_1,
+	DA8XX_UHPI_HD_0,
+	DA8XX_UHPI_HD_1,
+	DA8XX_GPIO4_4,
+	DA8XX_GPIO4_5,
+	DA8XX_GPIO4_6,
+	DA8XX_GPIO4_7,
+	DA8XX_GPIO4_8,
+	DA8XX_GPIO4_9,
+	DA8XX_GPIO0_0,
+	DA8XX_GPIO0_1,
+	DA8XX_EMA_D_2,
+	DA8XX_EMA_D_3,
+	DA8XX_EMA_D_4,
+	DA8XX_EMA_D_5,
+	DA8XX_EMA_D_6,
+	DA8XX_EMA_D_7,
+	DA8XX_EMA_D_8,
+	DA8XX_EMA_D_9,
+	DA8XX_MMCSD_DAT_2,
+	DA8XX_MMCSD_DAT_3,
+	DA8XX_MMCSD_DAT_4,
+	DA8XX_MMCSD_DAT_5,
+	DA8XX_MMCSD_DAT_6,
+	DA8XX_MMCSD_DAT_7,
+	DA8XX_UHPI_HD_8,
+	DA8XX_UHPI_HD_9,
+	DA8XX_UHPI_HD_2,
+	DA8XX_UHPI_HD_3,
+	DA8XX_UHPI_HD_4,
+	DA8XX_UHPI_HD_5,
+	DA8XX_UHPI_HD_6,
+	DA8XX_UHPI_HD_7,
+	DA8XX_LCD_D_8,
+	DA8XX_LCD_D_9,
+	DA8XX_GPIO0_2,
+	DA8XX_GPIO0_3,
+	DA8XX_GPIO0_4,
+	DA8XX_GPIO0_5,
+	DA8XX_GPIO0_6,
+	DA8XX_GPIO0_7,
+	DA8XX_GPIO0_8,
+	DA8XX_GPIO0_9,
+	DA8XX_EMA_D_10,
+	DA8XX_EMA_D_11,
+	DA8XX_EMA_D_12,
+	DA8XX_EMA_D_13,
+	DA8XX_EMA_D_14,
+	DA8XX_EMA_D_15,
+	DA8XX_EMA_A_0,
+	DA8XX_EMA_A_1,
+	DA8XX_UHPI_HD_10,
+	DA8XX_UHPI_HD_11,
+	DA8XX_UHPI_HD_12,
+	DA8XX_UHPI_HD_13,
+	DA8XX_UHPI_HD_14,
+	DA8XX_UHPI_HD_15,
+	DA8XX_LCD_D_7,
+	DA8XX_MMCSD_CLK,
+	DA8XX_LCD_D_10,
+	DA8XX_LCD_D_11,
+	DA8XX_LCD_D_12,
+	DA8XX_LCD_D_13,
+	DA8XX_LCD_D_14,
+	DA8XX_LCD_D_15,
+	DA8XX_UHPI_HCNTL0,
+	DA8XX_GPIO0_10,
+	DA8XX_GPIO0_11,
+	DA8XX_GPIO0_12,
+	DA8XX_GPIO0_13,
+	DA8XX_GPIO0_14,
+	DA8XX_GPIO0_15,
+	DA8XX_GPIO1_0,
+	DA8XX_GPIO1_1,
+	DA8XX_EMA_A_2,
+	DA8XX_EMA_A_3,
+	DA8XX_EMA_A_4,
+	DA8XX_EMA_A_5,
+	DA8XX_EMA_A_6,
+	DA8XX_EMA_A_7,
+	DA8XX_EMA_A_8,
+	DA8XX_EMA_A_9,
+	DA8XX_MMCSD_CMD,
+	DA8XX_LCD_D_6,
+	DA8XX_LCD_D_3,
+	DA8XX_LCD_D_2,
+	DA8XX_LCD_D_1,
+	DA8XX_LCD_D_0,
+	DA8XX_LCD_PCLK,
+	DA8XX_LCD_HSYNC,
+	DA8XX_UHPI_HCNTL1,
+	DA8XX_GPIO1_2,
+	DA8XX_GPIO1_3,
+	DA8XX_GPIO1_4,
+	DA8XX_GPIO1_5,
+	DA8XX_GPIO1_6,
+	DA8XX_GPIO1_7,
+	DA8XX_GPIO1_8,
+	DA8XX_GPIO1_9,
+	DA8XX_EMA_A_10,
+	DA8XX_EMA_A_11,
+	DA8XX_EMA_A_12,
+	DA8XX_EMA_BA_1,
+	DA8XX_EMA_BA_0,
+	DA8XX_EMA_CLK,
+	DA8XX_EMA_SDCKE,
+	DA8XX_NEMA_CAS,
+	DA8XX_LCD_VSYNC,
+	DA8XX_NLCD_AC_ENB_CS,
+	DA8XX_LCD_MCLK,
+	DA8XX_LCD_D_5,
+	DA8XX_LCD_D_4,
+	DA8XX_OBSCLK,
+	DA8XX_NEMA_CS_4,
+	DA8XX_UHPI_HHWIL,
+	DA8XX_AHCLKR2,
+	DA8XX_GPIO1_10,
+	DA8XX_GPIO1_11,
+	DA8XX_GPIO1_12,
+	DA8XX_GPIO1_13,
+	DA8XX_GPIO1_14,
+	DA8XX_GPIO1_15,
+	DA8XX_GPIO2_0,
+	DA8XX_GPIO2_1,
+	DA8XX_NEMA_RAS,
+	DA8XX_NEMA_WE,
+	DA8XX_NEMA_CS_0,
+	DA8XX_NEMA_CS_2,
+	DA8XX_NEMA_CS_3,
+	DA8XX_NEMA_OE,
+	DA8XX_NEMA_WE_DQM_1,
+	DA8XX_NEMA_WE_DQM_0,
+	DA8XX_NEMA_CS_5,
+	DA8XX_UHPI_HRNW,
+	DA8XX_NUHPI_HAS,
+	DA8XX_NUHPI_HCS,
+	DA8XX_NUHPI_HDS1,
+	DA8XX_NUHPI_HDS2,
+	DA8XX_NUHPI_HINT,
+	DA8XX_AXR0_12,
+	DA8XX_AMUTE2,
+	DA8XX_AXR0_13,
+	DA8XX_AXR0_14,
+	DA8XX_AXR0_15,
+	DA8XX_GPIO2_2,
+	DA8XX_GPIO2_3,
+	DA8XX_GPIO2_4,
+	DA8XX_GPIO2_5,
+	DA8XX_GPIO2_6,
+	DA8XX_GPIO2_7,
+	DA8XX_GPIO2_8,
+	DA8XX_GPIO2_9,
+	DA8XX_EMA_WAIT_0,
+	DA8XX_NUHPI_HRDY,
+	DA8XX_GPIO2_10,
+};
+
 #ifdef	CONFIG_DAVINCI_MUX
+extern const short *da8xx_psc0_pins[];
+extern const short *da8xx_psc1_pins[];
+
 /* setup pin muxing in Linux */
 extern void davinci_mux_init(void);
+extern void da8xx_mux_init(void);
 extern void davinci_mux_register(const struct pin_config *pins, unsigned size,
 				 const short *(*get_pins)(unsigned, unsigned),
 				 unsigned long *in_use);
@@ -213,6 +633,7 @@ extern int  davinci_pinmux_setup(unsigne
 #else
 /* boot loader does it all (no warnings from CONFIG_DAVINCI_MUX_WARNINGS) */
 static inline void davinci_mux_init(void) { }
+static inline void da8xx_mux_init(void) { }
 static inline int  davinci_cfg_reg(unsigned index, int action) { return 0; }
 static inline int  davinci_pinmux_setup(unsigned ctlr, unsigned id, int action)
 {
Index: linux-2.6.18/mvl_patches/pro50-2154.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-2154.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2009 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(2154);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

