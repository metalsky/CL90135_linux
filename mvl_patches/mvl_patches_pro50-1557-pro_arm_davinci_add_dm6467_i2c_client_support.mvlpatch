#! /usr/bin/env bash
# Patch: -pro_arm_davinci_add_dm6467_i2c_client_support
# Date: Fri Sep 19 13:59:26 2008
# Source: MontaVista Software, Inc.
# MR: 27583
# Type: Enhancement
# Disposition: needs submitting to linux-arm-kernel
# Signed-off-by: Pavel Kiryukhin <pkiryukhin@ru.mvista.com>
# Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
# Description:
# Adds I2C expander support for DaVinci DM6467.
# 
#  arch/arm/mach-davinci/i2c-client.c        |   96 +++++++++++++-----------------
#  include/asm-arm/arch-davinci/i2c-client.h |   11 +++
#  2 files changed, 53 insertions(+), 54 deletions(-)
# 

PATCHNUM=1557
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 27583
Type: Enhancement
Disposition: needs submitting to linux-arm-kernel
Signed-off-by: Pavel Kiryukhin <pkiryukhin@ru.mvista.com>
Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
Description:
Adds I2C expander support for DaVinci DM6467.

 arch/arm/mach-davinci/i2c-client.c        |   96 +++++++++++++-----------------
 include/asm-arm/arch-davinci/i2c-client.h |   15 +++-
 mvl_patches/pro50-1557.c                  |   16 +++++
 3 files changed, 71 insertions(+), 56 deletions(-)

Index: linux-2.6.18/arch/arm/mach-davinci/i2c-client.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/i2c-client.c
+++ linux-2.6.18/arch/arm/mach-davinci/i2c-client.c
@@ -30,6 +30,7 @@
 #include <linux/clk.h>
 
 #include <asm/semaphore.h>
+#include <asm/arch/cpu.h>
 #include <asm/arch/i2c-client.h>
 
 static DEFINE_MUTEX(expander_lock);
@@ -90,78 +91,67 @@ EXPORT_SYMBOL(davinci_i2c_write);
 int davinci_i2c_expander_op(u16 client_addr, u35_expander_ops pin, u8 val)
 {
 	int err = 0;
-	char cmd[4] = { 4, 6, 0x00, 0x09 };
 	u8 data_to_u35 = 0;
 
 	if (val > 1)
 		return -1;
 
-	mutex_lock(&expander_lock);
-
-	err = davinci_i2c_read(1, &data_to_u35, 0x3A);
+	if (client_addr != 0x3a) {
+		printk(KERN_WARNING "Only IO Expander at address "
+		       "0x3A is supported\n");
+		return -EINVAL;
+	}
 
-	if (client_addr == 0x3A) {
+	if (cpu_is_davinci_dm6467()) {
 		switch (pin) {
-		case USB_DRVVBUS:
-			if (val)
-				data_to_u35 |= val;
-			else {
-				data_to_u35 &= (val | 0xFE);
-			}
+		case ATA_SEL_DM646X:
+		case ATA_PWD_DM646X:
+		case VSCALE_ON_DM646X:
+		case VLYNQ_RESET_DM646X:
+		case I2C_INT_DM646X:
+		case USB_FB_DM646X:
+		case CIR_MOD_DM646X:
+		case CIR_DEMOD_DM646X:
 			break;
+		default:
+			return -EINVAL;
+		}
+	} else {
+		switch (pin) {
+		case USB_DRVVBUS:
 		case VDDIMX_EN:
-			if (val)
-				data_to_u35 |= (val << 1);
-			else {
-				data_to_u35 &= (val | 0xFD);
-			}
-			break;
 		case VLYNQ_ON:
-			if (val)
-				data_to_u35 |= (val << 2);
-			else {
-				data_to_u35 &= (val | 0xFB);
-			}
-			break;
 		case CF_RESET:
-			if (val)
-				data_to_u35 |= (val << 3);
-			else {
-				data_to_u35 &= (val | 0xF7);
-			}
-			break;
 		case WLAN_RESET:
-			if (val)
-				data_to_u35 |= (val << 5);
-			else {
-				data_to_u35 &= (val | 0xDF);
-			}
-			break;
 		case ATA_SEL:
-			if (val)
-				data_to_u35 |= (val << 6);
-			else {
-				data_to_u35 &= (val | 0xBF);
-			}
-			break;
 		case CF_SEL:
-			davinci_i2c_write(4, cmd, 0x23);
-			if (val)
-				data_to_u35 |= (val << 7);
-			else {
-				data_to_u35 &= (val | 0x7F);
-			}
 			break;
 		default:
-			break;
-		}
-	} else {
-		printk("Only IO Expander at address 0x3A is suuported\n");
+			return -EINVAL;
+	    }
+	}
+
+	mutex_lock(&expander_lock);
+
+	err = davinci_i2c_read(1, &data_to_u35, client_addr);
+	if (err) {
 		mutex_unlock(&expander_lock);
-		return -EINVAL;
+		return err;
 	}
+	if (!cpu_is_davinci_dm6467() && pin == CF_SEL) {
+		static const char cmd[4] = { 4, 6, 0x00, 0x09 };
 
-	err = davinci_i2c_write(1, &data_to_u35, 0x3A);
+		err = davinci_i2c_write(4, cmd, 0x23);
+		if (err) {
+			mutex_unlock(&expander_lock);
+			return err;
+		}
+	}
+
+	data_to_u35 &= 0xff ^ (1 << pin);
+	data_to_u35 |= val << pin;
+
+	err = davinci_i2c_write(1, &data_to_u35, client_addr);
 
 	mutex_unlock(&expander_lock);
 
Index: linux-2.6.18/include/asm-arm/arch-davinci/i2c-client.h
===================================================================
--- linux-2.6.18.orig/include/asm-arm/arch-davinci/i2c-client.h
+++ linux-2.6.18/include/asm-arm/arch-davinci/i2c-client.h
@@ -27,9 +27,18 @@ typedef enum {
         VDDIMX_EN = 1,
         VLYNQ_ON = 2,
         CF_RESET = 3,
-        WLAN_RESET = 4,
-        ATA_SEL = 5,
-        CF_SEL = 6
+        WLAN_RESET = 5,
+        ATA_SEL = 6,
+        CF_SEL = 7,
+	/* DM646X expanders */
+	ATA_SEL_DM646X = 0,
+	ATA_PWD_DM646X = 1,
+	VSCALE_ON_DM646X = 2,
+	VLYNQ_RESET_DM646X = 3,
+	CIR_DEMOD_DM646X = 4,
+	CIR_MOD_DM646X = 5,
+	I2C_INT_DM646X = 6,
+	USB_FB_DM646X = 7
 } u35_expander_ops;
 
 /*
Index: linux-2.6.18/mvl_patches/pro50-1557.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1557.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1557);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

