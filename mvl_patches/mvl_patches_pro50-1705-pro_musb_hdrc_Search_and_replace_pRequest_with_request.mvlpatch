#! /usr/bin/env bash
# Patch: -pro_musb_hdrc_Search_and_replace_pRequest_with_request
# Date: Fri Sep 19 14:10:07 2008
# From c194d4868f8929c1dbae043701d2bfcb6035ff4c Mon Sep 17 00:00:00 2001
# From: Tony Lindgren <tony@atomide.com>
# Date: Mon, 13 Aug 2007 05:13:53 -0700
# Subject: [PATCH] musb_hdrc: Search and replace pRequest with request
# 
# Search and replace pRequest with request
# 
# Signed-off-by: Tony Lindgren <tony@atomide.com>
# (cherry picked from commit ba4cd005eef9039b37e839b102e6804f485cb0fa)

PATCHNUM=1705
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
From c194d4868f8929c1dbae043701d2bfcb6035ff4c Mon Sep 17 00:00:00 2001
From: Tony Lindgren <tony@atomide.com>
Date: Mon, 13 Aug 2007 05:13:53 -0700
Subject: [PATCH] musb_hdrc: Search and replace pRequest with request

Search and replace pRequest with request

Signed-off-by: Tony Lindgren <tony@atomide.com>
(cherry picked from commit ba4cd005eef9039b37e839b102e6804f485cb0fa)
Index: linux-2.6.18/drivers/usb/musb/g_ep0.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/g_ep0.c
+++ linux-2.6.18/drivers/usb/musb/g_ep0.c
@@ -484,31 +484,31 @@ static void ep0_rxstate(struct musb *thi
 static void ep0_txstate(struct musb *musb)
 {
 	void __iomem		*regs = musb->control_ep->regs;
-	struct usb_request	*pRequest = next_ep0_request(musb);
+	struct usb_request	*request = next_ep0_request(musb);
 	u16			wCsrVal = MGC_M_CSR0_TXPKTRDY;
 	u8			*pFifoSource;
 	u8			fifo_count;
 
-	if (!pRequest) {
+	if (!request) {
 		// WARN_ON(1);
 		DBG(2, "odd; csr0 %04x\n", musb_readw(regs, MGC_O_HDRC_CSR0));
 		return;
 	}
 
 	/* load the data */
-	pFifoSource = (u8 *) pRequest->buf + pRequest->actual;
+	pFifoSource = (u8 *) request->buf + request->actual;
 	fifo_count = min((unsigned) MGC_END0_FIFOSIZE,
-		pRequest->length - pRequest->actual);
+		request->length - request->actual);
 	musb_write_fifo(&musb->endpoints[0], fifo_count, pFifoSource);
-	pRequest->actual += fifo_count;
+	request->actual += fifo_count;
 
 	/* update the flags */
 	if (fifo_count < MUSB_MAX_END0_PACKET
-			|| pRequest->actual == pRequest->length) {
+			|| request->actual == request->length) {
 		musb->ep0_state = MGC_END0_STAGE_STATUSOUT;
 		wCsrVal |= MGC_M_CSR0_P_DATAEND;
 	} else
-		pRequest = NULL;
+		request = NULL;
 
 	/* send it out, triggering a "txpktrdy cleared" irq */
 	musb_writew(regs, MGC_O_HDRC_CSR0, wCsrVal);
@@ -518,8 +518,8 @@ static void ep0_txstate(struct musb *mus
 	 * very precise fault reporting, needed by USB TMC; possible with
 	 * this hardware, but not usable from portable gadget drivers.)
 	 */
-	if (pRequest)
-		musb_g_ep0_giveback(musb, pRequest);
+	if (request)
+		musb_g_ep0_giveback(musb, request);
 }
 
 /*
Index: linux-2.6.18/drivers/usb/musb/musb_gadget.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musb_gadget.c
+++ linux-2.6.18/drivers/usb/musb/musb_gadget.c
@@ -94,13 +94,13 @@ Handling completion
 /*
  * Immediately complete a request.
  *
- * @param pRequest the request to complete
+ * @param request the request to complete
  * @param status the status to complete the request with
  * Context: controller locked, IRQs blocked.
  */
 void musb_g_giveback(
 	struct musb_ep		*ep,
-	struct usb_request	*pRequest,
+	struct usb_request	*request,
 	int status)
 __releases(ep->musb->lock)
 __acquires(ep->musb->lock)
@@ -109,9 +109,9 @@ __acquires(ep->musb->lock)
 	struct musb		*musb;
 	int			busy = ep->busy;
 
-	req = to_musb_request(pRequest);
+	req = to_musb_request(request);
 
-	list_del(&pRequest->list);
+	list_del(&request->list);
 	if (req->request.status == -EINPROGRESS)
 		req->request.status = status;
 	musb = req->musb;
@@ -136,15 +136,15 @@ __acquires(ep->musb->lock)
 						? DMA_TO_DEVICE
 						: DMA_FROM_DEVICE);
 	}
-	if (pRequest->status == 0)
+	if (request->status == 0)
 		DBG(5, "%s done request %p,  %d/%d\n",
-				ep->end_point.name, pRequest,
+				ep->end_point.name, request,
 				req->request.actual, req->request.length);
 	else
 		DBG(2, "%s request %p, %d/%d fault %d\n",
-				ep->end_point.name, pRequest,
+				ep->end_point.name, request,
 				req->request.actual, req->request.length,
-				pRequest->status);
+				request->status);
 	req->request.complete(&req->ep->end_point, &req->request);
 	spin_lock(&musb->lock);
 	ep->busy = busy;
@@ -255,7 +255,7 @@ static void txstate(struct musb *musb, s
 	u8			epnum = req->epnum;
 	struct musb_ep		*musb_ep;
 	void __iomem		*epio = musb->endpoints[epnum].regs;
-	struct usb_request	*pRequest;
+	struct usb_request	*request;
 	u16			fifo_count = 0, wCsrVal;
 	int			use_dma = 0;
 
@@ -270,9 +270,9 @@ static void txstate(struct musb *musb, s
 	/* read TXCSR before */
 	wCsrVal = musb_readw(epio, MGC_O_HDRC_TXCSR);
 
-	pRequest = &req->request;
+	request = &req->request;
 	fifo_count = min(max_ep_writesize(musb, musb_ep),
-			(int)(pRequest->length - pRequest->actual));
+			(int)(request->length - request->actual));
 
 	if (wCsrVal & MGC_M_TXCSR_TXPKTRDY) {
 		DBG(5, "%s old packet still ready , txcsr %03x\n",
@@ -294,7 +294,7 @@ static void txstate(struct musb *musb, s
 	if (is_dma_capable() && musb_ep->dma) {
 		struct dma_controller	*c = musb->dma_controller;
 
-		use_dma = (pRequest->dma != DMA_ADDR_INVALID);
+		use_dma = (request->dma != DMA_ADDR_INVALID);
 
 		/* MGC_M_TXCSR_P_ISO is still set correctly */
 
@@ -303,7 +303,7 @@ static void txstate(struct musb *musb, s
 			size_t request_size;
 
 			/* setup DMA, then program endpoint CSR */
-			request_size = min(pRequest->length,
+			request_size = min(request->length,
 						musb_ep->dma->max_len);
 			if (request_size <= musb_ep->wPacketSize)
 				musb_ep->dma->desired_mode = 0;
@@ -313,7 +313,7 @@ static void txstate(struct musb *musb, s
 			use_dma = use_dma && c->channel_program(
 					musb_ep->dma, musb_ep->wPacketSize,
 					musb_ep->dma->desired_mode,
-					pRequest->dma, request_size);
+					request->dma, request_size);
 			if (use_dma) {
 				if (musb_ep->dma->desired_mode == 0) {
 					/* ASSERT: DMAENAB is clear */
@@ -361,8 +361,8 @@ static void txstate(struct musb *musb, s
 		use_dma = use_dma && c->channel_program(
 				musb_ep->dma, musb_ep->wPacketSize,
 				0,
-				pRequest->dma,
-				pRequest->length);
+				request->dma,
+				request->length);
 		if (!use_dma) {
 			c->channel_release(musb_ep->dma);
 			musb_ep->dma = NULL;
@@ -373,17 +373,17 @@ static void txstate(struct musb *musb, s
 #elif defined(CONFIG_USB_TUSB_OMAP_DMA)
 		use_dma = use_dma && c->channel_program(
 				musb_ep->dma, musb_ep->wPacketSize,
-				pRequest->zero,
-				pRequest->dma,
-				pRequest->length);
+				request->zero,
+				request->dma,
+				request->length);
 #endif
 	}
 #endif
 
 	if (!use_dma) {
 		musb_write_fifo(musb_ep->hw_ep, fifo_count,
-				(u8 *) (pRequest->buf + pRequest->actual));
-		pRequest->actual += fifo_count;
+				(u8 *) (request->buf + request->actual));
+		request->actual += fifo_count;
 		wCsrVal |= MGC_M_TXCSR_TXPKTRDY;
 		wCsrVal &= ~MGC_M_TXCSR_P_UNDERRUN;
 		musb_writew(epio, MGC_O_HDRC_TXCSR, wCsrVal);
@@ -392,7 +392,7 @@ static void txstate(struct musb *musb, s
 	/* host may already have the data when this message shows... */
 	DBG(3, "%s TX/IN %s len %d/%d, txcsr %04x, fifo %d/%d\n",
 			musb_ep->end_point.name, use_dma ? "dma" : "pio",
-			pRequest->actual, pRequest->length,
+			request->actual, request->length,
 			musb_readw(epio, MGC_O_HDRC_TXCSR),
 			fifo_count,
 			musb_readw(epio, MGC_O_HDRC_TXMAXP));
@@ -405,14 +405,14 @@ static void txstate(struct musb *musb, s
 void musb_g_tx(struct musb *musb, u8 epnum)
 {
 	u16			wCsrVal;
-	struct usb_request	*pRequest;
+	struct usb_request	*request;
 	u8 __iomem		*mbase = musb->mregs;
 	struct musb_ep		*musb_ep = &musb->endpoints[epnum].ep_in;
 	void __iomem		*epio = musb->endpoints[epnum].regs;
 	struct dma_channel	*dma;
 
 	musb_ep_select(mbase, epnum);
-	pRequest = next_request(musb_ep);
+	request = next_request(musb_ep);
 
 	wCsrVal = musb_readw(epio, MGC_O_HDRC_TXCSR);
 	DBG(4, "<== %s, txcsr %04x\n", musb_ep->end_point.name, wCsrVal);
@@ -431,8 +431,8 @@ void musb_g_tx(struct musb *musb, u8 epn
 				musb->dma_controller->channel_abort(dma);
 			}
 
-			if (pRequest)
-				musb_g_giveback(musb_ep, pRequest, -EPIPE);
+			if (request)
+				musb_g_giveback(musb_ep, request, -EPIPE);
 
 			break;
 		}
@@ -443,7 +443,7 @@ void musb_g_tx(struct musb *musb, u8 epn
 			wCsrVal &= ~(MGC_M_TXCSR_P_UNDERRUN
 					| MGC_M_TXCSR_TXPKTRDY);
 			musb_writew(epio, MGC_O_HDRC_TXCSR, wCsrVal);
-			DBG(20, "underrun on ep%d, req %p\n", epnum, pRequest);
+			DBG(20, "underrun on ep%d, req %p\n", epnum, request);
 		}
 
 		if (dma_channel_status(dma) == MGC_DMA_STATUS_BUSY) {
@@ -454,7 +454,7 @@ void musb_g_tx(struct musb *musb, u8 epn
 			break;
 		}
 
-		if (pRequest) {
+		if (request) {
 			u8	is_dma = 0;
 
 			if (dma && (wCsrVal & MGC_M_TXCSR_DMAENAB)) {
@@ -466,29 +466,29 @@ void musb_g_tx(struct musb *musb, u8 epn
 				musb_writew(epio, MGC_O_HDRC_TXCSR, wCsrVal);
 				/* ensure writebuffer is empty */
 				wCsrVal = musb_readw(epio, MGC_O_HDRC_TXCSR);
-				pRequest->actual += musb_ep->dma->actual_len;
+				request->actual += musb_ep->dma->actual_len;
 				DBG(4, "TXCSR%d %04x, dma off, "
 						"len %Zd, req %p\n",
 					epnum, wCsrVal,
 					musb_ep->dma->actual_len,
-					pRequest);
+					request);
 			}
 
-			if (is_dma || pRequest->actual == pRequest->length) {
+			if (is_dma || request->actual == request->length) {
 
 				/* First, maybe a terminating short packet.
 				 * Some DMA engines might handle this by
 				 * themselves.
 				 */
-				if ((pRequest->zero
-						&& pRequest->length
-						&& (pRequest->length
+				if ((request->zero
+						&& request->length
+						&& (request->length
 							% musb_ep->wPacketSize)
 							== 0)
 #ifdef CONFIG_USB_INVENTRA_DMA
 					|| (is_dma &&
 						((!dma->desired_mode) ||
-						    (pRequest->actual &
+						    (request->actual &
 						    (musb_ep->wPacketSize - 1))))
 #endif
 				) {
@@ -502,11 +502,11 @@ void musb_g_tx(struct musb *musb, u8 epn
 					musb_writew(epio, MGC_O_HDRC_TXCSR,
 							MGC_M_TXCSR_MODE
 							| MGC_M_TXCSR_TXPKTRDY);
-					pRequest->zero = 0;
+					request->zero = 0;
 				}
 
 				/* ... or if not, then complete it */
-				musb_g_giveback(musb_ep, pRequest, 0);
+				musb_g_giveback(musb_ep, request, 0);
 
 				/* kickstart next transfer if appropriate;
 				 * the packet that just completed might not
@@ -518,17 +518,17 @@ void musb_g_tx(struct musb *musb, u8 epn
 				wCsrVal = musb_readw(epio, MGC_O_HDRC_TXCSR);
 				if (wCsrVal & MGC_M_TXCSR_FIFONOTEMPTY)
 					break;
-				pRequest = musb_ep->desc
+				request = musb_ep->desc
 						? next_request(musb_ep)
 						: NULL;
-				if (!pRequest) {
+				if (!request) {
 					DBG(4, "%s idle now\n",
 							musb_ep->end_point.name);
 					break;
 				}
 			}
 
-			txstate(musb, to_musb_request(pRequest));
+			txstate(musb, to_musb_request(request));
 		}
 
 	} while (0);
@@ -574,7 +574,7 @@ static void rxstate(struct musb *musb, s
 {
 	u16			wCsrVal = 0;
 	const u8		epnum = req->epnum;
-	struct usb_request	*pRequest = &req->request;
+	struct usb_request	*request = &req->request;
 	struct musb_ep		*musb_ep = &musb->endpoints[epnum].ep_out;
 	void __iomem		*epio = musb->endpoints[epnum].regs;
 	u16			fifo_count = 0;
@@ -593,9 +593,9 @@ static void rxstate(struct musb *musb, s
 		 */
 		if (c->channel_program(channel,
 				musb_ep->wPacketSize,
-				!pRequest->short_not_ok,
-				pRequest->dma + pRequest->actual,
-				pRequest->length - pRequest->actual)) {
+				!request->short_not_ok,
+				request->dma + request->actual,
+				request->length - request->actual)) {
 
 			/* make sure that if an rxpkt arrived after the irq,
 			 * the cppi engine will be ready to take it as soon
@@ -611,7 +611,7 @@ static void rxstate(struct musb *musb, s
 
 	if (wCsrVal & MGC_M_RXCSR_RXPKTRDY) {
 		len = musb_readw(epio, MGC_O_HDRC_RXCOUNT);
-		if (pRequest->actual < pRequest->length) {
+		if (request->actual < request->length) {
 #ifdef CONFIG_USB_INVENTRA_DMA
 			if (is_dma_capable() && musb_ep->dma) {
 				struct dma_controller	*c;
@@ -657,10 +657,10 @@ static void rxstate(struct musb *musb, s
 				musb_writew(epio, MGC_O_HDRC_RXCSR,
 						wCsrVal);
 
-				if (pRequest->actual < pRequest->length) {
+				if (request->actual < request->length) {
 					int transfer_size = 0;
 #ifdef USE_MODE1
-					transfer_size = min(pRequest->length,
+					transfer_size = min(request->length,
 							channel->max_len);
 #else
 					transfer_size = len;
@@ -674,8 +674,8 @@ static void rxstate(struct musb *musb, s
 							channel,
 							musb_ep->wPacketSize,
 							channel->desired_mode,
-							pRequest->dma
-							+ pRequest->actual,
+							request->dma
+							+ request->actual,
 							transfer_size);
 				}
 
@@ -684,7 +684,7 @@ static void rxstate(struct musb *musb, s
 			}
 #endif	/* Mentor's USB */
 
-			fifo_count = pRequest->length - pRequest->actual;
+			fifo_count = request->length - request->actual;
 			DBG(3, "%s OUT/RX pio fifo %d/%d, maxpacket %d\n",
 					musb_ep->end_point.name,
 					len, fifo_count,
@@ -696,7 +696,7 @@ static void rxstate(struct musb *musb, s
 			if (tusb_dma_omap() && musb_ep->dma) {
 				struct dma_controller *c = musb->dma_controller;
 				struct dma_channel *channel = musb_ep->dma;
-				u32 dma_addr = pRequest->dma + pRequest->actual;
+				u32 dma_addr = request->dma + request->actual;
 				int ret;
 
 				ret = c->channel_program(channel,
@@ -710,8 +710,8 @@ static void rxstate(struct musb *musb, s
 #endif
 
 			musb_read_fifo(musb_ep->hw_ep, fifo_count, (u8 *)
-					(pRequest->buf + pRequest->actual));
-			pRequest->actual += fifo_count;
+					(request->buf + request->actual));
+			request->actual += fifo_count;
 
 			/* REVISIT if we left anything in the fifo, flush
 			 * it and report -EOVERFLOW
@@ -725,8 +725,8 @@ static void rxstate(struct musb *musb, s
 	}
 
 	/* reach the end or short packet detected */
-	if (pRequest->actual == pRequest->length || len < musb_ep->wPacketSize)
-		musb_g_giveback(musb_ep, pRequest, 0);
+	if (request->actual == request->length || len < musb_ep->wPacketSize)
+		musb_g_giveback(musb_ep, request, 0);
 }
 
 /*
@@ -735,7 +735,7 @@ static void rxstate(struct musb *musb, s
 void musb_g_rx(struct musb *musb, u8 epnum)
 {
 	u16			wCsrVal;
-	struct usb_request	*pRequest;
+	struct usb_request	*request;
 	void __iomem		*mbase = musb->mregs;
 	struct musb_ep		*musb_ep = &musb->endpoints[epnum].ep_out;
 	void __iomem		*epio = musb->endpoints[epnum].regs;
@@ -743,27 +743,27 @@ void musb_g_rx(struct musb *musb, u8 epn
 
 	musb_ep_select(mbase, epnum);
 
-	pRequest = next_request(musb_ep);
+	request = next_request(musb_ep);
 
 	wCsrVal = musb_readw(epio, MGC_O_HDRC_RXCSR);
 	dma = is_dma_capable() ? musb_ep->dma : NULL;
 
 	DBG(4, "<== %s, rxcsr %04x%s %p\n", musb_ep->end_point.name,
-			wCsrVal, dma ? " (dma)" : "", pRequest);
+			wCsrVal, dma ? " (dma)" : "", request);
 
 	if (wCsrVal & MGC_M_RXCSR_P_SENTSTALL) {
 		if (dma_channel_status(dma) == MGC_DMA_STATUS_BUSY) {
 			dma->status = MGC_DMA_STATUS_CORE_ABORT;
 			(void) musb->dma_controller->channel_abort(dma);
-			pRequest->actual += musb_ep->dma->actual_len;
+			request->actual += musb_ep->dma->actual_len;
 		}
 
 		wCsrVal |= MGC_M_RXCSR_P_WZC_BITS;
 		wCsrVal &= ~MGC_M_RXCSR_P_SENTSTALL;
 		musb_writew(epio, MGC_O_HDRC_RXCSR, wCsrVal);
 
-		if (pRequest)
-			musb_g_giveback(musb_ep, pRequest, -EPIPE);
+		if (request)
+			musb_g_giveback(musb_ep, request, -EPIPE);
 		goto done;
 	}
 
@@ -772,9 +772,9 @@ void musb_g_rx(struct musb *musb, u8 epn
 		wCsrVal &= ~MGC_M_RXCSR_P_OVERRUN;
 		musb_writew(epio, MGC_O_HDRC_RXCSR, wCsrVal);
 
-		DBG(3, "%s iso overrun on %p\n", musb_ep->name, pRequest);
-		if (pRequest && pRequest->status == -EINPROGRESS)
-			pRequest->status = -EOVERFLOW;
+		DBG(3, "%s iso overrun on %p\n", musb_ep->name, request);
+		if (request && request->status == -EINPROGRESS)
+			request->status = -EOVERFLOW;
 	}
 	if (wCsrVal & MGC_M_RXCSR_INCOMPRX) {
 		/* REVISIT not necessarily an error */
@@ -796,12 +796,12 @@ void musb_g_rx(struct musb *musb, u8 epn
 		musb_writew(epio, MGC_O_HDRC_RXCSR,
 			MGC_M_RXCSR_P_WZC_BITS | wCsrVal);
 
-		pRequest->actual += musb_ep->dma->actual_len;
+		request->actual += musb_ep->dma->actual_len;
 
 		DBG(4, "RXCSR%d %04x, dma off, %04x, len %Zd, req %p\n",
 			epnum, wCsrVal,
 			musb_readw(epio, MGC_O_HDRC_RXCSR),
-			musb_ep->dma->actual_len, pRequest);
+			musb_ep->dma->actual_len, request);
 
 #if defined(CONFIG_USB_INVENTRA_DMA) || defined(CONFIG_USB_TUSB_OMAP_DMA)
 		/* Autoclear doesn't clear RxPktRdy for short packets */
@@ -814,15 +814,15 @@ void musb_g_rx(struct musb *musb, u8 epn
 		}
 
 		/* incomplete, and not short? wait for next IN packet */
-                if ((pRequest->actual < pRequest->length)
+                if ((request->actual < request->length)
 				&& (musb_ep->dma->actual_len
 					== musb_ep->wPacketSize))
 			goto done;
 #endif
-		musb_g_giveback(musb_ep, pRequest, 0);
+		musb_g_giveback(musb_ep, request, 0);
 
-		pRequest = next_request(musb_ep);
-		if (!pRequest)
+		request = next_request(musb_ep);
+		if (!request)
 			goto done;
 
 		/* don't start more i/o till the stall clears */
@@ -834,8 +834,8 @@ void musb_g_rx(struct musb *musb, u8 epn
 
 
 	/* analyze request if the ep is hot */
-	if (pRequest)
-		rxstate(musb, to_musb_request(pRequest));
+	if (request)
+		rxstate(musb, to_musb_request(request));
 	else
 		DBG(3, "packet waiting for %s%s request\n",
 				musb_ep->desc ? "" : "inactive ",
@@ -1046,17 +1046,17 @@ static int musb_gadget_disable(struct us
 struct usb_request *musb_alloc_request(struct usb_ep *ep, gfp_t gfp_flags)
 {
 	struct musb_ep		*musb_ep = to_musb_ep(ep);
-	struct musb_request	*pRequest = NULL;
+	struct musb_request	*request = NULL;
 
-	pRequest = kzalloc(sizeof *pRequest, gfp_flags);
-	if (pRequest) {
-		INIT_LIST_HEAD(&pRequest->request.list);
-		pRequest->request.dma = DMA_ADDR_INVALID;
-		pRequest->epnum = musb_ep->current_epnum;
-		pRequest->ep = musb_ep;
+	request = kzalloc(sizeof *request, gfp_flags);
+	if (request) {
+		INIT_LIST_HEAD(&request->request.list);
+		request->request.dma = DMA_ADDR_INVALID;
+		request->epnum = musb_ep->current_epnum;
+		request->ep = musb_ep;
 	}
 
-	return &pRequest->request;
+	return &request->request;
 }
 
 /*
@@ -1150,7 +1150,7 @@ static int musb_gadget_queue(struct usb_
 			gfp_t gfp_flags)
 {
 	struct musb_ep		*musb_ep;
-	struct musb_request	*pRequest;
+	struct musb_request	*request;
 	struct musb		*musb;
 	int			status = 0;
 	unsigned long		lockflags;
@@ -1163,43 +1163,43 @@ static int musb_gadget_queue(struct usb_
 	musb_ep = to_musb_ep(ep);
 	musb = musb_ep->musb;
 
-	pRequest = to_musb_request(req);
-	pRequest->musb = musb;
+	request = to_musb_request(req);
+	request->musb = musb;
 
-	if (pRequest->ep != musb_ep)
+	if (request->ep != musb_ep)
 		return -EINVAL;
 
 	DBG(4, "<== to %s request=%p\n", ep->name, req);
 
 	/* request is mine now... */
-	pRequest->request.actual = 0;
-	pRequest->request.status = -EINPROGRESS;
-	pRequest->epnum = musb_ep->current_epnum;
-	pRequest->bTx = musb_ep->is_in;
+	request->request.actual = 0;
+	request->request.status = -EINPROGRESS;
+	request->epnum = musb_ep->current_epnum;
+	request->bTx = musb_ep->is_in;
 
 	if (is_dma_capable() && musb_ep->dma) {
-		if (pRequest->request.dma == DMA_ADDR_INVALID) {
-			pRequest->request.dma = dma_map_single(
+		if (request->request.dma == DMA_ADDR_INVALID) {
+			request->request.dma = dma_map_single(
 					musb->controller,
-					pRequest->request.buf,
-					pRequest->request.length,
-					pRequest->bTx
+					request->request.buf,
+					request->request.length,
+					request->bTx
 						? DMA_TO_DEVICE
 						: DMA_FROM_DEVICE);
-			pRequest->mapped = 1;
+			request->mapped = 1;
 		} else {
 			dma_sync_single_for_device(musb->controller,
-					pRequest->request.dma,
-					pRequest->request.length,
-					pRequest->bTx
+					request->request.dma,
+					request->request.length,
+					request->bTx
 						? DMA_TO_DEVICE
 						: DMA_FROM_DEVICE);
-			pRequest->mapped = 0;
+			request->mapped = 0;
 		}
 	} else if (!req->buf) {
 		return -ENODATA;
 	} else
-		pRequest->mapped = 0;
+		request->mapped = 0;
 
 	spin_lock_irqsave(&musb->lock, lockflags);
 
@@ -1211,19 +1211,19 @@ static int musb_gadget_queue(struct usb_
 		goto cleanup;
 	}
 
-	/* add pRequest to the list */
-	list_add_tail(&(pRequest->request.list), &(musb_ep->req_list));
+	/* add request to the list */
+	list_add_tail(&(request->request.list), &(musb_ep->req_list));
 
 	/* it this is the head of the queue, start i/o ... */
-	if (!musb_ep->busy && &pRequest->request.list == musb_ep->req_list.next)
-		musb_ep_restart(musb, pRequest);
+	if (!musb_ep->busy && &request->request.list == musb_ep->req_list.next)
+		musb_ep_restart(musb, request);
 
 cleanup:
 	spin_unlock_irqrestore(&musb->lock, lockflags);
 	return status;
 }
 
-static int musb_gadget_dequeue(struct usb_ep *ep, struct usb_request *pRequest)
+static int musb_gadget_dequeue(struct usb_ep *ep, struct usb_request *request)
 {
 	struct musb_ep		*musb_ep = to_musb_ep(ep);
 	struct usb_request	*r;
@@ -1231,24 +1231,24 @@ static int musb_gadget_dequeue(struct us
 	int			status = 0;
 	struct musb		*musb = musb_ep->musb;
 
-	if (!ep || !pRequest || to_musb_request(pRequest)->ep != musb_ep)
+	if (!ep || !request || to_musb_request(request)->ep != musb_ep)
 		return -EINVAL;
 
 	spin_lock_irqsave(&musb->lock, flags);
 
 	list_for_each_entry(r, &musb_ep->req_list, list) {
-		if (r == pRequest)
+		if (r == request)
 			break;
 	}
-	if (r != pRequest) {
-		DBG(3, "request %p not queued to %s\n", pRequest, ep->name);
+	if (r != request) {
+		DBG(3, "request %p not queued to %s\n", request, ep->name);
 		status = -EINVAL;
 		goto done;
 	}
 
 	/* if the hardware doesn't have the request, easy ... */
-	if (musb_ep->req_list.next != &pRequest->list || musb_ep->busy)
-		musb_g_giveback(musb_ep, pRequest, -ECONNRESET);
+	if (musb_ep->req_list.next != &request->list || musb_ep->busy)
+		musb_g_giveback(musb_ep, request, -ECONNRESET);
 
 	/* ... else abort the dma transfer ... */
 	else if (is_dma_capable() && musb_ep->dma) {
@@ -1260,12 +1260,12 @@ static int musb_gadget_dequeue(struct us
 		else
 			status = -EBUSY;
 		if (status == 0)
-			musb_g_giveback(musb_ep, pRequest, -ECONNRESET);
+			musb_g_giveback(musb_ep, request, -ECONNRESET);
 	} else {
 		/* NOTE: by sticking to easily tested hardware/driver states,
 		 * we leave counting of in-flight packets imprecise.
 		 */
-		musb_g_giveback(musb_ep, pRequest, -ECONNRESET);
+		musb_g_giveback(musb_ep, request, -ECONNRESET);
 	}
 
 done:
@@ -1288,7 +1288,7 @@ int musb_gadget_set_halt(struct usb_ep *
 	void __iomem		*mbase;
 	unsigned long		flags;
 	u16			wCsr;
-	struct musb_request	*pRequest = NULL;
+	struct musb_request	*request = NULL;
 	int			status = 0;
 
 	if (!ep)
@@ -1305,7 +1305,7 @@ int musb_gadget_set_halt(struct usb_ep *
 	musb_ep_select(mbase, epnum);
 
 	/* cannot portably stall with non-empty FIFO */
-	pRequest = to_musb_request(next_request(musb_ep));
+	request = to_musb_request(next_request(musb_ep));
 	if (value && musb_ep->is_in) {
 		wCsr = musb_readw(epio, MGC_O_HDRC_TXCSR);
 		if (wCsr & MGC_M_TXCSR_FIFONOTEMPTY) {
@@ -1347,9 +1347,9 @@ int musb_gadget_set_halt(struct usb_ep *
 done:
 
 	/* maybe start the first request in the queue */
-	if (!musb_ep->busy && !value && pRequest) {
+	if (!musb_ep->busy && !value && request) {
 		DBG(3, "restarting the request\n");
-		musb_ep_restart(musb, pRequest);
+		musb_ep_restart(musb, request);
 	}
 
 	spin_unlock_irqrestore(&musb->lock, flags);
Index: linux-2.6.18/drivers/usb/musb/musb_host.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musb_host.c
+++ linux-2.6.18/drivers/usb/musb/musb_host.c
@@ -950,7 +950,7 @@ static int musb_h_ep0_continue(struct mu
 	u16 fifo_count = 0;
 	struct musb_hw_ep	*hw_ep = musb->control_ep;
 	struct musb_qh		*qh = hw_ep->in_qh;
-	struct usb_ctrlrequest	*pRequest;
+	struct usb_ctrlrequest	*request;
 
 	switch (musb->ep0_stage) {
 	case MGC_END0_IN:
@@ -972,12 +972,12 @@ static int musb_h_ep0_continue(struct mu
 			bMore = TRUE;
 		break;
 	case MGC_END0_START:
-		pRequest = (struct usb_ctrlrequest *) pUrb->setup_packet;
+		request = (struct usb_ctrlrequest *) pUrb->setup_packet;
 
-		if (!pRequest->wLength) {
+		if (!request->wLength) {
 			DBG(4, "start no-DATA\n");
 			break;
-		} else if (pRequest->bRequestType & USB_DIR_IN) {
+		} else if (request->bRequestType & USB_DIR_IN) {
 			DBG(4, "start IN-DATA\n");
 			musb->ep0_stage = MGC_END0_IN;
 			bMore = TRUE;
Index: linux-2.6.18/mvl_patches/pro50-1705.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1705.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1705);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

