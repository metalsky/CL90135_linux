#! /usr/bin/env bash
# Patch: -pro_musb_hdrc_Search_and_replace_pRegs_with_mregs
# Date: Fri Sep 19 14:06:50 2008
# From 55cffb805e703290bc61da09b9e80bbd698f0514 Mon Sep 17 00:00:00 2001
# From: Tony Lindgren <tony@atomide.com>
# Date: Mon, 13 Aug 2007 02:49:14 -0700
# Subject: [PATCH] musb_hdrc: Search and replace pRegs with mregs
# 
# Search and replace pRegs with mregs
# 
# Signed-off-by: Tony Lindgren <tony@atomide.com>
# (cherry picked from commit 5935f69dfc706668ffd75e60e73f8b1336526c8c)

PATCHNUM=1662
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
From 55cffb805e703290bc61da09b9e80bbd698f0514 Mon Sep 17 00:00:00 2001
From: Tony Lindgren <tony@atomide.com>
Date: Mon, 13 Aug 2007 02:49:14 -0700
Subject: [PATCH] musb_hdrc: Search and replace pRegs with mregs

Search and replace pRegs with mregs

Signed-off-by: Tony Lindgren <tony@atomide.com>
(cherry picked from commit 5935f69dfc706668ffd75e60e73f8b1336526c8c)
Index: linux-2.6.18/drivers/usb/musb/davinci.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/davinci.c
+++ linux-2.6.18/drivers/usb/musb/davinci.c
@@ -116,7 +116,7 @@ void musb_platform_disable(struct musb *
 			  DAVINCI_USB_USBINT_MASK
 			| DAVINCI_USB_TXINT_MASK
 			| DAVINCI_USB_RXINT_MASK);
-	musb_writeb(musb->pRegs, MGC_O_HDRC_DEVCTL, 0);
+	musb_writeb(musb->mregs, MGC_O_HDRC_DEVCTL, 0);
 	musb_writel(musb->ctrl_base, DAVINCI_USB_EOI_REG, 0);
 
 	if (is_dma_capable() && !dma_off)
@@ -200,7 +200,7 @@ static struct timer_list otg_workaround;
 static void otg_timer(unsigned long _musb)
 {
 	struct musb		*musb = (void *)_musb;
-	void	*__iomem	mregs = musb->pRegs;
+	void	*__iomem	mregs = musb->mregs;
 	u8			devctl;
 	unsigned long		flags;
 
@@ -309,7 +309,7 @@ static irqreturn_t davinci_interrupt(int
 	 */
 	if (tmp & (DAVINCI_INTR_DRVVBUS << DAVINCI_USB_USBINT_SHIFT)) {
 		int	drvvbus = musb_readl(tibase, DAVINCI_USB_STAT_REG);
-		void	*__iomem mregs = musb->pRegs;
+		void	*__iomem mregs = musb->mregs;
 		u8	devctl = musb_readb(mregs, MGC_O_HDRC_DEVCTL);
 		int	err = musb->int_usb & MGC_M_INTR_VBUSERROR;
 
@@ -381,7 +381,7 @@ int __init musb_platform_init(struct mus
 	void	*__iomem tibase = musb->ctrl_base;
 	u32	revision;
 
-	musb->pRegs += DAVINCI_BASE_OFFSET;
+	musb->mregs += DAVINCI_BASE_OFFSET;
 #if 0
 	/* REVISIT there's something odd about clocking, this
 	 * didn't appear do the job ...
@@ -440,7 +440,7 @@ int musb_platform_exit(struct musb *musb
 		 * long time to fall, especially on EVM with huge C133.
 		 */
 		do {
-			devctl = musb_readb(musb->pRegs, MGC_O_HDRC_DEVCTL);
+			devctl = musb_readb(musb->mregs, MGC_O_HDRC_DEVCTL);
 			if (!(devctl & MGC_M_DEVCTL_VBUS))
 				break;
 			if ((devctl & MGC_M_DEVCTL_VBUS) != warn) {
Index: linux-2.6.18/drivers/usb/musb/g_ep0.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/g_ep0.c
+++ linux-2.6.18/drivers/usb/musb/g_ep0.c
@@ -74,7 +74,7 @@ static int service_tx_status_request(
 	struct musb *musb,
 	const struct usb_ctrlrequest *pControlRequest)
 {
-	void __iomem	*pBase = musb->pRegs;
+	void __iomem	*pBase = musb->mregs;
 	int handled = 1;
 	u8 bResult[2], bEnd = 0;
 	const u8 bRecip = pControlRequest->bRequestType & USB_RECIP_MASK;
@@ -205,7 +205,7 @@ static void musb_g_ep0_giveback(struct m
  */
 static inline void musb_try_b_hnp_enable(struct musb *musb)
 {
-	void __iomem	*pBase = musb->pRegs;
+	void __iomem	*pBase = musb->mregs;
 	u8		devctl;
 
 	DBG(1, "HNP: Setting HR\n");
@@ -230,7 +230,7 @@ __releases(musb->Lock)
 __acquires(musb->Lock)
 {
 	int handled = -EINVAL;
-	void __iomem *pBase = musb->pRegs;
+	void __iomem *pBase = musb->mregs;
 	const u8 bRecip = pControlRequest->bRequestType & USB_RECIP_MASK;
 
 	/* the gadget driver handles everything except what we MUST handle */
@@ -600,7 +600,7 @@ irqreturn_t musb_g_ep0_irq(struct musb *
 {
 	u16		wCsrVal;
 	u16		wCount;
-	void __iomem	*pBase = musb->pRegs;
+	void __iomem	*pBase = musb->mregs;
 	void __iomem	*regs = musb->aLocalEnd[0].regs;
 	irqreturn_t	retval = IRQ_NONE;
 
@@ -877,7 +877,7 @@ musb_g_ep0_queue(struct usb_ep *e, struc
 			ep->name, ep->is_in ? "IN/TX" : "OUT/RX",
 			req->request.length);
 
-	MGC_SelectEnd(musb->pRegs, 0);
+	MGC_SelectEnd(musb->mregs, 0);
 
 	/* sequence #1, IN ... start writing the data */
 	if (musb->ep0_state == MGC_END0_STAGE_TX)
@@ -930,7 +930,7 @@ static int musb_g_ep0_halt(struct usb_ep
 
 	ep = to_musb_ep(e);
 	musb = ep->musb;
-	base = musb->pRegs;
+	base = musb->mregs;
 	regs = musb->control_ep->regs;
 
 	spin_lock_irqsave(&musb->Lock, flags);
Index: linux-2.6.18/drivers/usb/musb/musb_gadget.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musb_gadget.c
+++ linux-2.6.18/drivers/usb/musb/musb_gadget.c
@@ -406,7 +406,7 @@ void musb_g_tx(struct musb *musb, u8 bEn
 {
 	u16			wCsrVal;
 	struct usb_request	*pRequest;
-	u8 __iomem		*pBase = musb->pRegs;
+	u8 __iomem		*pBase = musb->mregs;
 	struct musb_ep		*musb_ep = &musb->aLocalEnd[bEnd].ep_in;
 	void __iomem		*epio = musb->aLocalEnd[bEnd].regs;
 	struct dma_channel	*dma;
@@ -736,7 +736,7 @@ void musb_g_rx(struct musb *musb, u8 bEn
 {
 	u16			wCsrVal;
 	struct usb_request	*pRequest;
-	void __iomem		*pBase = musb->pRegs;
+	void __iomem		*pBase = musb->mregs;
 	struct musb_ep		*musb_ep = &musb->aLocalEnd[bEnd].ep_out;
 	void __iomem		*epio = musb->aLocalEnd[bEnd].regs;
 	struct dma_channel	*dma;
@@ -868,7 +868,7 @@ static int musb_gadget_enable(struct usb
 	hw_ep = musb_ep->hw_ep;
 	regs = hw_ep->regs;
 	musb = musb_ep->musb;
-	pBase = musb->pRegs;
+	pBase = musb->mregs;
 	bEnd = musb_ep->bEndNumber;
 
 	spin_lock_irqsave(&musb->Lock, flags);
@@ -1010,18 +1010,18 @@ static int musb_gadget_disable(struct us
 	epio = musb->aLocalEnd[bEnd].regs;
 
 	spin_lock_irqsave(&musb->Lock, flags);
-	MGC_SelectEnd(musb->pRegs, bEnd);
+	MGC_SelectEnd(musb->mregs, bEnd);
 
 	/* zero the endpoint sizes */
 	if (musb_ep->is_in) {
-		u16 wIntrTxE = musb_readw(musb->pRegs, MGC_O_HDRC_INTRTXE);
+		u16 wIntrTxE = musb_readw(musb->mregs, MGC_O_HDRC_INTRTXE);
 		wIntrTxE &= ~(1 << bEnd);
-		musb_writew(musb->pRegs, MGC_O_HDRC_INTRTXE, wIntrTxE);
+		musb_writew(musb->mregs, MGC_O_HDRC_INTRTXE, wIntrTxE);
 		musb_writew(epio, MGC_O_HDRC_TXMAXP, 0);
 	} else {
-		u16 wIntrRxE = musb_readw(musb->pRegs, MGC_O_HDRC_INTRRXE);
+		u16 wIntrRxE = musb_readw(musb->mregs, MGC_O_HDRC_INTRRXE);
 		wIntrRxE &= ~(1 << bEnd);
-		musb_writew(musb->pRegs, MGC_O_HDRC_INTRRXE, wIntrRxE);
+		musb_writew(musb->mregs, MGC_O_HDRC_INTRRXE, wIntrRxE);
 		musb_writew(epio, MGC_O_HDRC_RXMAXP, 0);
 	}
 
@@ -1139,7 +1139,7 @@ static void musb_ep_restart(struct musb 
 		req->bTx ? "TX/IN" : "RX/OUT",
 		&req->request, req->request.length, req->bEnd);
 
-	MGC_SelectEnd(musb->pRegs, req->bEnd);
+	MGC_SelectEnd(musb->mregs, req->bEnd);
 	if (req->bTx)
 		txstate(musb, req);
 	else
@@ -1254,7 +1254,7 @@ static int musb_gadget_dequeue(struct us
 	else if (is_dma_capable() && musb_ep->dma) {
 		struct dma_controller	*c = musb->pDmaController;
 
-		MGC_SelectEnd(musb->pRegs, musb_ep->bEndNumber);
+		MGC_SelectEnd(musb->mregs, musb_ep->bEndNumber);
 		if (c->channel_abort)
 			status = c->channel_abort(musb_ep->dma);
 		else
@@ -1293,7 +1293,7 @@ int musb_gadget_set_halt(struct usb_ep *
 
 	if (!ep)
 		return -EINVAL;
-	pBase = musb->pRegs;
+	pBase = musb->mregs;
 
 	spin_lock_irqsave(&musb->Lock, flags);
 
@@ -1365,7 +1365,7 @@ static int musb_gadget_fifo_status(struc
 	if (musb_ep->desc && !musb_ep->is_in) {
 		struct musb		*musb = musb_ep->musb;
 		int			bEnd = musb_ep->bEndNumber;
-		void __iomem		*mbase = musb->pRegs;
+		void __iomem		*mbase = musb->mregs;
 		unsigned long		flags;
 
 		spin_lock_irqsave(&musb->Lock, flags);
@@ -1389,7 +1389,7 @@ static void musb_gadget_fifo_flush(struc
 	unsigned long	flags;
 	u16		wCsr, wIntrTxE;
 
-	mbase = musb->pRegs;
+	mbase = musb->mregs;
 
 	spin_lock_irqsave(&musb->Lock, flags);
 	MGC_SelectEnd(mbase, (u8) nEnd);
@@ -1438,13 +1438,13 @@ static int musb_gadget_get_frame(struct 
 {
 	struct musb	*musb = gadget_to_musb(gadget);
 
-	return (int)musb_readw(musb->pRegs, MGC_O_HDRC_FRAME);
+	return (int)musb_readw(musb->mregs, MGC_O_HDRC_FRAME);
 }
 
 static int musb_gadget_wakeup(struct usb_gadget *gadget)
 {
 	struct musb	*musb = gadget_to_musb(gadget);
-	void __iomem	*mregs = musb->pRegs;
+	void __iomem	*mregs = musb->mregs;
 	unsigned long	flags;
 	int		status = -EINVAL;
 	u8		power, devctl;
@@ -1522,7 +1522,7 @@ static void musb_pullup(struct musb *mus
 {
 	u8 power;
 
-	power = musb_readb(musb->pRegs, MGC_O_HDRC_POWER);
+	power = musb_readb(musb->mregs, MGC_O_HDRC_POWER);
 	if (is_on)
 		power |= MGC_M_POWER_SOFTCONN;
 	else
@@ -1532,7 +1532,7 @@ static void musb_pullup(struct musb *mus
 
 	DBG(3, "gadget %s D+ pullup %s\n",
 		musb->pGadgetDriver->function, is_on ? "on" : "off");
-	musb_writeb(musb->pRegs, MGC_O_HDRC_POWER, power);
+	musb_writeb(musb->mregs, MGC_O_HDRC_POWER, power);
 }
 
 #if 0
@@ -1854,7 +1854,7 @@ stop_activity(struct musb *musb, struct 
 		for (i = 0, hw_ep = musb->aLocalEnd;
 				i < musb->bEndCount;
 				i++, hw_ep++) {
-			MGC_SelectEnd(musb->pRegs, i);
+			MGC_SelectEnd(musb->mregs, i);
 			if (hw_ep->bIsSharedFifo /* || !bEnd */) {
 				nuke(&hw_ep->ep_in, -ESHUTDOWN);
 			} else {
@@ -1957,7 +1957,7 @@ void musb_g_suspend(struct musb *musb)
 {
 	u8	devctl;
 
-	devctl = musb_readb(musb->pRegs, MGC_O_HDRC_DEVCTL);
+	devctl = musb_readb(musb->mregs, MGC_O_HDRC_DEVCTL);
 	DBG(3, "devctl %02x\n", devctl);
 
 	switch (musb->xceiv.state) {
@@ -1991,7 +1991,7 @@ void musb_g_wakeup(struct musb *musb)
 /* called when VBUS drops below session threshold, and in other cases */
 void musb_g_disconnect(struct musb *musb)
 {
-	void __iomem	*mregs = musb->pRegs;
+	void __iomem	*mregs = musb->mregs;
 	u8	devctl = musb_readb(mregs, MGC_O_HDRC_DEVCTL);
 
 	DBG(3, "devctl %02x\n", devctl);
@@ -2034,7 +2034,7 @@ void musb_g_reset(struct musb *musb)
 __releases(musb->Lock)
 __acquires(musb->Lock)
 {
-	void __iomem	*pBase = musb->pRegs;
+	void __iomem	*pBase = musb->mregs;
 	u8		devctl = musb_readb(pBase, MGC_O_HDRC_DEVCTL);
 	u8		power;
 
Index: linux-2.6.18/drivers/usb/musb/musb_host.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musb_host.c
+++ linux-2.6.18/drivers/usb/musb/musb_host.c
@@ -172,7 +172,7 @@ musb_start_urb(struct musb *musb, int is
 	u16			wFrame;
 	u32			dwLength;
 	void			*pBuffer;
-	void __iomem		*pBase =  musb->pRegs;
+	void __iomem		*pBase =  musb->mregs;
 	struct urb		*urb = next_urb(qh);
 	struct musb_hw_ep	*hw_ep = qh->hw_ep;
 	unsigned		nPipe = urb->pipe;
@@ -607,7 +607,7 @@ musb_rx_reinit(struct musb *musb, struct
 		musb_writeb(ep->target_regs, MGC_O_HDRC_RXHUBPORT,
 			qh->h_port_reg);
 	} else
-		musb_writeb(musb->pRegs, MGC_O_HDRC_FADDR, qh->addr_reg);
+		musb_writeb(musb->mregs, MGC_O_HDRC_FADDR, qh->addr_reg);
 
 	/* protocol/endpoint, interval/NAKlimit, i/o size */
 	musb_writeb(ep->regs, MGC_O_HDRC_RXTYPE, qh->type_reg);
@@ -630,7 +630,7 @@ static void musb_ep_program(struct musb 
 	struct dma_controller	*pDmaController;
 	struct dma_channel	*pDmaChannel;
 	u8			bDmaOk;
-	void __iomem		*pBase = musb->pRegs;
+	void __iomem		*pBase = musb->mregs;
 	struct musb_hw_ep	*hw_ep = musb->aLocalEnd + bEnd;
 	void __iomem		*epio = hw_ep->regs;
 	struct musb_qh		*qh;
@@ -1023,7 +1023,7 @@ irqreturn_t musb_h_ep0_irq(struct musb *
 	struct urb		*pUrb;
 	u16			wCsrVal, wCount;
 	int			status = 0;
-	void __iomem		*pBase = musb->pRegs;
+	void __iomem		*pBase = musb->mregs;
 	struct musb_hw_ep	*hw_ep = musb->control_ep;
 	void __iomem		*epio = hw_ep->regs;
 	struct musb_qh		*qh = hw_ep->in_qh;
@@ -1174,7 +1174,7 @@ void musb_host_tx(struct musb *musb, u8 
 	void __iomem		*epio = hw_ep->regs;
 	struct musb_qh		*qh = hw_ep->out_qh;
 	u32			status = 0;
-	void __iomem		*pBase = musb->pRegs;
+	void __iomem		*pBase = musb->mregs;
 	struct dma_channel	*dma;
 
 	pUrb = next_urb(qh);
@@ -1384,7 +1384,7 @@ void musb_host_rx(struct musb *musb, u8 
 	void __iomem		*epio = hw_ep->regs;
 	struct musb_qh		*qh = hw_ep->in_qh;
 	size_t			xfer_len;
-	void __iomem		*pBase = musb->pRegs;
+	void __iomem		*pBase = musb->mregs;
 	int			nPipe;
 	u16			wRxCsrVal, wVal;
 	u8			bIsochError = FALSE;
@@ -1904,7 +1904,7 @@ static int musb_cleanup_urb(struct urb *
 	struct musb_hw_ep	*ep = qh->hw_ep;
 	void __iomem		*epio = ep->regs;
 	unsigned		hw_end = ep->bLocalEnd;
-	void __iomem		*regs = ep->musb->pRegs;
+	void __iomem		*regs = ep->musb->mregs;
 	u16			csr;
 	int			status = 0;
 
@@ -2107,7 +2107,7 @@ static int musb_h_get_frame_number(struc
 {
 	struct musb	*musb = hcd_to_musb(hcd);
 
-	return musb_readw(musb->pRegs, MGC_O_HDRC_FRAME);
+	return musb_readw(musb->mregs, MGC_O_HDRC_FRAME);
 }
 
 static int musb_h_start(struct usb_hcd *hcd)
Index: linux-2.6.18/drivers/usb/musb/musb_procfs.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musb_procfs.c
+++ linux-2.6.18/drivers/usb/musb/musb_procfs.c
@@ -240,7 +240,7 @@ dump_end_info(struct musb *musb, u8 bEnd
 	struct musb_hw_ep	*hw_ep = &musb->aLocalEnd[bEnd];
 
 	do {
-		MGC_SelectEnd(musb->pRegs, bEnd);
+		MGC_SelectEnd(musb->mregs, bEnd);
 #ifdef CONFIG_USB_MUSB_HDRC_HCD
 		if (is_host_active(musb)) {
 			int		dump_rx, dump_tx;
@@ -284,13 +284,13 @@ dump_end_info(struct musb *musb, u8 bEnd
 					musb_readw(regs, MGC_O_HDRC_RXMAXP),
 					musb_readb(regs, MGC_O_HDRC_RXTYPE),
 					/* FIXME:  assumes multipoint */
-					musb_readb(musb->pRegs,
+					musb_readb(musb->mregs,
 						MGC_BUSCTL_OFFSET(bEnd,
 						MGC_O_HDRC_RXFUNCADDR)),
-					musb_readb(musb->pRegs,
+					musb_readb(musb->mregs,
 						MGC_BUSCTL_OFFSET(bEnd,
 						MGC_O_HDRC_RXHUBADDR)),
-					musb_readb(musb->pRegs,
+					musb_readb(musb->mregs,
 						MGC_BUSCTL_OFFSET(bEnd,
 						MGC_O_HDRC_RXHUBPORT))
 					);
@@ -372,13 +372,13 @@ dump_end_info(struct musb *musb, u8 bEnd
 					musb_readw(regs, MGC_O_HDRC_TXMAXP),
 					musb_readb(regs, MGC_O_HDRC_TXTYPE),
 					/* FIXME:  assumes multipoint */
-					musb_readb(musb->pRegs,
+					musb_readb(musb->mregs,
 						MGC_BUSCTL_OFFSET(bEnd,
 						MGC_O_HDRC_TXFUNCADDR)),
-					musb_readb(musb->pRegs,
+					musb_readb(musb->mregs,
 						MGC_BUSCTL_OFFSET(bEnd,
 						MGC_O_HDRC_TXHUBADDR)),
-					musb_readb(musb->pRegs,
+					musb_readb(musb->mregs,
 						MGC_BUSCTL_OFFSET(bEnd,
 						MGC_O_HDRC_TXHUBPORT))
 					);
@@ -485,7 +485,7 @@ dump_end_info(struct musb *musb, u8 bEnd
 static int dump_header_stats(struct musb *musb, char *buffer)
 {
 	int code, count = 0;
-	const void __iomem *pBase = musb->pRegs;
+	const void __iomem *pBase = musb->mregs;
 
 	*buffer = 0;
 	count = sprintf(buffer, "Status: %sHDRC, Mode=%s "
@@ -653,7 +653,7 @@ static int musb_proc_write(struct file *
 	char cmd;
 	u8 bReg;
 	struct musb *musb = (struct musb *)data;
-	void __iomem *pBase = musb->pRegs;
+	void __iomem *pBase = musb->mregs;
 
 	/* MOD_INC_USE_COUNT; */
 
Index: linux-2.6.18/drivers/usb/musb/musbdefs.h
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musbdefs.h
+++ linux-2.6.18/drivers/usb/musb/musbdefs.h
@@ -242,7 +242,7 @@ enum musb_g_ep0_state {
 	{ (_pthis)->bIsHost=FALSE; }
 
 #define test_devctl_hst_mode(_x) \
-	(musb_readb((_x)->pRegs, MGC_O_HDRC_DEVCTL)&MGC_M_DEVCTL_HM)
+	(musb_readb((_x)->mregs, MGC_O_HDRC_DEVCTL)&MGC_M_DEVCTL_HM)
 
 #define MUSB_MODE(musb) ((musb)->bIsHost ? "Host" : "Peripheral")
 
@@ -380,7 +380,7 @@ struct musb {
 
 	struct device		*controller;
 	void __iomem		*ctrl_base;
-	void __iomem		*pRegs;
+	void __iomem		*mregs;
 
 #ifdef CONFIG_USB_TUSB6010
 	dma_addr_t		async;
Index: linux-2.6.18/drivers/usb/musb/musbhdrc.h
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musbhdrc.h
+++ linux-2.6.18/drivers/usb/musb/musbhdrc.h
@@ -61,7 +61,7 @@
 #define MGC_O_HDRC_INDEX        0x0E	/* 8 bit */
 #define MGC_O_HDRC_TESTMODE     0x0F	/* 8 bit */
 
-/* Get offset for a given FIFO from musb->pRegs */
+/* Get offset for a given FIFO from musb->mregs */
 #ifdef	CONFIG_USB_TUSB6010
 #define MUSB_FIFO_OFFSET(epnum)	(0x200 + ((epnum) * 0x20))
 #else
Index: linux-2.6.18/drivers/usb/musb/omap2430.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/omap2430.c
+++ linux-2.6.18/drivers/usb/musb/omap2430.c
@@ -59,7 +59,7 @@ static void omap_set_vbus(struct musb *m
 	 * that must be ignored.
 	 */
 
-	devctl = musb_readb(musb->pRegs, MGC_O_HDRC_DEVCTL);
+	devctl = musb_readb(musb->mregs, MGC_O_HDRC_DEVCTL);
 
 	if (is_on) {
 		musb->is_active = 1;
@@ -81,12 +81,12 @@ static void omap_set_vbus(struct musb *m
 
 		MUSB_DEV_MODE(musb);
 	}
-	musb_writeb(musb->pRegs, MGC_O_HDRC_DEVCTL, devctl);
+	musb_writeb(musb->mregs, MGC_O_HDRC_DEVCTL, devctl);
 
 	DBG(1, "VBUS %s, devctl %02x "
 		/* otg %3x conf %08x prcm %08x */ "\n",
 		otg_state_string(musb),
-		musb_readb(musb->pRegs, MGC_O_HDRC_DEVCTL));
+		musb_readb(musb->mregs, MGC_O_HDRC_DEVCTL));
 }
 static int omap_set_power(struct otg_transceiver *x, unsigned mA)
 {
Index: linux-2.6.18/drivers/usb/musb/plat_uds.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/plat_uds.c
+++ linux-2.6.18/drivers/usb/musb/plat_uds.c
@@ -273,7 +273,7 @@ void musb_load_testpacket(struct musb *m
 {
 	void __iomem	*regs = musb->aLocalEnd[0].regs;
 
-	MGC_SelectEnd(musb->pRegs, 0);
+	MGC_SelectEnd(musb->mregs, 0);
 	musb_write_fifo(musb->control_ep,
 			sizeof(musb_test_packet), musb_test_packet);
 	musb_writew(regs, MGC_O_HDRC_CSR0, MGC_M_CSR0_TXPKTRDY);
@@ -315,7 +315,7 @@ static DEFINE_TIMER(musb_otg_timer, musb
 void musb_hnp_stop(struct musb *musb)
 {
 	struct usb_hcd	*hcd = musb_to_hcd(musb);
-	void __iomem	*pBase = musb->pRegs;
+	void __iomem	*pBase = musb->mregs;
 	u8	reg;
 
 	switch (musb->xceiv.state) {
@@ -365,7 +365,7 @@ static irqreturn_t musb_stage0_irq(struc
 {
 	irqreturn_t handled = IRQ_NONE;
 #ifdef CONFIG_USB_MUSB_HDRC_HCD
-	void __iomem *pBase = musb->pRegs;
+	void __iomem *pBase = musb->mregs;
 #endif
 
 	DBG(3, "<== Power=%02x, DevCtl=%02x, bIntrUSB=0x%x\n", power, devctl,
@@ -660,7 +660,7 @@ static irqreturn_t musb_stage2_irq(struc
  * to support ISO transfers yet.
  */
 	if (bIntrUSB & MGC_M_INTR_SOF) {
-		void __iomem *pBase = musb->pRegs;
+		void __iomem *pBase = musb->mregs;
 		struct musb_hw_ep	*ep;
 		u8 bEnd;
 		u16 wFrame;
@@ -785,7 +785,7 @@ static irqreturn_t musb_stage2_irq(struc
 */
 void musb_start(struct musb *musb)
 {
-	void __iomem	*regs = musb->pRegs;
+	void __iomem	*regs = musb->mregs;
 	u8		devctl = musb_readb(regs, MGC_O_HDRC_DEVCTL);
 
 	DBG(2, "<== devctl %02x\n", devctl);
@@ -835,7 +835,7 @@ void musb_start(struct musb *musb)
 
 static void musb_generic_disable(struct musb *musb)
 {
-	void __iomem	*pBase = musb->pRegs;
+	void __iomem	*pBase = musb->mregs;
 	u16	temp;
 
 	/* disable interrupts */
@@ -1022,7 +1022,7 @@ static int __init
 fifo_setup(struct musb *musb, struct musb_hw_ep  *hw_ep,
 		const struct fifo_cfg *cfg, u16 offset)
 {
-	void __iomem	*mbase = musb->pRegs;
+	void __iomem	*mbase = musb->mregs;
 	int	size = 0;
 	u16	maxpacket = cfg->maxpacket;
 	u16	c_off = offset >> 3;
@@ -1180,7 +1180,7 @@ static int __init ep_config_from_hw(stru
 {
 	u8 bEnd = 0, reg;
 	struct musb_hw_ep *hw_ep;
-	void *pBase = musb->pRegs;
+	void *pBase = musb->mregs;
 
 	DBG(2, "<== static silicon ep config\n");
 
@@ -1252,7 +1252,7 @@ static int __init musb_core_init(u16 wTy
 	char *type;
 	u16 wRelease, wRelMajor, wRelMinor;
 	char aInfo[78], aRevision[32], aDate[12];
-	void __iomem	*pBase = musb->pRegs;
+	void __iomem	*pBase = musb->mregs;
 	int		status = 0;
 	int		i;
 
@@ -1421,9 +1421,9 @@ static irqreturn_t generic_interrupt(int
 
 	spin_lock_irqsave(&musb->Lock, flags);
 
-	musb->int_usb = musb_readb(musb->pRegs, MGC_O_HDRC_INTRUSB);
-	musb->int_tx = musb_readw(musb->pRegs, MGC_O_HDRC_INTRTX);
-	musb->int_rx = musb_readw(musb->pRegs, MGC_O_HDRC_INTRRX);
+	musb->int_usb = musb_readb(musb->mregs, MGC_O_HDRC_INTRUSB);
+	musb->int_tx = musb_readw(musb->mregs, MGC_O_HDRC_INTRTX);
+	musb->int_rx = musb_readw(musb->mregs, MGC_O_HDRC_INTRRX);
 
 	if (musb->int_usb || musb->int_tx || musb->int_rx)
 		retval = musb_interrupt(musb);
@@ -1457,8 +1457,8 @@ irqreturn_t musb_interrupt(struct musb *
 	int		ep_num;
 	u32		reg;
 
-	devctl = musb_readb(musb->pRegs, MGC_O_HDRC_DEVCTL);
-	power = musb_readb(musb->pRegs, MGC_O_HDRC_POWER);
+	devctl = musb_readb(musb->mregs, MGC_O_HDRC_DEVCTL);
+	power = musb_readb(musb->mregs, MGC_O_HDRC_POWER);
 
 	DBG(4, "** IRQ %s usb%04x tx%04x rx%04x\n",
 		(devctl & MGC_M_DEVCTL_HM) ? "host" : "peripheral",
@@ -1486,7 +1486,7 @@ irqreturn_t musb_interrupt(struct musb *
 	ep_num = 1;
 	while (reg) {
 		if (reg & 1) {
-			// MGC_SelectEnd(musb->pRegs, ep_num);
+			// MGC_SelectEnd(musb->mregs, ep_num);
 			/* REVISIT just retval = ep->rx_irq(...) */
 			retval = IRQ_HANDLED;
 			if (devctl & MGC_M_DEVCTL_HM) {
@@ -1507,7 +1507,7 @@ irqreturn_t musb_interrupt(struct musb *
 	ep_num = 1;
 	while (reg) {
 		if (reg & 1) {
-			// MGC_SelectEnd(musb->pRegs, ep_num);
+			// MGC_SelectEnd(musb->mregs, ep_num);
 			/* REVISIT just retval |= ep->tx_irq(...) */
 			retval = IRQ_HANDLED;
 			if (devctl & MGC_M_DEVCTL_HM) {
@@ -1540,7 +1540,7 @@ MODULE_PARM_DESC(use_dma, "enable/disabl
 
 void musb_dma_completion(struct musb *musb, u8 bLocalEnd, u8 bTransmit)
 {
-	u8	devctl = musb_readb(musb->pRegs, MGC_O_HDRC_DEVCTL);
+	u8	devctl = musb_readb(musb->mregs, MGC_O_HDRC_DEVCTL);
 
 	/* called with controller lock already held */
 
@@ -1640,7 +1640,7 @@ musb_cable_show(struct device *dev, stru
 	 * VBUS high for a long time after power has been removed, can
 	 * cause temporary false indications of a connection.
 	 */
-	vbus = musb_readb(musb->pRegs, MGC_O_HDRC_DEVCTL);
+	vbus = musb_readb(musb->mregs, MGC_O_HDRC_DEVCTL);
 	if (vbus & 0x10) {
 		/* REVISIT retest on real OTG hardware */
 		switch (musb->board_mode) {
@@ -1768,7 +1768,7 @@ allocate_instance(struct device *dev, vo
 
 #endif
 
-	musb->pRegs = mbase;
+	musb->mregs = mbase;
 	musb->ctrl_base = mbase;
 	musb->nIrq = -ENODEV;
 	for (epnum = 0, ep = musb->aLocalEnd;
@@ -1814,9 +1814,9 @@ static void musb_free(struct musb *musb)
 		dma_controller_destroy(c);
 	}
 
-	musb_writeb(musb->pRegs, MGC_O_HDRC_DEVCTL, 0);
+	musb_writeb(musb->mregs, MGC_O_HDRC_DEVCTL, 0);
 	musb_platform_exit(musb);
-	musb_writeb(musb->pRegs, MGC_O_HDRC_DEVCTL, 0);
+	musb_writeb(musb->mregs, MGC_O_HDRC_DEVCTL, 0);
 
 	if (musb->clock) {
 		clk_disable(musb->clock);
@@ -1835,7 +1835,7 @@ static void musb_free(struct musb *musb)
  *
  * @pDevice: the controller (already clocked, etc)
  * @nIrq: irq
- * @pRegs: virtual address of controller registers,
+ * @mregs: virtual address of controller registers,
  *	not yet corrected for platform-specific offsets
  */
 static int __init
@@ -1903,7 +1903,7 @@ musb_init_controller(struct device *dev,
 
 	/* assume vbus is off */
 
-	/* platform adjusts musb->pRegs and musb->isr if needed,
+	/* platform adjusts musb->mregs and musb->isr if needed,
 	 * and activates clocks
 	 */
 	musb->isr = generic_interrupt;
@@ -1920,7 +1920,7 @@ musb_init_controller(struct device *dev,
 	if (use_dma && dev->dma_mask) {
 		struct dma_controller	*c;
 
-		c = dma_controller_create(musb, musb->pRegs);
+		c = dma_controller_create(musb, musb->mregs);
 		musb->pDmaController = c;
 		if (c)
 			(void) c->start(c->pPrivateData);
@@ -1990,8 +1990,8 @@ musb_init_controller(struct device *dev,
 
 		DBG(1, "%s mode, status %d, devctl %02x %c\n",
 			"HOST", status,
-			musb_readb(musb->pRegs, MGC_O_HDRC_DEVCTL),
-			(musb_readb(musb->pRegs, MGC_O_HDRC_DEVCTL)
+			musb_readb(musb->mregs, MGC_O_HDRC_DEVCTL),
+			(musb_readb(musb->mregs, MGC_O_HDRC_DEVCTL)
 					& MGC_M_DEVCTL_BDEVICE
 				? 'B' : 'A'));
 
@@ -2005,7 +2005,7 @@ musb_init_controller(struct device *dev,
 		DBG(1, "%s mode, status %d, dev%02x\n",
 			is_otg_enabled(musb) ? "OTG" : "PERIPHERAL",
 			status,
-			musb_readb(musb->pRegs, MGC_O_HDRC_DEVCTL));
+			musb_readb(musb->mregs, MGC_O_HDRC_DEVCTL));
 
 	}
 
Index: linux-2.6.18/drivers/usb/musb/tusb6010.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/tusb6010.c
+++ linux-2.6.18/drivers/usb/musb/tusb6010.c
@@ -504,7 +504,7 @@ static void tusb_source_power(struct mus
 
 	prcm = musb_readl(base, TUSB_PRCM_MNGMT);
 	conf = musb_readl(base, TUSB_DEV_CONF);
-	devctl = musb_readb(musb->pRegs, MGC_O_HDRC_DEVCTL);
+	devctl = musb_readb(musb->mregs, MGC_O_HDRC_DEVCTL);
 
 	if (is_on) {
 		musb->is_active = 1;
@@ -535,11 +535,11 @@ static void tusb_source_power(struct mus
 	musb_writel(base, TUSB_PRCM_MNGMT, prcm);
 	musb_writel(base, TUSB_DEV_OTG_TIMER, timer);
 	musb_writel(base, TUSB_DEV_CONF, conf);
-	musb_writeb(musb->pRegs, MGC_O_HDRC_DEVCTL, devctl);
+	musb_writeb(musb->mregs, MGC_O_HDRC_DEVCTL, devctl);
 
 	DBG(1, "VBUS %s, devctl %02x otg %3x conf %08x prcm %08x\n",
 		otg_state_string(musb),
-		musb_readb(musb->pRegs, MGC_O_HDRC_DEVCTL),
+		musb_readb(musb->mregs, MGC_O_HDRC_DEVCTL),
 		musb_readl(base, TUSB_DEV_OTG_STAT),
 		conf, prcm);
 }
@@ -679,10 +679,10 @@ tusb_otg_ints(struct musb *musb, u32 int
 			switch (musb->xceiv.state) {
 			case OTG_STATE_A_IDLE:
 				DBG(2, "Got SRP, turning on VBUS\n");
-				devctl = musb_readb(musb->pRegs,
+				devctl = musb_readb(musb->mregs,
 							MGC_O_HDRC_DEVCTL);
 				devctl |= MGC_M_DEVCTL_SESSION;
-				musb_writeb(musb->pRegs, MGC_O_HDRC_DEVCTL,
+				musb_writeb(musb->mregs, MGC_O_HDRC_DEVCTL,
 							devctl);
 				musb->xceiv.state = OTG_STATE_A_WAIT_VRISE;
 
@@ -726,7 +726,7 @@ tusb_otg_ints(struct musb *musb, u32 int
 			/* VBUS has probably been valid for a while now,
 			 * but may well have bounced out of range a bit
 			 */
-			devctl = musb_readb(musb->pRegs, MGC_O_HDRC_DEVCTL);
+			devctl = musb_readb(musb->mregs, MGC_O_HDRC_DEVCTL);
 			if (otg_stat & TUSB_DEV_OTG_STAT_VBUS_VALID) {
 				if ((devctl & MGC_M_DEVCTL_VBUS)
 						!= MGC_M_DEVCTL_VBUS) {
@@ -1077,7 +1077,7 @@ int __init musb_platform_init(struct mus
 	/* Offsets from base: VLYNQ at 0x000, MUSB regs at 0x400,
 	 * FIFOs at 0x600, TUSB at 0x800
 	 */
-	musb->pRegs += TUSB_BASE_OFFSET;
+	musb->mregs += TUSB_BASE_OFFSET;
 
 	ret = tusb_start(musb);
 	if (ret) {
Index: linux-2.6.18/drivers/usb/musb/tusb6010_omap.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/tusb6010_omap.c
+++ linux-2.6.18/drivers/usb/musb/tusb6010_omap.c
@@ -145,7 +145,7 @@ static void tusb_omap_dma_cb(int lch, u1
 	struct musb		*musb = chdat->musb;
 	struct musb_hw_ep	*hw_ep = chdat->hw_ep;
 	void __iomem		*ep_conf = hw_ep->conf;
-	void __iomem		*musb_base = musb->pRegs;
+	void __iomem		*musb_base = musb->mregs;
 	unsigned long		remaining, flags, pio;
 	int			ch;
 
@@ -240,7 +240,7 @@ static int tusb_omap_dma_program(struct 
 	struct tusb_omap_dma		*tusb_dma = chdat->tusb_dma;
 	struct musb			*musb = chdat->musb;
 	struct musb_hw_ep		*hw_ep = chdat->hw_ep;
-	void __iomem			*musb_base = musb->pRegs;
+	void __iomem			*musb_base = musb->mregs;
 	void __iomem			*ep_conf = hw_ep->conf;
 	dma_addr_t			fifo = hw_ep->fifo_sync;
 	struct omap_dma_channel_params	dma_params;
Index: linux-2.6.18/drivers/usb/musb/virthub.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/virthub.c
+++ linux-2.6.18/drivers/usb/musb/virthub.c
@@ -49,7 +49,7 @@
 static void musb_port_suspend(struct musb *musb, u8 bSuspend)
 {
 	u8		power;
-	void __iomem	*pBase = musb->pRegs;
+	void __iomem	*pBase = musb->mregs;
 
 	if (!is_host_active(musb))
 		return;
@@ -110,7 +110,7 @@ static void musb_port_suspend(struct mus
 static void musb_port_reset(struct musb *musb, u8 bReset)
 {
 	u8		power;
-	void __iomem	*pBase = musb->pRegs;
+	void __iomem	*pBase = musb->mregs;
 
 #ifdef CONFIG_USB_MUSB_OTG
 	/* REVISIT this looks wrong for HNP */
@@ -308,11 +308,11 @@ int musb_hub_control(
 				&& time_after(jiffies, musb->rh_timer)) {
 			u8		power;
 
-			power = musb_readb(musb->pRegs, MGC_O_HDRC_POWER);
+			power = musb_readb(musb->mregs, MGC_O_HDRC_POWER);
 			power &= ~MGC_M_POWER_RESUME;
 			DBG(4, "root port resume stopped, power %02x\n",
 					power);
-			musb_writeb(musb->pRegs, MGC_O_HDRC_POWER, power);
+			musb_writeb(musb->mregs, MGC_O_HDRC_POWER, power);
 
 			/* ISSUE:  DaVinci (RTL 1.300) disconnects after
 			 * resume of high speed peripherals (but not full
@@ -388,7 +388,7 @@ int musb_hub_control(
 				temp = MGC_M_TEST_FORCE_HOST
 					| MGC_M_TEST_FORCE_HS;
 
-				musb_writeb(musb->pRegs, MGC_O_HDRC_DEVCTL, MGC_M_DEVCTL_SESSION);
+				musb_writeb(musb->mregs, MGC_O_HDRC_DEVCTL, MGC_M_DEVCTL_SESSION);
 				break;
 			case 6:
 				pr_debug("TEST_FIFO_ACCESS\n");
@@ -397,7 +397,7 @@ int musb_hub_control(
 			default:
 				goto error;
 			}
-			musb_writeb(musb->pRegs, MGC_O_HDRC_TESTMODE, temp);
+			musb_writeb(musb->mregs, MGC_O_HDRC_TESTMODE, temp);
 			break;
 		default:
 			goto error;
Index: linux-2.6.18/mvl_patches/pro50-1662.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1662.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1662);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

