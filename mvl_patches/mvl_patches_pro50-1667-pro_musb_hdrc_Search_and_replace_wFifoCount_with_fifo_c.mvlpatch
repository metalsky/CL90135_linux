#! /usr/bin/env bash
# Patch: -pro_musb_hdrc_Search_and_replace_wFifoCount_with_fifo_c
# Date: Fri Sep 19 14:07:10 2008
# From a42f993fb3b84217765921513174af266024c76a Mon Sep 17 00:00:00 2001
# From: Tony Lindgren <tony@atomide.com>
# Date: Mon, 13 Aug 2007 03:08:23 -0700
# Subject: [PATCH] musb_hdrc: Search and replace wFifoCount with fifo_count
# 
# Search and replace wFifoCount with fifo_count
# 
# Signed-off-by: Tony Lindgren <tony@atomide.com>
# (cherry picked from commit 3da3ed8e7131a5e4c516165db0dee9ae427a2289)

PATCHNUM=1667
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
From a42f993fb3b84217765921513174af266024c76a Mon Sep 17 00:00:00 2001
From: Tony Lindgren <tony@atomide.com>
Date: Mon, 13 Aug 2007 03:08:23 -0700
Subject: [PATCH] musb_hdrc: Search and replace wFifoCount with fifo_count

Search and replace wFifoCount with fifo_count

Signed-off-by: Tony Lindgren <tony@atomide.com>
(cherry picked from commit 3da3ed8e7131a5e4c516165db0dee9ae427a2289)
Index: linux-2.6.18/drivers/usb/musb/g_ep0.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/g_ep0.c
+++ linux-2.6.18/drivers/usb/musb/g_ep0.c
@@ -487,7 +487,7 @@ static void ep0_txstate(struct musb *mus
 	struct usb_request	*pRequest = next_ep0_request(musb);
 	u16			wCsrVal = MGC_M_CSR0_TXPKTRDY;
 	u8			*pFifoSource;
-	u8			wFifoCount;
+	u8			fifo_count;
 
 	if (!pRequest) {
 		// WARN_ON(1);
@@ -497,13 +497,13 @@ static void ep0_txstate(struct musb *mus
 
 	/* load the data */
 	pFifoSource = (u8 *) pRequest->buf + pRequest->actual;
-	wFifoCount = min((unsigned) MGC_END0_FIFOSIZE,
+	fifo_count = min((unsigned) MGC_END0_FIFOSIZE,
 		pRequest->length - pRequest->actual);
-	musb_write_fifo(&musb->aLocalEnd[0], wFifoCount, pFifoSource);
-	pRequest->actual += wFifoCount;
+	musb_write_fifo(&musb->aLocalEnd[0], fifo_count, pFifoSource);
+	pRequest->actual += fifo_count;
 
 	/* update the flags */
-	if (wFifoCount < MUSB_MAX_END0_PACKET
+	if (fifo_count < MUSB_MAX_END0_PACKET
 			|| pRequest->actual == pRequest->length) {
 		musb->ep0_state = MGC_END0_STAGE_STATUSOUT;
 		wCsrVal |= MGC_M_CSR0_P_DATAEND;
Index: linux-2.6.18/drivers/usb/musb/musb_gadget.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musb_gadget.c
+++ linux-2.6.18/drivers/usb/musb/musb_gadget.c
@@ -256,7 +256,7 @@ static void txstate(struct musb *musb, s
 	struct musb_ep		*musb_ep;
 	void __iomem		*epio = musb->aLocalEnd[bEnd].regs;
 	struct usb_request	*pRequest;
-	u16			wFifoCount = 0, wCsrVal;
+	u16			fifo_count = 0, wCsrVal;
 	int			use_dma = 0;
 
 	musb_ep = req->ep;
@@ -271,7 +271,7 @@ static void txstate(struct musb *musb, s
 	wCsrVal = musb_readw(epio, MGC_O_HDRC_TXCSR);
 
 	pRequest = &req->request;
-	wFifoCount = min(max_ep_writesize(musb, musb_ep),
+	fifo_count = min(max_ep_writesize(musb, musb_ep),
 			(int)(pRequest->length - pRequest->actual));
 
 	if (wCsrVal & MGC_M_TXCSR_TXPKTRDY) {
@@ -287,7 +287,7 @@ static void txstate(struct musb *musb, s
 	}
 
 	DBG(4, "hw_ep%d, maxpacket %d, fifo count %d, txcsr %03x\n",
-			bEnd, musb_ep->wPacketSize, wFifoCount,
+			bEnd, musb_ep->wPacketSize, fifo_count,
 			wCsrVal);
 
 #ifndef	CONFIG_USB_INVENTRA_FIFO
@@ -381,9 +381,9 @@ static void txstate(struct musb *musb, s
 #endif
 
 	if (!use_dma) {
-		musb_write_fifo(musb_ep->hw_ep, wFifoCount,
+		musb_write_fifo(musb_ep->hw_ep, fifo_count,
 				(u8 *) (pRequest->buf + pRequest->actual));
-		pRequest->actual += wFifoCount;
+		pRequest->actual += fifo_count;
 		wCsrVal |= MGC_M_TXCSR_TXPKTRDY;
 		wCsrVal &= ~MGC_M_TXCSR_P_UNDERRUN;
 		musb_writew(epio, MGC_O_HDRC_TXCSR, wCsrVal);
@@ -394,7 +394,7 @@ static void txstate(struct musb *musb, s
 			musb_ep->end_point.name, use_dma ? "dma" : "pio",
 			pRequest->actual, pRequest->length,
 			musb_readw(epio, MGC_O_HDRC_TXCSR),
-			wFifoCount,
+			fifo_count,
 			musb_readw(epio, MGC_O_HDRC_TXMAXP));
 }
 
@@ -577,7 +577,7 @@ static void rxstate(struct musb *musb, s
 	struct usb_request	*pRequest = &req->request;
 	struct musb_ep		*musb_ep = &musb->aLocalEnd[bEnd].ep_out;
 	void __iomem		*epio = musb->aLocalEnd[bEnd].regs;
-	u16			wFifoCount = 0;
+	u16			fifo_count = 0;
 	u16			wCount = musb_ep->wPacketSize;
 
 	wCsrVal = musb_readw(epio, MGC_O_HDRC_RXCSR);
@@ -684,13 +684,13 @@ static void rxstate(struct musb *musb, s
 			}
 #endif	/* Mentor's USB */
 
-			wFifoCount = pRequest->length - pRequest->actual;
+			fifo_count = pRequest->length - pRequest->actual;
 			DBG(3, "%s OUT/RX pio fifo %d/%d, maxpacket %d\n",
 					musb_ep->end_point.name,
-					wCount, wFifoCount,
+					wCount, fifo_count,
 					musb_ep->wPacketSize);
 
-			wFifoCount = min(wCount, wFifoCount);
+			fifo_count = min(wCount, fifo_count);
 
 #ifdef	CONFIG_USB_TUSB_OMAP_DMA
 			if (tusb_dma_omap() && musb_ep->dma) {
@@ -703,15 +703,15 @@ static void rxstate(struct musb *musb, s
 						musb_ep->wPacketSize,
 						channel->bDesiredMode,
 						dma_addr,
-						wFifoCount);
+						fifo_count);
 				if (ret == TRUE)
 					return;
 			}
 #endif
 
-			musb_read_fifo(musb_ep->hw_ep, wFifoCount, (u8 *)
+			musb_read_fifo(musb_ep->hw_ep, fifo_count, (u8 *)
 					(pRequest->buf + pRequest->actual));
-			pRequest->actual += wFifoCount;
+			pRequest->actual += fifo_count;
 
 			/* REVISIT if we left anything in the fifo, flush
 			 * it and report -EOVERFLOW
Index: linux-2.6.18/drivers/usb/musb/musb_host.c
===================================================================
--- linux-2.6.18.orig/drivers/usb/musb/musb_host.c
+++ linux-2.6.18/drivers/usb/musb/musb_host.c
@@ -947,7 +947,7 @@ static int musb_h_ep0_continue(struct mu
 {
 	int			 bMore = FALSE;
 	u8 *pFifoDest = NULL;
-	u16 wFifoCount = 0;
+	u16 fifo_count = 0;
 	struct musb_hw_ep	*hw_ep = musb->control_ep;
 	struct musb_qh		*qh = hw_ep->in_qh;
 	struct usb_ctrlrequest	*pRequest;
@@ -955,14 +955,14 @@ static int musb_h_ep0_continue(struct mu
 	switch (musb->bEnd0Stage) {
 	case MGC_END0_IN:
 		pFifoDest = pUrb->transfer_buffer + pUrb->actual_length;
-		wFifoCount = min(wCount, ((u16) (pUrb->transfer_buffer_length
+		fifo_count = min(wCount, ((u16) (pUrb->transfer_buffer_length
 					- pUrb->actual_length)));
-		if (wFifoCount < wCount)
+		if (fifo_count < wCount)
 			pUrb->status = -EOVERFLOW;
 
-		musb_read_fifo(hw_ep, wFifoCount, pFifoDest);
+		musb_read_fifo(hw_ep, fifo_count, pFifoDest);
 
-		pUrb->actual_length += wFifoCount;
+		pUrb->actual_length += fifo_count;
 		if (wCount < qh->maxpacket) {
 			/* always terminate on short read; it's
 			 * rarely reported as an error.
@@ -989,18 +989,18 @@ static int musb_h_ep0_continue(struct mu
 		}
 		/* FALLTHROUGH */
 	case MGC_END0_OUT:
-		wFifoCount = min(qh->maxpacket, ((u16)
+		fifo_count = min(qh->maxpacket, ((u16)
 				(pUrb->transfer_buffer_length
 				- pUrb->actual_length)));
 
-		if (wFifoCount) {
+		if (fifo_count) {
 			pFifoDest = (u8 *) (pUrb->transfer_buffer
 					+ pUrb->actual_length);
 			DBG(3, "Sending %d bytes to %p\n",
-					wFifoCount, pFifoDest);
-			musb_write_fifo(hw_ep, wFifoCount, pFifoDest);
+					fifo_count, pFifoDest);
+			musb_write_fifo(hw_ep, fifo_count, pFifoDest);
 
-			pUrb->actual_length += wFifoCount;
+			pUrb->actual_length += fifo_count;
 			bMore = TRUE;
 		}
 		break;
Index: linux-2.6.18/mvl_patches/pro50-1667.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1667.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1667);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

