#! /usr/bin/env bash
# Patch: -pro_arm_davinci_timer_add_compare_reg_support
# Date: Thu Feb 19 15:03:53 2009
# Source: MontaVista Software, Inc.
# MR: 28546
# Type: Enhancement
# Disposition: needs submitting to DaVinci community
# Signed-off-by: Steve Chen <schen@mvista.com>
# Signed-off-by: Mark A Greer <mgreer@mvista.com>
# Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
# Description:
# 
#     DaVinci: Add support for the TIMER64+ compare registers
# 
#     The original DaVinci timer code requires two timers: a system tick timer
#     and a free running counter to implement the system time.  DA8xx with its
#     TIMER64+ introduces the compare registers that can be used for the system
#     tick timer.  As a result, only one timer is needed...
# 
#  arch/arm/mach-davinci/time.c        |    3 +
#  arch/arm/plat-davinci/time.c        |   61 ++++++++++++++++++++++++++++++++----
#  include/asm-arm/arch-davinci/time.h |    3 +
#  3 files changed, 59 insertions(+), 8 deletions(-)
# 

PATCHNUM=2147
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 28546
Type: Enhancement
Disposition: needs submitting to DaVinci community
Signed-off-by: Steve Chen <schen@mvista.com>
Signed-off-by: Mark A Greer <mgreer@mvista.com>
Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
Description:

    DaVinci: Add support for the TIMER64+ compare registers

    The original DaVinci timer code requires two timers: a system tick timer
    and a free running counter to implement the system time.  DA8xx with its
    TIMER64+ introduces the compare registers that can be used for the system
    tick timer.  As a result, only one timer is needed...

 arch/arm/mach-davinci/time.c        |    3 +
 arch/arm/plat-davinci/time.c        |   61 ++++++++++++++++++++++++++++++++----
 include/asm-arm/arch-davinci/time.h |    3 +
 mvl_patches/pro50-2147.c            |   16 +++++++++
 4 files changed, 75 insertions(+), 8 deletions(-)

Index: linux-2.6.18/arch/arm/mach-davinci/time.c
===================================================================
--- linux-2.6.18.orig/arch/arm/mach-davinci/time.c
+++ linux-2.6.18/arch/arm/mach-davinci/time.c
@@ -54,7 +54,8 @@ static void __init davinci_timer_init(vo
 		 */
 		system = T0_BOT;
 	}
-	davinci_common_timer_init(davinci_bases, 2, timer_irqs, system, T0_TOP);
+	davinci_common_timer_init(davinci_bases, 2, timer_irqs, NULL,
+				  system, T0_TOP);
 }
 
 struct sys_timer davinci_timer = {
Index: linux-2.6.18/arch/arm/plat-davinci/time.c
===================================================================
--- linux-2.6.18.orig/arch/arm/plat-davinci/time.c
+++ linux-2.6.18/arch/arm/plat-davinci/time.c
@@ -27,8 +27,10 @@ struct timer_s {
 	unsigned long reg_base;
 	unsigned long tim_reg;
 	unsigned long prd_reg;
+	unsigned long cmp_reg;
 	unsigned long enamode_shift;
 	struct irqaction irqaction;
+	struct irqaction cmpaction;
 };
 
 /* values for 'opts' field of struct timer_s */
@@ -47,6 +49,8 @@ static void timer32_config(struct timer_
 	/* Reset counter to zero, set new period */
 	davinci_writel(0, t->tim_reg);
 	davinci_writel(t->period, t->prd_reg);
+	if (t->cmp_reg)
+		davinci_writel(t->period, t->cmp_reg);
 
 	/* Set enable mode */
 	if (t->opts & TIMER_OPTS_ONESHOT)
@@ -75,6 +79,31 @@ static irqreturn_t freerun_interrupt(int
 	return IRQ_HANDLED;
 }
 
+static irqreturn_t cmp_interrupt(int irq, void *dev_id, struct pt_regs *regs)
+{
+	struct timer_s *t = dev_id;
+
+	/* We have to emulate the periodic mode for the clockevents layer */
+	if (t->opts & TIMER_OPTS_PERIODIC) {
+		unsigned long tim, cmp = davinci_readl(t->cmp_reg);
+
+		cmp += t->period;
+		davinci_writel(cmp, t->cmp_reg);
+
+		/*
+		 * The interrupts do happen  to be disabled by the kernel for
+		 * a long periods of time, thus the timer can go far ahead of
+		 * the last set compare value...
+		 */
+		tim = davinci_readl(t->tim_reg);
+		if (time_after(tim, cmp))
+			davinci_writel(tim + t->period, t->cmp_reg);
+	}
+
+	clockevent_davinci.event_handler(regs);
+	return IRQ_HANDLED;
+}
+
 static struct timer_s davinci_system_timer = {
 	.name		= "clockevent",
 	.opts		= TIMER_OPTS_DISABLED,
@@ -91,12 +120,17 @@ static struct timer_s davinci_freerun_ti
 	.irqaction	= {
 		.flags		= IRQF_DISABLED | IRQF_TIMER,
 		.handler	= freerun_interrupt
+	},
+	.cmpaction	= {
+		.name		= "timer compare reg 0",
+		.flags		= IRQF_DISABLED | IRQF_TIMER,
+		.handler	= cmp_interrupt
 	}
 };
 static struct timer_s *timers[NUM_TIMERS];
 
 static void __init timer_init(int num_timers64, u32 *bases,
-			      int *timer_irqs)
+			      int *timer_irqs,	int *cmp_irqs)
 {
 	int i;
 
@@ -136,6 +170,14 @@ static void __init timer_init(int num_ti
 				t->enamode_shift = ENAMODE12_SHIFT;
 				t->tim_reg = t->reg_base + TIM12;
 				t->prd_reg = t->reg_base + PRD12;
+				/* Check the compare register IRQ */
+				if (t->cmpaction.handler != NULL &&
+				    cmp_irqs != NULL && cmp_irqs[t->id]) {
+					t->cmp_reg = t->reg_base + CMP12(0);
+					t->cmpaction.dev_id = (void *)t;
+					setup_irq(cmp_irqs[t->id],
+						  &t->cmpaction);
+				}
 			} else {
 				t->enamode_shift = ENAMODE34_SHIFT;
 				t->tim_reg = t->reg_base + TIM34;
@@ -181,7 +223,15 @@ static void davinci_set_next_event(unsig
 	struct timer_s *t = timers[tid_system];
 
 	t->period = cycles;
-	timer32_config(t);
+
+	/*
+	 * We need not (and must not) disable the timer and reprogram
+	 * its mode/period when using the compare register...
+	 */
+	if (t->cmp_reg)
+		davinci_writel(davinci_readl(t->tim_reg) + cycles, t->cmp_reg);
+	else
+		timer32_config(t);
 }
 
 static void davinci_set_mode(enum clock_event_mode mode,
@@ -191,9 +241,8 @@ static void davinci_set_mode(enum clock_
 
 	switch (mode) {
 	case CLOCK_EVT_PERIODIC:
-		t->period = DAVINCI_CLOCK_TICK_RATE / HZ;
 		t->opts = TIMER_OPTS_PERIODIC;
-		timer32_config(t);
+		davinci_set_next_event(DAVINCI_CLOCK_TICK_RATE / HZ, evt);
 		break;
 	case CLOCK_EVT_ONESHOT:
 		t->opts = TIMER_OPTS_ONESHOT;
@@ -215,7 +264,7 @@ static struct clock_event_device clockev
 static char error[] __initdata = KERN_ERR "%s: can't register clocksource!\n";
 
 void __init davinci_common_timer_init(u32 *bases, int num_timers64,
-				      int timer_irqs[NUM_TIMERS],
+				      int timer_irqs[NUM_TIMERS], int *cmp_irqs,
 				      int system, int freerun)
 {
 	tid_system  = system;
@@ -225,7 +274,7 @@ void __init davinci_common_timer_init(u3
 	timers[tid_freerun] = &davinci_freerun_timer;
 
 	/* Init timer hardware */
-	timer_init(num_timers64, bases, timer_irqs);
+	timer_init(num_timers64, bases, timer_irqs, cmp_irqs);
 
 	/* Setup clocksource */
 	clocksource_davinci.mult =
Index: linux-2.6.18/include/asm-arm/arch-davinci/time.h
===================================================================
--- linux-2.6.18.orig/include/asm-arm/arch-davinci/time.h
+++ linux-2.6.18/include/asm-arm/arch-davinci/time.h
@@ -20,6 +20,7 @@
 #define TCR				0x20
 #define TGCR				0x24
 #define WDTCR				0x28
+#define CMP12(n)			(0x60 + ((n) << 2))
 
 /* Timer register bitfields */
 #define ENAMODE12_SHIFT 		6
@@ -60,7 +61,7 @@ enum {
 #define IS_TIMER_BOT(id) (!IS_TIMER_TOP(id))
 
 void davinci_common_timer_init(u32 *bases, int num_timers64,
-			       int timer_irqs[NUM_TIMERS],
+			       int timer_irqs[NUM_TIMERS], int *cmp_irqs,
 			       int system, int freerun);
 
 void davinci_watchdog_reset(u32 base);
Index: linux-2.6.18/mvl_patches/pro50-2147.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-2147.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2009 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(2147);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

