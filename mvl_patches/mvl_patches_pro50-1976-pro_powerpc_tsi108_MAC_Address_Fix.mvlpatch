#! /usr/bin/env bash
# Patch: -pro_powerpc_tsi108_MAC_Address_Fix
# Date: Wed Dec  3 14:04:47 2008
# Source: MontaVista Software, Inc.
# MR: 30078
# Type: Defect Fix
# Disposition: needs submitting to Kernel.org
# Signed-off-by: Randy Vinson <rvinson@mvista.com>
# Description:
# Fix the passing of iMPC7448HPC2 MAC addresses from U-Boot to the TSI108
# Ethernet driver.
# 

PATCHNUM=1976
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 30078
Type: Defect Fix
Disposition: needs submitting to Kernel.org
Signed-off-by: Randy Vinson <rvinson@mvista.com>
Description:
Fix the passing of iMPC7448HPC2 MAC addresses from U-Boot to the TSI108
Ethernet driver.

Index: linux-2.6.18/arch/powerpc/boot/dts/mpc7448hpc2.dts
===================================================================
--- linux-2.6.18.orig/arch/powerpc/boot/dts/mpc7448hpc2.dts
+++ linux-2.6.18/arch/powerpc/boot/dts/mpc7448hpc2.dts
@@ -88,11 +88,11 @@
 		};
 
 		enet0: ethernet@6200 {
-			#size-cells = <0>;
 			device_type = "network";
 			compatible = "tsi108-ethernet";
 			reg = <6000 200>;
-			address = [ 00 06 D2 00 00 01 ];
+			mac-address = [ 00 00 00 00 00 00 ];
+			local-mac-address = [ 00 00 00 00 00 00 ];
 			interrupts = <10 2>;
 			interrupt-parent = <&mpic>;
 			mdio-handle = <&MDIO>;
@@ -100,12 +100,11 @@
 		};
 
 		enet1: ethernet@6600 {
-			#address-cells = <1>;
-			#size-cells = <0>;
 			device_type = "network";
 			compatible = "tsi108-ethernet";
 			reg = <6400 200>;
-			address = [ 00 06 D2 00 00 02 ];
+			mac-address = [ 00 00 00 00 00 00 ];
+			local-mac-address = [ 00 00 00 00 00 00 ];
 			interrupts = <11 2>;
 			interrupt-parent = <&mpic>;
 			mdio-handle = <&MDIO>;
Index: linux-2.6.18/drivers/net/tsi108_eth.c
===================================================================
--- linux-2.6.18.orig/drivers/net/tsi108_eth.c
+++ linux-2.6.18/drivers/net/tsi108_eth.c
@@ -1105,54 +1105,23 @@ static void tsi108_reset_ether(struct ts
 			       TSI108_MAC_MII_MGMT_CLK)) | 0x07);
 }
 
-static int tsi108_get_mac(struct net_device *dev)
+static void tsi108_eth_set_hw_mac_addr(struct net_device *dev)
 {
 	struct tsi108_prv_data *data = netdev_priv(dev);
-	u32 word1 = TSI_READ(TSI108_MAC_ADDR1);
-	u32 word2 = TSI_READ(TSI108_MAC_ADDR2);
-
-	/* Note that the octets are reversed from what the manual says,
-	 * producing an even weirder ordering...
-	 */
-	if (word2 == 0 && word1 == 0) {
-		dev->dev_addr[0] = 0x00;
-		dev->dev_addr[1] = 0x06;
-		dev->dev_addr[2] = 0xd2;
-		dev->dev_addr[3] = 0x00;
-		dev->dev_addr[4] = 0x00;
-		if (0x8 == data->phy)
-			dev->dev_addr[5] = 0x01;
-		else
-			dev->dev_addr[5] = 0x02;
-
-		word2 = (dev->dev_addr[0] << 16) | (dev->dev_addr[1] << 24);
-
-		word1 = (dev->dev_addr[2] << 0) | (dev->dev_addr[3] << 8) |
-		    (dev->dev_addr[4] << 16) | (dev->dev_addr[5] << 24);
+	u32 word1, word2;
 
-		TSI_WRITE(TSI108_MAC_ADDR1, word1);
-		TSI_WRITE(TSI108_MAC_ADDR2, word2);
-	} else {
-		dev->dev_addr[0] = (word2 >> 16) & 0xff;
-		dev->dev_addr[1] = (word2 >> 24) & 0xff;
-		dev->dev_addr[2] = (word1 >> 0) & 0xff;
-		dev->dev_addr[3] = (word1 >> 8) & 0xff;
-		dev->dev_addr[4] = (word1 >> 16) & 0xff;
-		dev->dev_addr[5] = (word1 >> 24) & 0xff;
-	}
+	word2 = (dev->dev_addr[0] << 16) | (dev->dev_addr[1] << 24);
 
-	if (!is_valid_ether_addr(dev->dev_addr)) {
-		printk("KERN_ERR: word1: %08x, word2: %08x\n", word1, word2);
-		return -EINVAL;
-	}
+	word1 = (dev->dev_addr[2] << 0) | (dev->dev_addr[3] << 8) |
+	    (dev->dev_addr[4] << 16) | (dev->dev_addr[5] << 24);
 
-	return 0;
+	TSI_WRITE(TSI108_MAC_ADDR1, word1);
+	TSI_WRITE(TSI108_MAC_ADDR2, word2);
 }
 
 static int tsi108_set_mac(struct net_device *dev, void *addr)
 {
 	struct tsi108_prv_data *data = netdev_priv(dev);
-	u32 word1, word2;
 	int i;
 
 	if (!is_valid_ether_addr(addr))
@@ -1162,14 +1131,8 @@ static int tsi108_set_mac(struct net_dev
 		/* +2 is for the offset of the HW addr type */
 		dev->dev_addr[i] = ((unsigned char *)addr)[i + 2];
 
-	word2 = (dev->dev_addr[0] << 16) | (dev->dev_addr[1] << 24);
-
-	word1 = (dev->dev_addr[2] << 0) | (dev->dev_addr[3] << 8) |
-	    (dev->dev_addr[4] << 16) | (dev->dev_addr[5] << 24);
-
 	spin_lock_irq(&data->misclock);
-	TSI_WRITE(TSI108_MAC_ADDR1, word1);
-	TSI_WRITE(TSI108_MAC_ADDR2, word2);
+	tsi108_eth_set_hw_mac_addr(dev);
 	spin_lock(&data->txlock);
 
 	if (data->txfree && data->link_up)
@@ -1327,6 +1290,8 @@ static int tsi108_open(struct net_device
 		       data->id, dev->irq, dev->name);
 	}
 
+	tsi108_eth_set_hw_mac_addr(dev);
+
 	data->rxring = dma_alloc_coherent(NULL, rxring_size,
 			&data->rxdma, GFP_KERNEL);
 
@@ -1651,7 +1616,9 @@ tsi108_init_one(struct platform_device *
 	tsi108_reset_ether(data);
 	tsi108_kill_phy(dev);
 
-	if ((err = tsi108_get_mac(dev)) != 0) {
+	/* Copy the station address into the dev structure, */
+	memcpy(dev->dev_addr, einfo->mac_addr, 6);
+	if (!is_valid_ether_addr(dev->dev_addr)) {
 		printk(KERN_ERR "%s: Invalid MAC address.  Please correct.\n",
 		       dev->name);
 		goto register_fail;
Index: linux-2.6.18/mvl_patches/pro50-1976.c
===================================================================
--- /dev/null
+++ linux-2.6.18/mvl_patches/pro50-1976.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1976);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

